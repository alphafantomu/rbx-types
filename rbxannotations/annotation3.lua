---@class LineForce : Constraint, Instance
---@field public ApplyAtCenterOfMass bool
---@field public InverseSquareLaw bool
---@field public Magnitude float
---@field public MaxForce float
---@field public ReactionForceEnabled bool
---A LineForce is used to apply a force along a line between two points. As the
---end points of the line move, the direction of the force will change
---accordingly.
---
---![LineForce Demo][1]
---
---## Direction of force
---
---The direction that a LineForce applies its force in is determined by its
---`Attachment|attachments` and `LineForce/ApplyAtCenterOfMass` properties. When
---ApplyAtCenter of mass is false, which it is by default, the direction of the
---force will be from the location of `Constraint/Attachment0|Attachment0` to the
---location of `Constraint/Attachment1|Attachment1`. If ApplyToCenter is true,
---then the direction will be from the center of mass of Attachment0's parent to
---the location of Attachment1. Note that if the parent of Attachment0 is rigidly
---connected to other parts, then the LineForce will use the center of mass of
---all of the parts to determine the origin of the direction.
---
---## Location of force
---
---A LineForce will apply its force on the Parent of its Attachment0, but the
---location where the force is applied is determined by the LineForce's
---ApplyAtCenterOfMass property.
---
---When ApplyAtCenterOfMass is false, which it is by default, the force will be
---applied to the part at the Attachement0's location. This means that if the
---attachment is not at the center of the part, it can create a torque on the
---part.
---
---When ApplyAtCenterOfMass is set to true, the force will check if any other
---parts are rigidly connected to the parent part of its Attachment0. If there
---are, then the force will apply at the center of mass of all of the connected
---parts. If there are no rigid connections to other parts, the force will simply
---be applied at the center of mass of the part.
---
---## Strength of Force
---
---The strength of the force applied by a LineForce is determined by the
---`LineForce/Magnitude` and `LineForce/InverseSquareLaw` properties. The
---InverseSquareLaw property determines whether the force is constant or not.
---
---When InverseSquareLaw is false, which is is by default, the force applied is
---constant, and its magnitude is equal to the magnitude defined by the Magnitude
---property.
---
---When InverseSquareLaw is true, then the force will scale based on how much
---distance there is between the two endpoints. When the distance is 1 stud, then
---the force's magnitude will be the value of the Magnitude property. If the two
---points are further away, the force will decrease. Conversely, the force will
---increase if the two points move closer together. This function can be used to
---determine the force at any given separation:
---
---```
---ActualMagnitude = Magnitude / (Separation ^ 2)
---```
---
---LineForces with `LineForce.InverseSquareLaw` set to true can be used to
---simulate various physical systems such as gravity or electric fields.
---
---See also:
---
---- [Body Movers Example.rbxl][2], a sample place showcasing body movers in
---  various configurations.
---- [Attachments and Constraints][3], an article outlining how to create and use
---  attachments and constraints
---
---[1]: /assets/blt1c206bd81152d773/LineForceDemo.gif
---[2]:
---  https://doy2mn9upadnk.cloudfront.net/uploads/default/original/3X/e/1/e17a844750802035b24f68ddcbd83f6312b8f1d6.rbxl
---[3]: https://developer.roblox.com/articles/Constraints
---
local LineForce;
---When true, applies force at center of mass of Attachment0's parent Part,
---and the line determining the direction of the force will start at the said
---center of mass. When false, the force is applied at Attachment0's location
---and the line determining the direction will also start at Attachment0.
---
LineForce.ApplyAtCenterOfMass = nil;
---When true, the force magnitude is multiplied by the inverse square of the
---distance.
---
LineForce.InverseSquareLaw = nil;
---The magnitude of the force.
---
LineForce.Magnitude = nil;
---The maximum absolute force that can be applied. This property is enabled
---only when InverseSquareLaw is also enabled. This property is mainly used
---to address the issue that the force of the body mover becomes infinite the
---closer the two attachments are, causing explosions that can't be prevented
---by scripts. This property bounds the force's absolute value.
---
LineForce.MaxForce = nil;
---Enables a reaction force (equal an opposite) to be applied to the parent
---of Attachment1. By default line force only applies a force on the parent
---of Attachment0 and uses Attachment1 as the target direction without any
---dynamic relationship.
---
LineForce.ReactionForceEnabled = nil;
---@class LineHandleAdornment : HandleAdornment, PVAdornment, GuiBase3d, GuiBase, Instance
---@field public Length float
---@field public Thickness float
---For handles to be interactive, they must be parented to a player's PlayerGui
---or the CoreGui. The **LineHandleAdornment** is a line that can be adorned to a
---`BasePart`. This line starts at the center of the adornment's
---`HandleAdornment/CFrame` (offset by the adornment's
---`HandleAdornment/SizeRelativeOffset`) and will be oriented along its CFrame.
---This adornment can listen to input events and is commonly used to make dragger
---tools.
---
local LineHandleAdornment;
---The length of the line.
---
LineHandleAdornment.Length = nil;
---The thickness of the line in pixels.
---
LineHandleAdornment.Thickness = nil;
---@class LinearVelocity : Constraint, Instance
---@field public LineDirection Vector3
---@field public LineVelocity float
---@field public MaxForce float
---@field public PlaneVelocity Vector2
---@field public PrimaryTangentAxis Vector3
---@field public RelativeTo ActuatorRelativeTo
---@field public SecondaryTangentAxis Vector3
---@field public VectorVelocity Vector3
---@field public VelocityConstraintMode VelocityConstraintMode
---The **LinearVelocity** constraint applies force on a part/assembly to maintain
---a linear velocity.
---
---This object maintains all functionality of `BodyVelocity`, a legacy body
---mover. To instead apply a constant force, use a `VectorForce` object instead.
---
local LinearVelocity;
---The normalized `datatype/Vector3` direction for constraining the velocity
---along a line, when
---`LinearVelocity/VelocityConstraintMode| VelocityConstraintMode` is set to
---**Line**. Default is [1, 0, 0].
---
LinearVelocity.LineDirection = nil;
---Float value of the velocity when
---`LinearVelocity/VelocityConstraintMode|VelocityConstraintMode` is set to
---**Line**. Default is 0.
---
LinearVelocity.LineVelocity = nil;
---Maximum magnitude of the force vector the constraint can apply.
---
LinearVelocity.MaxForce = nil;
---`datatype/Vector2` value of the velocity in each tangent direction of the
---plane, when `LinearVelocity/VelocityConstraintMode|VelocityConstraintMode`
---is set to **Plane**. Default is [0, 0].
---
LinearVelocity.PlaneVelocity = nil;
---The primary axis in the plane, when
---`LinearVelocity/VelocityConstraintMode|VelocityConstraintMode` is set to
---**Plane**. Value depends on the value of
---`LinearVelocity/RelativeTo|RelativeTo` as follows:
---
---- If `LinearVelocity/RelativeTo|RelativeTo` is set to **Attachment0**,
---  this axis is the `Attachment/Axis|Axis` of
---  `Constraint/Attachment0|Attachment0`.
---- If `LinearVelocity/RelativeTo|RelativeTo` is set to **Attachment1**,
---  this axis is the `Attachment/Axis|Axis` of
---  `Constraint/Attachment1|Attachment1`.
---- If `LinearVelocity/RelativeTo|RelativeTo` is set to **World**, this
---  value must be specified in the world space.
---
LinearVelocity.PrimaryTangentAxis = nil;
---Sets the `enum/ActuatorRelativeTo` property for the `LinearVelocity`
---constraint.
---
LinearVelocity.RelativeTo = nil;
---The secondary axis in the plane, when
---`LinearVelocity/VelocityConstraintMode|VelocityConstraintMode` is set to
---**Plane**. Value depends on the value of
---`LinearVelocity/RelativeTo|RelativeTo` as follows:
---
---- If `LinearVelocity/RelativeTo|RelativeTo` is set to **Attachment0**,
---  this axis is the `Attachment/SecondaryAxis|SecondaryAxis` of
---  `Constraint/Attachment0|Attachment0`.
---- If `LinearVelocity/RelativeTo|RelativeTo` is set to **Attachment1**,
---  this axis is the `Attachment/SecondaryAxis|SecondaryAxis` of
---  `Constraint/Attachment1|Attachment1`.
---- If `LinearVelocity/RelativeTo|RelativeTo` is set to **World**, this
---  value must be specified in the world space.
---
LinearVelocity.SecondaryTangentAxis = nil;
---`datatype/Vector3` velocity value when
---`LinearVelocity/VelocityConstraintMode|VelocityConstraintMode` is set to
---**Vector**. Default is [0, 0, 0].
---
LinearVelocity.VectorVelocity = nil;
---The mode of the `LinearVelocity` constraint: **Line**, **Plane**, or
---**Vector**. Default is **Vector**.
---
LinearVelocity.VelocityConstraintMode = nil;
---@class LocalDebuggerConnection : DebuggerConnection, Instance
local LocalDebuggerConnection;
---@class LocalScript : Script, BaseScript, LuaSourceContainer, Instance
---A LocalScript is a Lua source container that runs Lua code on a client
---connected to a Roblox server. They are used to access client-only objects,
---such as the player's `Camera`. For code run through LocalScripts, the
---LocalPlayer property of the `Players` service will return the player whose
---client is running the script.
---
---A LocalScript will **only** run Lua code if it is a descendant of one of the
---following objects:
---
---- A Player's `Backpack`, such as a child of a `Tool`
---- A Player's `Player/Character|character` model
---- A Player's `PlayerGui`
---- A Player's `PlayerScripts`.
---- The `ReplicatedFirst` service
---
local LocalScript;
---@class LocalStorageService : Instance
---@field public ItemWasSet RBXScriptSignal.ItemWasSet
---@field public StoreWasCleared RBXScriptSignal.StoreWasCleared
local LocalStorageService;
---@return void
LocalStorageService.Flush = function(self) end;
---@param callback Function
---@return void
LocalStorageService.WhenLoaded = function(self, callback) end;
---@param key string
---@return string
LocalStorageService.GetItem = function(self, key) end;
---@param key string
---@param value string
---@return void
LocalStorageService.SetItem = function(self, key, value) end;
---@class RBXScriptSignal.ItemWasSet : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ItemWasSet, callback: fun(key: string, value: string)): RBXScriptConnection
---
LocalStorageService.ItemWasSet = nil;
---@class RBXScriptSignal.StoreWasCleared : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.StoreWasCleared, callback: fun()): RBXScriptConnection
---
LocalStorageService.StoreWasCleared = nil;
---@class LocalizationService : Instance
---@field public ForcePlayModeGameLocaleId string
---@field public ForcePlayModeRobloxLocaleId string
---@field public IsTextScraperRunning bool
---@field public RobloxForcePlayModeGameLocaleId string
---@field public RobloxForcePlayModeRobloxLocaleId string
---@field public RobloxLocaleId string
---@field public SystemLocaleId string
---@field public AutoTranslateWillRun RBXScriptSignal.AutoTranslateWillRun
---LocalizationService is the service responsible for handling automated
---translation.
---
---It is used as a storage for `LocalizationTable` objects used by automatic text
---replacement.
---
---LocalizationService will only use its child LocalizationTables for automatic
---text replacement unless `GuiBase2d/RootLocalizationTable` is specified on a
---GUI object or its ancestors.
---
local LocalizationService;
---
LocalizationService.ForcePlayModeGameLocaleId = nil;
---When set to a non-empty string, this property overrides value of the
---`LocalizationService/RobloxLocaleId` when running in play solo mode.
---
LocalizationService.ForcePlayModeRobloxLocaleId = nil;
---
LocalizationService.IsTextScraperRunning = nil;
---
LocalizationService.RobloxForcePlayModeGameLocaleId = nil;
---
LocalizationService.RobloxForcePlayModeRobloxLocaleId = nil;
---This property shows the locale id used for the localization of core and
---internal features such as `CoreGui` and `CoreScript|CoreScripts`.
---
---This will return a string with the two letter code (for example, "en-us")
---for the locale.
---
LocalizationService.RobloxLocaleId = nil;
---This property shows the locale id that the local player has set for their
---operating system.
---
---This will return a string with the two letter code (for example, "en-us")
---for the locale.
---
LocalizationService.SystemLocaleId = nil;
---@param player Instance
---@return Instance
---This function takes a player as an argument and yields until the cloud
---`LocalizationTable` for that player's locale has been loaded, if
---available. It then returns a `Translator` object which can be used to
---perform translations for that locale if any are available. The entries
---used for localization are the entries provided by the `LocalizationTable`
---hierarchy under `LocalizationService` as well as the cloud table (if
---available). This will be the same set of entries returned by
---`LocalizationService/GetTableEntries|GetTableEntries(nil)`.
---
---This function can error and thus should be wrapped in a `pcall()`.
---
---See also:
---
---- `LocalizationService/GetTranslatorForPlayer`, same functionality as this
---  function except that it does not yield and does not wait until the cloud
---  `LocalizationTable` for the player's locale has been loaded. This
---  function is deprecated and should not be used in new work.
---- `LocalizationService/GetTranslatorForLocaleAsync`, returns a Translator
---  to be used for translations using the provided locale.
---
LocalizationService.GetTranslatorForPlayerAsync = function(self, player) end;
---@param player Instance
---@return Instance
---This function takes a player as an argument and returns a `Translator`
---instance which can be used to perform translations for that locale if any
---are available. The entries used for localization are the entries provided
---by the `LocalizationTable` hierarchy under `LocalizationService` as well
---as the cloud `LocalizationTable`, if it is available and already loaded.
---This will be the same set of entries returned by
---`LocalizationService/GetTableEntries(nil)`.
---
---This function does not yield. It will not wait until the cloud
---`LocalizationTable` has loaded.
---
---See also:
---
---- `LocalizationService/GetTranslatorForPlayerAsync` has the same
---  functionality as this function, except that it yields until the cloud
---  `LocalizationTable` has been loaded.
---- `LocalizationService/GetTranslatorForLocaleAsync`, returns a Translator
---  to be used for translations using the provided locale.
---
LocalizationService.GetTranslatorForPlayer = function(self, player) end;
---@return Instance
LocalizationService.PromptUploadCSVToGameTable = function(self) end;
---@return void
LocalizationService.StopTextScraper = function(self) end;
---@return Objects
---Returns a list of `LocalizationTable` objects used for localizing
---CoreScripts.
---
LocalizationService.GetCorescriptLocalizations = function(self) end;
---@return void
LocalizationService.PromptImportFromCSVs = function(self) end;
---@param player Instance
---@return string
---Returns a country/region code string according to player's client IP
---geolocation. The supported country/region codes are as follows:
---
---<table>
---  <thead>
---    <tr>
---      <th>Code</th>
---      <th>Country/Region</th>
---    </tr>
---  </thead>
---  <tbody>
---    <tr>
---      <td>US</td><td>United States</td>
---    </tr>
---    <tr>
---      <td>GB</td><td>United Kingdom</td>
---    </tr>
---    <tr>
---      <td>CA</td><td>Canada</td>
---    </tr>
---    <tr>
---      <td>AF</td><td>Afghanistan</td>
---    </tr>
---    <tr>
---      <td>AX</td><td>Aland Islands</td>
---    </tr>
---    <tr>
---      <td>AL</td><td>Albania</td>
---    </tr>
---    <tr>
---      <td>DZ</td><td>Algeria</td>
---    </tr>
---    <tr>
---      <td>AS</td><td>American Samoa</td>
---    </tr>
---    <tr>
---      <td>AD</td><td>Andorra</td>
---    </tr>
---    <tr>
---      <td>AO</td><td>Angola</td>
---    </tr>
---    <tr>
---      <td>AI</td><td>Anguilla</td>
---    </tr>
---    <tr>
---      <td>AQ</td><td>Antarctica</td>
---    </tr>
---    <tr>
---      <td>AG</td><td>Antigua and Barbuda</td>
---    </tr>
---    <tr>
---      <td>AR</td><td>Argentina</td>
---    </tr>
---    <tr>
---      <td>AM</td><td>Armenia</td>
---    </tr>
---    <tr>
---      <td>AW</td><td>Aruba</td>
---    </tr>
---    <tr>
---      <td>AU</td><td>Australia</td>
---    </tr>
---    <tr>
---      <td>AT</td><td>Austria</td>
---    </tr>
---    <tr>
---      <td>AZ</td><td>Azerbaijan</td>
---    </tr>
---    <tr>
---      <td>BS</td><td>Bahamas</td>
---    </tr>
---    <tr>
---      <td>BH</td><td>Bahrain</td>
---    </tr>
---    <tr>
---      <td>BD</td><td>Bangladesh</td>
---    </tr>
---    <tr>
---      <td>BB</td><td>Barbados</td>
---    </tr>
---    <tr>
---      <td>BY</td><td>Belarus</td>
---    </tr>
---    <tr>
---      <td>BE</td><td>Belgium</td>
---    </tr>
---    <tr>
---      <td>BZ</td><td>Belize</td>
---    </tr>
---    <tr>
---      <td>BJ</td><td>Benin</td>
---    </tr>
---    <tr>
---      <td>BM</td><td>Bermuda</td>
---    </tr>
---    <tr>
---      <td>BT</td><td>Bhutan</td>
---    </tr>
---    <tr>
---      <td>BO</td><td>Bolivia</td>
---    </tr>
---    <tr>
---      <td>BQ</td><td>Bonaire, Saint Eustatius and Saba</td>
---    </tr>
---    <tr>
---      <td>BA</td><td>Bosnia and Herzegovina</td>
---    </tr>
---    <tr>
---      <td>BW</td><td>Botswana</td>
---    </tr>
---    <tr>
---      <td>BV</td><td>Bouvet Island</td>
---    </tr>
---    <tr>
---      <td>BR</td><td>Brazil</td>
---    </tr>
---    <tr>
---      <td>IO</td><td>British Indian Ocean Territory</td>
---    </tr>
---    <tr>
---      <td>BN</td><td>Brunei Darussalam</td>
---    </tr>
---    <tr>
---      <td>BG</td><td>Bulgaria</td>
---    </tr>
---    <tr>
---      <td>BF</td><td>Burkina Faso</td>
---    </tr>
---    <tr>
---      <td>BI</td><td>Burundi</td>
---    </tr>
---    <tr>
---      <td>KH</td><td>Cambodia</td>
---    </tr>
---    <tr>
---      <td>CM</td><td>Cameroon</td>
---    </tr>
---    <tr>
---      <td>CV</td><td>Cape Verde</td>
---    </tr>
---    <tr>
---      <td>KY</td><td>Cayman Islands</td>
---    </tr>
---    <tr>
---      <td>CF</td><td>Central African Republic</td>
---    </tr>
---    <tr>
---      <td>TD</td><td>Chad</td>
---    </tr>
---    <tr>
---      <td>CL</td><td>Chile</td>
---    </tr>
---    <tr>
---      <td>CN</td><td>China</td>
---    </tr>
---    <tr>
---      <td>CX</td><td>Christmas Island</td>
---    </tr>
---    <tr>
---      <td>CC</td><td>Cocos Islands</td>
---    </tr>
---    <tr>
---      <td>CO</td><td>Colombia</td>
---    </tr>
---    <tr>
---      <td>KM</td><td>Comoros</td>
---    </tr>
---    <tr>
---      <td>CG</td><td>Congo</td>
---    </tr>
---    <tr>
---      <td>CD</td><td>Congo (DRC)</td>
---    </tr>
---    <tr>
---      <td>CK</td><td>Cook Islands</td>
---    </tr>
---    <tr>
---      <td>CR</td><td>Costa Rica</td>
---    </tr>
---    <tr>
---      <td>CI</td><td>Ivory Coast</td>
---    </tr>
---    <tr>
---      <td>HR</td><td>Croatia</td>
---    </tr>
---    <tr>
---      <td>CW</td><td>Curaçao</td>
---    </tr>
---    <tr>
---      <td>CY</td><td>Cyprus</td>
---    </tr>
---    <tr>
---      <td>CZ</td><td>Czech Republic</td>
---    </tr>
---    <tr>
---      <td>DK</td><td>Denmark</td>
---    </tr>
---    <tr>
---      <td>DJ</td><td>Djibouti</td>
---    </tr>
---    <tr>
---      <td>DM</td><td>Dominica</td>
---    </tr>
---    <tr>
---      <td>DO</td><td>Dominican Republic</td>
---    </tr>
---    <tr>
---      <td>EC</td><td>Ecuador</td>
---    </tr>
---    <tr>
---      <td>EG</td><td>Egypt</td>
---    </tr>
---    <tr>
---      <td>SV</td><td>El Salvador</td>
---    </tr>
---    <tr>
---      <td>GQ</td><td>Equatorial Guinea</td>
---    </tr>
---    <tr>
---      <td>ER</td><td>Eritrea</td>
---    </tr>
---    <tr>
---      <td>EE</td><td>Estonia</td>
---    </tr>
---    <tr>
---      <td>ET</td><td>Ethiopia</td>
---    </tr>
---    <tr>
---      <td>FK</td><td>Falkland Islands (Malvinas)</td>
---    </tr>
---    <tr>
---      <td>FO</td><td>Faroe Islands</td>
---    </tr>
---    <tr>
---      <td>FJ</td><td>Fiji</td>
---    </tr>
---    <tr>
---      <td>FI</td><td>Finland</td>
---    </tr>
---    <tr>
---      <td>FR</td><td>France</td>
---    </tr>
---    <tr>
---      <td>GF</td><td>French Guiana</td>
---    </tr>
---    <tr>
---      <td>PF</td><td>French Polynesia</td>
---    </tr>
---    <tr>
---      <td>TF</td><td>French Southern Territories</td>
---    </tr>
---    <tr>
---      <td>GA</td><td>Gabon</td>
---    </tr>
---    <tr>
---      <td>GM</td><td>Gambia</td>
---    </tr>
---    <tr>
---      <td>GE</td><td>Georgia</td>
---    </tr>
---    <tr>
---      <td>DE</td><td>Germany</td>
---    </tr>
---  </tbody>
---</table>
---
---<table>
---  <thead>
---    <tr>
---      <th>Code</th>
---      <th>Country/Region</th>
---  </tr>
---  </thead>
---  <tbody>
---    <tr>
---      <td>GH</td><td>Ghana</td>
---    </tr>
---    <tr>
---      <td>GI</td><td>Gibraltar</td>
---    </tr>
---    <tr>
---      <td>GR</td><td>Greece</td>
---    </tr>
---    <tr>
---      <td>GL</td><td>Greenland</td>
---    </tr>
---    <tr>
---      <td>GD</td><td>Grenada</td>
---    </tr>
---    <tr>
---      <td>GP</td><td>Guadeloupe</td>
---    </tr>
---    <tr>
---      <td>GU</td><td>Guam</td>
---    </tr>
---    <tr>
---      <td>GT</td><td>Guatemala</td>
---    </tr>
---    <tr>
---      <td>GG</td><td>Guernsey</td>
---    </tr>
---    <tr>
---      <td>GN</td><td>Guinea</td>
---    </tr>
---    <tr>
---      <td>GW</td><td>Guinea-Bissau</td>
---    </tr>
---    <tr>
---      <td>GY</td><td>Guyana</td>
---    </tr>
---    <tr>
---      <td>HT</td><td>Haiti</td>
---    </tr>
---    <tr>
---      <td>HM</td><td>Heard Island and the McDonald Islands</td>
---    </tr>
---    <tr>
---      <td>VA</td><td>Holy See</td>
---    </tr>
---    <tr>
---      <td>HN</td><td>Honduras</td>
---    </tr>
---    <tr>
---      <td>HK</td><td>Hong Kong</td>
---    </tr>
---    <tr>
---      <td>HU</td><td>Hungary</td>
---    </tr>
---    <tr>
---      <td>IS</td><td>Iceland</td>
---    </tr>
---    <tr>
---      <td>IN</td><td>India</td>
---    </tr>
---    <tr>
---      <td>ID</td><td>Indonesia</td>
---    </tr>
---    <tr>
---      <td>IQ</td><td>Iraq</td>
---    </tr>
---    <tr>
---      <td>IE</td><td>Ireland</td>
---    </tr>
---    <tr>
---      <td>IM</td><td>Isle of Man</td>
---    </tr>
---    <tr>
---      <td>IL</td><td>Israel</td>
---    </tr>
---    <tr>
---      <td>IT</td><td>Italy</td>
---    </tr>
---    <tr>
---      <td>JM</td><td>Jamaica</td>
---    </tr>
---    <tr>
---      <td>JP</td><td>Japan</td>
---    </tr>
---    <tr>
---      <td>JE</td><td>Jersey</td>
---    </tr>
---    <tr>
---      <td>JO</td><td>Jordan</td>
---    </tr>
---    <tr>
---      <td>KZ</td><td>Kazakhstan</td>
---    </tr>
---    <tr>
---      <td>KE</td><td>Kenya</td>
---    </tr>
---    <tr>
---      <td>KI</td><td>Kiribati</td>
---    </tr>
---    <tr>
---      <td>KR</td><td>Korea</td>
---    </tr>
---    <tr>
---      <td>KW</td><td>Kuwait</td>
---    </tr>
---    <tr>
---      <td>KG</td><td>Kyrgyzstan</td>
---    </tr>
---    <tr>
---      <td>LA</td><td>Laos</td>
---    </tr>
---    <tr>
---      <td>LV</td><td>Latvia</td>
---    </tr>
---    <tr>
---      <td>LB</td><td>Lebanon</td>
---    </tr>
---    <tr>
---      <td>LS</td><td>Lesotho</td>
---    </tr>
---    <tr>
---      <td>LR</td><td>Liberia</td>
---    </tr>
---    <tr>
---      <td>LY</td><td>Libya</td>
---    </tr>
---    <tr>
---      <td>LI</td><td>Liechtenstein</td>
---    </tr>
---    <tr>
---      <td>LT</td><td>Lithuania</td>
---    </tr>
---    <tr>
---      <td>LU</td><td>Luxembourg</td>
---    </tr>
---    <tr>
---      <td>MO</td><td>Macao</td>
---    </tr>
---    <tr>
---      <td>MK</td><td>Macedonia</td>
---    </tr>
---    <tr>
---      <td>MG</td><td>Madagascar</td>
---    </tr>
---    <tr>
---      <td>MW</td><td>Malawi</td>
---    </tr>
---    <tr>
---      <td>MY</td><td>Malaysia</td>
---    </tr>
---    <tr>
---      <td>MV</td><td>Maldives</td>
---    </tr>
---    <tr>
---      <td>ML</td><td>Mali</td>
---    </tr>
---    <tr>
---      <td>MT</td><td>Malta</td>
---    </tr>
---    <tr>
---      <td>MH</td><td>Marshall Islands</td>
---    </tr>
---    <tr>
---      <td>MQ</td><td>Martinique</td>
---    </tr>
---    <tr>
---      <td>MR</td><td>Mauritania</td>
---    </tr>
---    <tr>
---      <td>MU</td><td>Mauritius</td>
---    </tr>
---    <tr>
---      <td>YT</td><td>Mayotte</td>
---    </tr>
---    <tr>
---      <td>MX</td><td>Mexico</td>
---    </tr>
---    <tr>
---      <td>FM</td><td>Micronesia</td>
---    </tr>
---    <tr>
---      <td>MD</td><td>Moldova</td>
---    </tr>
---    <tr>
---      <td>MC</td><td>Monaco</td>
---    </tr>
---    <tr>
---      <td>MN</td><td>Mongolia</td>
---    </tr>
---    <tr>
---      <td>ME</td><td>Montenegro</td>
---    </tr>
---    <tr>
---      <td>MS</td><td>Montserrat</td>
---    </tr>
---    <tr>
---      <td>MA</td><td>Morocco</td>
---    </tr>
---    <tr>
---      <td>MZ</td><td>Mozambique</td>
---    </tr>
---    <tr>
---      <td>MM</td><td>Myanmar</td>
---    </tr>
---    <tr>
---      <td>NA</td><td>Namibia</td>
---    </tr>
---    <tr>
---      <td>NR</td><td>Nauru</td>
---    </tr>
---    <tr>
---      <td>NP</td><td>Nepal</td>
---    </tr>
---    <tr>
---      <td>NL</td><td>Netherlands</td>
---    </tr>
---    <tr>
---      <td>AN</td><td>Netherlands Antilles</td>
---    </tr>
---    <tr>
---      <td>NC</td><td>New Caledonia</td>
---    </tr>
---    <tr>
---      <td>NZ</td><td>New Zealand</td>
---    </tr>
---    <tr>
---      <td>NI</td><td>Nicaragua</td>
---    </tr>
---    <tr>
---      <td>NE</td><td>Niger</td>
---    </tr>
---    <tr>
---      <td>NG</td><td>Nigeria</td>
---    </tr>
---    <tr>
---      <td>NU</td><td>Niue</td>
---    </tr>
---    <tr>
---      <td>NF</td><td>Norfolk Island</td>
---    </tr>
---    <tr>
---      <td>MP</td><td>Northern Mariana Islands</td>
---    </tr>
---    <tr>
---      <td>NO</td><td>Norway</td>
---    </tr>
---    <tr>
---      <td>OM</td><td>Oman</td>
---    </tr>
---  </tbody>
---</table>
---
---<table>
---  <thead>
---    <tr>
---      <th>Code</th>
---      <th>Country/Region</th>
---  </tr>
---  </thead>
---  <tbody>
---    <tr>
---      <td>PK</td><td>Pakistan</td>
---    </tr>
---    <tr>
---      <td>PW</td><td>Palau</td>
---    </tr>
---    <tr>
---      <td>PS</td><td>Palestine</td>
---    </tr>
---    <tr>
---      <td>PA</td><td>Panama</td>
---    </tr>
---    <tr>
---      <td>PG</td><td>Papua New Guinea</td>
---    </tr>
---    <tr>
---      <td>PY</td><td>Paraguay</td>
---    </tr>
---    <tr>
---      <td>PE</td><td>Peru</td>
---    </tr>
---    <tr>
---      <td>PH</td><td>Philippines</td>
---    </tr>
---    <tr>
---      <td>PN</td><td>Pitcairn Islands</td>
---    </tr>
---    <tr>
---      <td>PL</td><td>Poland</td>
---    </tr>
---    <tr>
---      <td>PT</td><td>Portugal</td>
---    </tr>
---    <tr>
---      <td>PR</td><td>Puerto Rico</td>
---    </tr>
---    <tr>
---      <td>QA</td><td>Qatar</td>
---    </tr>
---    <tr>
---      <td>RE</td><td>Reunion</td>
---    </tr>
---    <tr>
---      <td>RO</td><td>Romania</td>
---    </tr>
---    <tr>
---      <td>RU</td><td>Russian Federation</td>
---    </tr>
---    <tr>
---      <td>RW</td><td>Rwanda</td>
---    </tr>
---    <tr>
---      <td>BL</td><td>Saint Barthelemy</td>
---    </tr>
---    <tr>
---      <td>SH</td><td>Saint Helena, Ascension and Tristan da Cunha</td>
---    </tr>
---    <tr>
---      <td>KN</td><td>Saint Kitts and Nevis</td>
---    </tr>
---    <tr>
---      <td>LC</td><td>Saint Lucia</td>
---    </tr>
---    <tr>
---      <td>MF</td><td>Saint Martin</td>
---    </tr>
---    <tr>
---      <td>PM</td><td>Saint Pierre and Miquelon</td>
---    </tr>
---    <tr>
---      <td>VC</td><td>Saint Vincent and the Grenadines</td>
---    </tr>
---    <tr>
---      <td>WS</td><td>Samoa</td>
---    </tr>
---    <tr>
---      <td>SM</td><td>San Marino</td>
---    </tr>
---    <tr>
---      <td>ST</td><td>Sao Tome and Principe</td>
---    </tr>
---    <tr>
---      <td>SA</td><td>Saudi Arabia</td>
---    </tr>
---    <tr>
---      <td>SN</td><td>Senegal</td>
---    </tr>
---    <tr>
---      <td>RS</td><td>Serbia</td>
---    </tr>
---    <tr>
---      <td>SC</td><td>Seychelles</td>
---    </tr>
---    <tr>
---      <td>SL</td><td>Sierra Leone</td>
---    </tr>
---    <tr>
---      <td>SG</td><td>Singapore</td>
---    </tr>
---    <tr>
---      <td>SX</td><td>Sint Maarten</td>
---    </tr>
---    <tr>
---      <td>SK</td><td>Slovakia</td>
---    </tr>
---    <tr>
---      <td>SI</td><td>Slovenia</td>
---    </tr>
---    <tr>
---      <td>SB</td><td>Solomon Islands</td>
---    </tr>
---    <tr>
---      <td>SO</td><td>Somalia</td>
---    </tr>
---    <tr>
---      <td>ZA</td><td>South Africa</td>
---    </tr>
---    <tr>
---      <td>GS</td><td>South Georgia and the South Sandwich Islands</td>
---    </tr>
---    <tr>
---      <td>SS</td><td>South Sudan</td>
---    </tr>
---    <tr>
---      <td>ES</td><td>Spain</td>
---    </tr>
---    <tr>
---      <td>LK</td><td>Sri Lanka</td>
---    </tr>
---    <tr>
---      <td>SR</td><td>Suriname</td>
---    </tr>
---    <tr>
---      <td>SJ</td><td>Svalbard and Jan Mayen</td>
---    </tr>
---    <tr>
---      <td>SZ</td><td>Swaziland</td>
---    </tr>
---    <tr>
---      <td>SE</td><td>Sweden</td>
---    </tr>
---    <tr>
---      <td>CH</td><td>Switzerland</td>
---    </tr>
---    <tr>
---      <td>TW</td><td>Taiwan</td>
---    </tr>
---    <tr>
---      <td>TJ</td><td>Tajikistan</td>
---    </tr>
---    <tr>
---      <td>TZ</td><td>Tanzania</td>
---    </tr>
---    <tr>
---      <td>TH</td><td>Thailand</td>
---    </tr>
---    <tr>
---      <td>TL</td><td>Timor-leste</td>
---    </tr>
---    <tr>
---      <td>TG</td><td>Togo</td>
---    </tr>
---    <tr>
---      <td>TK</td><td>Tokelau</td>
---    </tr>
---    <tr>
---      <td>TO</td><td>Tonga</td>
---    </tr>
---    <tr>
---      <td>TT</td><td>Trinidad and Tobago</td>
---    </tr>
---    <tr>
---      <td>TN</td><td>Tunisia</td>
---    </tr>
---    <tr>
---      <td>TR</td><td>Turkey</td>
---    </tr>
---    <tr>
---      <td>TM</td><td>Turkmenistan</td>
---    </tr>
---    <tr>
---      <td>TC</td><td>Turks and Caicos Islands</td>
---    </tr>
---    <tr>
---      <td>TV</td><td>Tuvalu</td>
---    </tr>
---    <tr>
---      <td>UG</td><td>Uganda</td>
---    </tr>
---    <tr>
---      <td>UA</td><td>Ukraine</td>
---    </tr>
---    <tr>
---      <td>AE</td><td>United Arab Emirates</td>
---    </tr>
---    <tr>
---      <td>UM</td><td>United States Minor Outlying Islands</td>
---    </tr>
---    <tr>
---      <td>UY</td><td>Uruguay</td>
---    </tr>
---    <tr>
---      <td>UZ</td><td>Uzbekistan</td>
---    </tr>
---    <tr>
---      <td>VU</td><td>Vanuatu</td>
---    </tr>
---    <tr>
---      <td>VE</td><td>Venezuela</td>
---    </tr>
---    <tr>
---      <td>VN</td><td>Vietnam</td>
---    </tr>
---    <tr>
---      <td>VG</td><td>Virgin Islands (British)</td>
---    </tr>
---    <tr>
---      <td>VI</td><td>Virgin Islands (US)</td>
---    </tr>
---    <tr>
---      <td>WF</td><td>Wallis and Futuna</td>
---    </tr>
---    <tr>
---      <td>EH</td><td>Western Sahara</td>
---    </tr>
---    <tr>
---      <td>YE</td><td>Yemen</td>
---    </tr>
---    <tr>
---      <td>ZM</td><td>Zambia</td>
---    </tr>
---    <tr>
---      <td>ZW</td><td>Zimbabwe</td>
---    </tr>
---    <tr>
---      <td>CU</td><td>Cuba</td>
---    </tr>
---    <tr>
---      <td>IR</td><td>Iran</td>
---    </tr>
---    <tr>
---      <td>SY</td><td>Syria</td>
---    </tr>
---    <tr>
---      <td>KP</td><td>North Korea</td>
---    </tr>
---  </tbody>
---</table>
---
---See also:
---
---- `PolicyService/GetPolicyInfoForPlayerAsync`, returns policy information
---  about a player which is based on geolocation, age group and platform
---
LocalizationService.GetCountryRegionForPlayerAsync = function(self, player) end;
---@return void
LocalizationService.PromptExportToCSVs = function(self) end;
---@param instance Instance
---@return Array
---Returns an `Array`, where each element of the returned `Array` is itself
---an `Array` of entries in the same format as described in
---`LocalizationTable/GetEntries`. The order of the elements in the returned
---`Array` is the same order that the `LocalizationTable|LocalizationTables`
---will be searched through to attempt autotranslation for the provided
---`Instance|Instance`. The entry elements within a particular
---`LocalizationTable` are returned in an unspecified order.
---
---This function returns entries regardless of whether the object is a
---`GuiBase2d` with `GuiBase2d/AutoLocalize` enabled. An object that is a
---`GuiBase2d` will not actually be autotranslated unless
---`GuiBase2d/AutoLocalize` is enabled.
---
---The ordering of the tables is as follows:
---
---- First, it looks for the earliest `GuiBase2d` ancestor of the object
---  (including the provided object) that has a
---  `GuiBase2d/RootLocalizationTable`. Tables then append in the same order
---  as described in `GuiBase2d/RootLocalizationTable` by going up through
---  the `LocalizationTable` ancestors of that
---  `GuiBase2d/RootLocalizationTable`. If no such
---  `GuiBase2d/RootLocalizationTable` is found, no tables append in this
---  step. If `instance` is `nil`, no tables append in this step.
---- Next, tables from the `LocalizationTable` hierarchy under
---  `LocalizationService` append. For each child `LocalizationTable` of
---  `LocalizationService`, it appends tables going up from the lowest
---  descendant `LocalizationTable` of the tables parented to the service,
---  all the way up to the children of the service. If there are no children
---  of `LocalizationService` that are
---  `LocalizationTable|LocalizationTables`, then no tables append in this
---  step.
---- Finally, the cloud `LocalizationTable` appends to the array. If there is
---  no cloud `LocalizationTable`, or the cloud `LocalizationTable` has not
---  yet loaded, then no table appends in this step.
---
---This function does not yield. It will not wait until the cloud
---`LocalizationTable` has loaded.
---
LocalizationService.GetTableEntries = function(self, instance) end;
---@param table Instance
---@return void
LocalizationService.PromptDownloadGameTableToCSV = function(self, table) end;
---@param locale string
---@return Instance
---This function takes a locale code as an argument and yields until the
---cloud `LocalizationTable` for that locale has been loaded, if available.
---It then returns a `Translator` object which can be used to perform
---translations for that locale if any are available. The entries used for
---localization are the entries provided by the `LocalizationTable` hierarchy
---under `LocalizationService` as well as the cloud table (if available).
---This will be the same set of entries returned by
---`LocalizationService/GetTableEntries(nil)`.
---
---This function can error and thus should be wrapped in a `pcall()`.
---
---See also:
---
---- `LocalizationService/GetTranslatorForPlayer` gets the translator
---  corresponding to the locale of the provided player. This function is
---  deprecated and should not be used in new work.
---- `LocalizationService/GetTranslatorForPlayerAsync` yields until the cloud
---  `LocalizationTable` for the locale of the provided player has loaded and
---  then gets the translator corresponding to the locale of the provided
---  player.
---
LocalizationService.GetTranslatorForLocaleAsync = function(self, locale) end;
---@return void
LocalizationService.StartTextScraper = function(self) end;
---@param locale string
---@return void
LocalizationService.SetRobloxLocaleId = function(self, locale) end;
---@class RBXScriptSignal.AutoTranslateWillRun : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.AutoTranslateWillRun, callback: fun()): RBXScriptConnection
---
LocalizationService.AutoTranslateWillRun = nil;
---@class LocalizationTable : Instance
---@field public DevelopmentLanguage string
---@field public Root Instance
---@field public SourceLocaleId string
---A LocalizationTable is a database of translations. It contains source strings
---and translations for various languages. It is used with the `Translator` and
---`LocalizationService` auto-translator system to control text translations in
---the game. LocalizationTables are designed to be treated as resources, like a
---texture or a script. They are not optimized to be modified at runtime.
---Changing the contents of a table will cause the entire contents of the table
---to be replicated to all players.
---
---## LocalizationTable Entries
---
---Each LocalizationTable contains a set of entries. Each entry contains the
---translations of the text, along with some special fields:
---
---- **Key** is an optional unique key for fast hash lookups in code. If it is
---  non-empty it must be unique in the table.
---- **Source** is the orignal text in the source language that will be used by
---  the `LocalizationService` automatic text replacement system to match GUI
---  text and render a translation instead. The Source field can be filled by the
---  text capture tools, or can be set manually. For key-based lookups the Source
---  value can be used as a translation for `LocalizationTable/SourceLocaleId` if
---  the entry doesn't have a translation for that locale. If Source is empty
---  then the entry will not be used by the automatic replacement system.
---- **Context** is the full Instance name for the object that the text appeared
---  on. Context is used for disambiguation by the automatic text replacement
---  system. When multiple matches for the Source are found, the system will pick
---  the best match by matching backwards from the end of the Context string.
---  There are other more robust ways to handle disambiguation available as well,
---  like using multiple tables with `GuiBase2d/RootLocalizationTable`.
---- **Example** is whatever you want it to be. If the text capture tool guessed
---  some parameters for a string the Example field will contain an example of
---  them used in context.
---
---All of these fields are optional, but at least either Key or Source must be
---non-empty. No two entries can have the same Key, Source, and Context.
---
---The **Source** field and all translation strings must be valid
---<a href="https://developer.roblox.com/articles/Format-Strings">LocalizationService
---format strings</a>.
---
local LocalizationTable;
---The default IETF tag to use if the ''languageKey'' parameter is excluded
---from the `LocalizationTable/GetString` method.
---
LocalizationTable.DevelopmentLanguage = nil;
---The object that is being targeted for localization by this table.
---Localization is applied to it and all of it's descendants.
---
LocalizationTable.Root = nil;
---The Roblox locale of the input key strings for this table, for example
---“en-us” or “es-es.” This is typically the "development language" of the
---game. For a Translator that merges multiple LocalizationTable objects,
---it's the LocaleId of the Default LocalizationTable. Defaults to "en-us".
---
LocalizationTable.SourceLocaleId = nil;
---@param key string
---@param source string
---@param context string
---@param example string
---@return void
---Sets the **Example** field of a LocalizationTable entry to `example`,
---using the specified `key`, `source`, and `context` to narrow down the
---entry that will have this change applied.
---
LocalizationTable.SetEntryExample = function(self, key, source, context, example) end;
---@param localeId string
---@return void
---Removes all translations from the LocalizationTable with the specified
---localeId.
---
LocalizationTable.RemoveTargetLocale = function(self, localeId) end;
---@param contents string
---@return void
---The SetContents function sets the contents of the LocalizationTable, via
---the legacy JSON format.
---
LocalizationTable.SetContents = function(self, contents) end;
---@param localeId string
---@return Instance
---Returns a `Translator` for entries in this LocalizationTable, in the
---specified language. The translator will first search in this table and
---then look in ancestor tables.
---
LocalizationTable.GetTranslator = function(self, localeId) end;
---@param key string
---@param source string
---@param context string
---@param newKey string
---@return void
---Sets the **Key** field of a LocalizationTable entry to `newKey`, using the
---specified `key`, `source`, and `context` to narrow down the entry that
---will have this change applied.
---
LocalizationTable.SetEntryKey = function(self, key, source, context, newKey) end;
---@param entries Variant
---@return void
---Sets the contents of the LocalizationTable.
---
---The entries parameter should be an array of dictionaries in the same
---format as the one returned from the `LocalizationTable/GetEntries`
---function.
---
LocalizationTable.SetEntries = function(self, entries) end;
---@param key string
---@param source string
---@param context string
---@return void
---Removes an entry from the LocalizationTable, using the specified `key`,
---`source`, and `context` to narrow down the specific entry to be removed.
---
LocalizationTable.RemoveEntry = function(self, key, source, context) end;
---@param key string
---@param source string
---@param context string
---@param newSource string
---@return void
---Sets the **Source** field of a LocalizationTable entry to `newSource`,
---using the specified `key`, `source`, and `context` to narrow down the
---entry that will have this change applied.
---
LocalizationTable.SetEntrySource = function(self, key, source, context, newSource) end;
---@param key string
---@param targetLocaleId string
---@param text string
---@return void
LocalizationTable.SetEntry = function(self, key, targetLocaleId, text) end;
---@return string
LocalizationTable.GetContents = function(self) end;
---@param key string
---@param source string
---@param context string
---@param localeId string
---@param text string
---@return void
---Sets the text of the specified localeId in a LocalizationTable entry,
---using the specified `key`, `source`, and `context` to narrow down the
---entry that will have this change applied.
---
LocalizationTable.SetEntryValue = function(self, key, source, context, localeId, text) end;
---@param key string
---@param source string
---@param context string
---@param localeId string
---@return void
---Removes a single language translation from the LocalizationTable, using
---the provided `key`, `source`, `context`, and `localeId` to narrow down the
---specific entry to be removed.
---
LocalizationTable.RemoveEntryValue = function(self, key, source, context, localeId) end;
---@return Array
---The GetEntries function returns an array of dictionaries contained in a
---given `LocalizationTable`, where each dictionary represents an entry of
---localization data.
---
---To set the entries of a LocalizationTable, you can use
---`LocalizationTable/SetEntries`.
---
---Each dictionary in the array contains the following fields:
---
---<table>
---    <thead>
---        <tr>
---            <th>Index</th>
---            <th>Type</th>
---            <th>Description</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td>
---                <b>Key</b>
---            </td>
---            <td><a href="/reference/engine/libraries/string">string</a></td>
---            <td>A lookup key for this specific entry in the LocalizationTable.</td>
---        </tr>
---        <tr>
---            <td>
---                <b>Source</b>
---            </td>
---            <td><a href="/reference/engine/libraries/string">string</a></td>
---            <td>The string used to format the localized string. Used as a lookup if a\_Key\_is not provided.</td>
---        </tr>
---        <tr>
---            <td>
---                <b>Context</b>
---            </td>
---            <td><a href="/reference/engine/libraries/string">string</a></td>
---            <td>An `Instance/GetFullName` path to the object that was used to generate the LocalizationTable. Used as a lookup if a\_Key\_is not provided.</td>
---        </tr>
---        <tr>
---            <td>
---                <b>Example</b>
---            </td>
---            <td><a href="/reference/engine/libraries/string">string</a></td>
---            <td>The string used to format the localization. Optional.</td>
---        </tr>
---        <tr>
---            <td>
---                <b>Values</b>
---            </td>
---            <td><a href="/reference/engine/libraries/string">string</a></td>
---            <td>A dictionary of language translations for this localization entry. The keys of this dictionary are locale ids, and the values are strings that are used to apply localization for the language corresponding to the locale id.</td>
---        </tr>
---    </tbody>
---</table>
---
LocalizationTable.GetEntries = function(self) end;
---@param key string
---@param source string
---@param context string
---@param newContext string
---@return void
---Sets the **Context** field of a LocalizationTable entry to `newContext`,
---using the specified `key`, `source`, and `context` to narrow down the
---entry that will have this change applied.
---
LocalizationTable.SetEntryContext = function(self, key, source, context, newContext) end;
---@param value bool
---@return void
LocalizationTable.SetIsExemptFromUGCAnalytics = function(self, value) end;
---@param key string
---@return void
---Deprecated in favor of `LocalizationTable/RemoveEntry`. Calling RemoveKey
---is the same as making the following call to RemoveEntry:
---
---```lua
---LocalizationTable:RemoveEntry(key,"","")
---```
---
LocalizationTable.RemoveKey = function(self, key) end;
---@param targetLocaleId string
---@param key string
---@return string
---The GetString function returns a translation based on the specified
---language and key.
---
LocalizationTable.GetString = function(self, targetLocaleId, key) end;
---@class LodDataEntity : Instance
---@field public EntityLodEnabled bool
local LodDataEntity;
---
LodDataEntity.EntityLodEnabled = nil;
---@class LodDataService : Instance
local LodDataService;
---@class LogService : Instance
---@field public HttpResultOut RBXScriptSignal.HttpResultOut
---@field public MessageOut RBXScriptSignal.MessageOut
---@field public OnHttpResultApproved RBXScriptSignal.OnHttpResultApproved
---@field public ServerHttpResultOut RBXScriptSignal.ServerHttpResultOut
---@field public ServerMessageOut RBXScriptSignal.ServerMessageOut
---**Unreliable Behavior** This may have changing, unexpected or unreliable
---behavior depending on how the game engine logs things. It should not be relied
---upon for any important game logic.
---
---A service that allows you to read outputted text.
---
local LogService;
---@return void
LogService.RequestHttpResultApproved = function(self) end;
---@param source string
---@return void
LogService.ExecuteScript = function(self, source) end;
---@return void
LogService.RequestServerHttpResult = function(self) end;
---@return Array
LogService.GetHttpResultHistory = function(self) end;
---@return Array
---**Unreliable Behavior** This may have changing, unexpected or unreliable
---behavior depending on how the game engine logs things. It should not be
---relied upon for any important game logic.
---
---Returns a table of tables, each with the message string, message type, and
---timestamp of a message that the client displays in the output window.
---
---See also:
---
---- `LogService/MessageOut` - An event that fires when text is added to the
---  output from the client
---
LogService.GetLogHistory = function(self) end;
---@return void
LogService.RequestServerOutput = function(self) end;
---@class RBXScriptSignal.HttpResultOut : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.HttpResultOut, callback: fun(httpResult: Dictionary)): RBXScriptConnection
---
LogService.HttpResultOut = nil;
---@class RBXScriptSignal.MessageOut : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.MessageOut, callback: fun(message: string, messageType: MessageType)): RBXScriptConnection
---Fires when the client outputs text.
---
LogService.MessageOut = nil;
---@class RBXScriptSignal.OnHttpResultApproved : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnHttpResultApproved, callback: fun(isApproved: bool)): RBXScriptConnection
---
LogService.OnHttpResultApproved = nil;
---@class RBXScriptSignal.ServerHttpResultOut : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ServerHttpResultOut, callback: fun(httpResult: Dictionary)): RBXScriptConnection
---
LogService.ServerHttpResultOut = nil;
---@class RBXScriptSignal.ServerMessageOut : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ServerMessageOut, callback: fun(message: string, messageType: MessageType, timestamp: double)): RBXScriptConnection
---
LogService.ServerMessageOut = nil;
---@class LoginService : Instance
---@field public LoginFailed RBXScriptSignal.LoginFailed
---@field public LoginSucceeded RBXScriptSignal.LoginSucceeded
---An unfinished service which apparently would have allowed a user to login from
---within a place.
---
local LoginService;
---@return void
LoginService.PromptLogin = function(self) end;
---@return void
LoginService.Logout = function(self) end;
---@class RBXScriptSignal.LoginFailed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.LoginFailed, callback: fun(loginError: string)): RBXScriptConnection
---
LoginService.LoginFailed = nil;
---@class RBXScriptSignal.LoginSucceeded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.LoginSucceeded, callback: fun(username: string)): RBXScriptConnection
---
LoginService.LoginSucceeded = nil;
---@class LuaSettings : Instance
---The LuaSettings allows you to change certain properties, in regards to how
---Roblox handles Lua. It is labeled as **Lua** in the Roblox Studio Settings
---menu.
---
local LuaSettings;
---@class LuaSourceContainer : Instance
---@field public CurrentEditor Instance
---The base class for all objects which contain Lua code. `Script`,
---`LocalScript`, `ModuleScript` and `CoreScript` all inherit from
---LuaSourceContainer.
---
local LuaSourceContainer;
---The `Player` who is currently editing this script. This property is only
---used when in [Team Create](/studio/team-create) mode.
---
LuaSourceContainer.CurrentEditor = nil;
---@class LuaWebService : Instance
---An internal service, which is responsible for retrieving HTTP data from
---websites. Used by a range of services, including `MarketplaceService`,
---`InsertService` and `HttpService`. Its functions cannot be accessed by
---developers.
---
local LuaWebService;
---@class LuauScriptAnalyzerService : Instance
local LuauScriptAnalyzerService;
---@class ManualGlue : ManualSurfaceJointInstance, JointInstance, Instance
---**ManualGlue** is a joint created in a similar manner to the `ManualWeld`
---class. It functions identically to the `Glue` class.
---
local ManualGlue;
---@class ManualSurfaceJointInstance : JointInstance, Instance
---The ManualSurfaceJointInstance is the base class for `ManualGlue`. This
---instance (when created) also used to cause the server to crash, however this
---behaviour has since been fixed.
---
local ManualSurfaceJointInstance;
---@class ManualWeld : ManualSurfaceJointInstance, JointInstance, Instance
---An object that holds two parts together. It is commonly created when the _Join
---Always_ setting in Studio is turned on.
---
---Functions identically to `Weld`.
---
---See also `WeldConstraint` for a newer alternative using the
---[constraints](/building-and-visuals/physics/mechanical-constraints) system
---that does not require `JointInstance/C0|C0` or `JointInstance/C1|C1`
---properties to be manually set.
---
---## Root part
---
---Every Assembly has a root part, see `BasePart/GetRootPart`. When a
---ManualWeld's `JointInstance/C0|C0`/`JointInstance/C1|C1` is modified the root
---part will stay where it was.
---
---## Directionality
---
---ManualWelds do not have any directionality. `JointInstance/Part0|Part0` or
---`JointInstance/Part1|Part1`, doesn't matter. You can imagine rigid joints
---forming a tree branching down from the root part. All the parts down the tree
---from root will move, and their welded “children” in this tree will move with
---them.
---
local ManualWeld;
---@class MarkerCurve : Instance
---@field public Length int
---The MarkerCurve instance lets you place markers as string values at certain
---times on a timeline. The string at each marker cannot exceed 64 characters and
---must only contain printable characters.
---
local MarkerCurve;
---Returns the number of markers in the MarkerCurve.
---
MarkerCurve.Length = nil;
---@param time float
---@param marker string
---@return Array
---Inserts a marker with the provided string value at the provided time. The
---provided string cannot exceed 64 characters and must only contain
---printable characters.
---
MarkerCurve.InsertMarkerAtTime = function(self, time, marker) end;
---@return Array
---Returns the time and string value of all markers in the MarkerCurve.
---
MarkerCurve.GetMarkers = function(self) end;
---@param startingIndex int
---@param count int
---@return int
---Remove several markers in the MarkerCurve starting at the provided index.
---
MarkerCurve.RemoveMarkerAtIndex = function(self, startingIndex, count) end;
---@param index int
---@return Dictionary
---Returns the time and string value of the marker at the provided index.
---
MarkerCurve.GetMarkerAtIndex = function(self, index) end;
---@class MarketplaceService : Instance
---@field public ClientLuaDialogRequested RBXScriptSignal.ClientLuaDialogRequested
---@field public ClientPurchaseSuccess RBXScriptSignal.ClientPurchaseSuccess
---@field public NativePurchaseFinished RBXScriptSignal.NativePurchaseFinished
---@field public PromptBundlePurchaseFinished RBXScriptSignal.PromptBundlePurchaseFinished
---@field public PromptBundlePurchaseRequested RBXScriptSignal.PromptBundlePurchaseRequested
---@field public PromptGamePassPurchaseFinished RBXScriptSignal.PromptGamePassPurchaseFinished
---@field public PromptGamePassPurchaseRequested RBXScriptSignal.PromptGamePassPurchaseRequested
---@field public PromptPremiumPurchaseFinished RBXScriptSignal.PromptPremiumPurchaseFinished
---@field public PromptPremiumPurchaseRequested RBXScriptSignal.PromptPremiumPurchaseRequested
---@field public PromptProductPurchaseFinished RBXScriptSignal.PromptProductPurchaseFinished
---@field public PromptProductPurchaseRequested RBXScriptSignal.PromptProductPurchaseRequested
---@field public PromptPurchaseFinished RBXScriptSignal.PromptPurchaseFinished
---@field public PromptPurchaseRequested RBXScriptSignal.PromptPurchaseRequested
---@field public PromptRobloxPurchaseRequested RBXScriptSignal.PromptRobloxPurchaseRequested
---@field public PromptSubscriptionCancellationFinished RBXScriptSignal.PromptSubscriptionCancellationFinished
---@field public PromptSubscriptionCancellationRequested RBXScriptSignal.PromptSubscriptionCancellationRequested
---@field public PromptSubscriptionPurchaseFinished RBXScriptSignal.PromptSubscriptionPurchaseFinished
---@field public PromptSubscriptionPurchaseRequested RBXScriptSignal.PromptSubscriptionPurchaseRequested
---@field public ServerPurchaseVerification RBXScriptSignal.ServerPurchaseVerification
---@field public ThirdPartyPurchaseFinished RBXScriptSignal.ThirdPartyPurchaseFinished
---MarketplaceService is the game service that is responsible for in-game
---transactions.
---
---The most notable functions are
---`MarketplaceService/PromptProductPurchase|PromptProductPurchase` and
---`MarketplaceService/PromptPurchase|PromptPurchase`, as well as the callback
---`MarketplaceService/ProcessReceipt|ProcessReceipt` which must be well defined
---so that transactions do not fail.
---
---MarketplaceService also has functions that fetch information about developer
---products (`MarketplaceService/GetProductInfo|GetProductInfo` and
---`MarketplaceService/GetDeveloperProductsAsync|GetDeveloperProductsAsync`),
---game passes
---(`MarketplaceService/UserOwnsGamePassAsync|UserOwnsGamePassAsync`), and other
---assets (`MarketplaceService/PlayerOwnsAsset|PlayerOwnsAsset`).
---
---## Monetization
---
---Learning to use MarketplaceService is the first step towards learning to
---monetize a game on Roblox. Another important game service regarding
---monetization is `DataStoreService` which is responsible for saving and loading
---data like that of purchases.
---
---See also:
---
---- [Monetization Guides][1], learning materials related to monetizing your game
---
---[promptproductpurchase]: /assets/blt3f7406054de2eebc/PromptProductPurchase.png
---[1]: /learn-roblox/monetization
---
local MarketplaceService;
---@param value bool
---@return void
MarketplaceService.SignalServerLuaDialogClosed = function(self, value) end;
---@param player Instance
---@param assetId int64
---@param equipIfPurchased bool
---@param currencyType CurrencyType
---@return void
---PromptPurchase is used to prompt a player to purchase an item with the
---given `assetId`. Below is a screenshot of the purchase dialogue that
---appears when this function is called.
---
---![The purchase dialogue triggered by PromptPurchase][1]
---
---The above dialogue was triggered using the following:
---
---```lua
---game:GetService("MarketplaceService"):PromptPurchase(game.Players.LocalPlayer, 4367427794)
---```
---
---For game passes, use `MarketplaceService/PromptGamePassPurchase`.
---
---[1]: /assets/blta4a37bbddfe4e644/PurchasePrompt.png
---
MarketplaceService.PromptPurchase = function(self, player, assetId, equipIfPurchased, currencyType) end;
---@param userId int64
---@param gamePassId int64
---@return bool
---UserOwnsGamePassAsync returns true if the `Player` with the given
---`Player/UserId|UserId` owns the game pass with the given **game pass ID**
---(not to be confused with asset ID).
---
---#### Caching Behavior
---
---Results of this function are remembered so that repeated calls will return
---quicker. This function will always return true if the player owns the game
---pass upon first entering a server after having purchased the game pass. If
---the game pass is purchased in-game (through
---`MarketplaceService/PromptGamePassPurchase|PromptGamePassPurchase`), this
---function may return false due to the caching behavior. Conversely, should
---the player delete the game pass from their inventory, this function may
---return true despite the player not owning the game pass.
---
---#### History
---
---Previously, querying player ownership of game passes required the use of
---the now-deprecated `GamePassService/PlayerHasPass` function. This was
---changed in April 2018 when
---[game passes received their own ID system](https://devforum.roblox.com/t/live-changes-to-game-passes/116918).
---
---On [Release 350](/resources/release-note/Release-Note-for-350) (August
---2018), this function was changed so that the result is cached. Previously,
---it made a request every time it was called.
---
MarketplaceService.UserOwnsGamePassAsync = function(self, userId, gamePassId) end;
---@param player Instance
---@param bundleId int64
---@return void
---Used to prompt a user to purchase a bundle with the given bundleId
---
MarketplaceService.PromptBundlePurchase = function(self, player, bundleId) end;
---@param player Instance
---@param assetType AssetType
---@return void
MarketplaceService.SignalAssetTypePurchased = function(self, player, assetType) end;
---@param player Instance
---@param assetId int64
---@return bool
---Returns whether the inventory of given `Player` contains an asset, given
---the ID. This method can query for hats, models, sounds, etc. This function
---takes a small amount of time to send a request the Roblox website.
---
---In the case that a query fails, this function will throw an error.
---Therefore, it is recommended to wrap calls to this function in `pcall`.
---
---- This method should not be used for **game passes**, since they use a
---  separate ID system. Legacy game passes that still depend on an asset ID
---  should use `GamePassService/PlayerHasPass` instead of this method.
---- This method cannot be used to check for **developer products** since
---  they can be purchased multiple times but not owned themselves. Use a
---  `GlobalDataStore` to save when a developer has bought a developer
---  product instead.
---
MarketplaceService.PlayerOwnsAsset = function(self, player, assetId) end;
---@return Instance
---Returns a `Pages` object which contains information for all of the current
---game's developer products.
---
MarketplaceService.GetDeveloperProductsAsync = function(self) end;
---@param assetId int64
---@param equipIfPurchased bool
---@return void
MarketplaceService.PromptRobloxPurchase = function(self, assetId, equipIfPurchased) end;
---@param userId int64
---@param productId int64
---@param success bool
---@return void
MarketplaceService.SignalPromptProductPurchaseFinished = function(self, userId, productId, success) end;
---@param infoType InfoType
---@param productId int64
---@param expectedPrice int
---@param requestId string
---@param isRobloxPurchase bool
---@return Dictionary
MarketplaceService.PerformPurchase = function(self, infoType, productId, expectedPrice, requestId, isRobloxPurchase) end;
---@param player Instance
---@param gamePassId int64
---@return void
---Used to prompt a user to purchase a game pass with the given assetId.
---
MarketplaceService.PromptGamePassPurchase = function(self, player, gamePassId) end;
---@param ticket string
---@param playerId int64
---@param productId int64
---@return void
MarketplaceService.SignalClientPurchaseSuccess = function(self, ticket, playerId, productId) end;
---@param player Instance
---@param subscriptionId int64
---@return void
MarketplaceService.PromptSubscriptionCancellation = function(self, player, subscriptionId) end;
---@param player Instance
---@param subscriptionId int64
---@return bool
MarketplaceService.IsPlayerSubscribed = function(self, player, subscriptionId) end;
---@param player Instance
---@param assetId int64
---@param success bool
---@return void
MarketplaceService.SignalPromptPurchaseFinished = function(self, player, assetId, success) end;
---@param assetId int64
---@param infoType InfoType
---@return Dictionary
---This function provides information about an asset, developer product or
---game pass given its **assetId** and the `Enum/InfoType` (Asset, Product or
---GamePass respectively).
---
---Information about the queried item is provided in a dictionary with the
---following keys. Note that not all information is provided or necessarily
---relevant for the kind of object you are querying.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Description</th>
---		</tr>
---	</thead>
---	<tr>
---	  <td><code>Name</code></td>
---	  <td>string</td>
---	  <td>The name shown on the asset's page</td>
---  </tr>
---	<tr>
---	  <td><code>Description</code></td>
---	  <td>string</td>
---	  <td>The description as shown on the asset's page; can be nil if blank</td>
---  </tr>
---	<tr>
---	  <td><code>PriceInRobux</code></td>
---	  <td>number</td>
---	  <td>The cost of purchasing the asset using Robux</td>
---  </tr>
---	<tr>
---	  <td><code>Created</code></td>
---	  <td>timestamp<a href="#timestamp"></a></td>
---	  <td>Timestamp of when the asset was created, e.g. <code>2018-08-01T17:55:11.98Z</code><a href="#timestamp"></a></td>
---  </tr>
---	<tr>
---	  <td><code>Updated</code></td>
---	  <td>timestamp<a href="#timestamp"></a></td>
---	  <td>Timestamp of when the asset was last updated by its creator, e.g. <code>2018-08-01T17:55:11.98Z</code></td>
---  </tr>
---	<tr>
---	  <td><code>ContentRatingTypeId</code></td>
---	  <td>number</td>
---	  <td>Indicates whether the item is marked as 13+ in catalog</td>
---  </tr>
---	<tr>
---	  <td><code>MinimumMembershipLevel</code></td>
---	  <td>number</td>
---	  <td>The minimum subscription level necessary to purchase the item</td>
---  </tr>
---	<tr>
---	  <td><code>IsPublicDomain</code></td>
---	  <td>boolean</td>
---	  <td>Describes whether the asset can be taken for free</td>
---  </tr>
---	<tr>
---    <th><b>Creator Information</b></th>
---  </tr>
---	<tr>
---	  <td><code>Creator</code></td>
---	  <td>Dictionary</td>
---	  <td>A table of information describing the creator of the asset (see following lines)</td>
---  </tr>
---	<tr>
---	  <td><code>Creator.CreatorType</code></td>
---	  <td>string</td>
---	  <td>Either <code>User</code> or <code>Group</code></td>
---  </tr>
---	<tr>
---	  <td><code>Creator.CreatorTargetId</code></td>
---	  <td>number</td>
---	  <td>The ID of the creator user or group</td>
---  </tr>
---	<tr>
---	  <td><code>Creator.Name</code></td>
---	  <td>string</td>
---	  <td>The name/username of the creator</td>
---  </tr>
---	<tr>
---	  <td><code>Creator.Id</code></td>
---	  <td>number</td>
---	  <td>(Use CreatorTargetId instead)</td>
---  </tr>
---	<tr>
---    <th><b>Assets</b></th>
---  </tr>
---	<tr>
---	  <td><code>AssetId</code></td>
---	  <td>number</td>
---	  <td>If InfoType was Asset, this is the ID of the given asset.</td>
---  </tr>
---	<tr>
---	  <td><code>AssetTypeId</code></td>
---	  <td>number</td>
---	  <td>The type of asset (e.g. place, model, shirt)<a href="#assetTypes">*</a></td>
---  </tr>
---	<tr>
---	  <td><code>IsForSale</code></td>
---	  <td>boolean</td>
---	  <td>Describes whether the asset is purchasable</td>
---  </tr>
---	<tr>
---	  <td><code>IsLimited</code></td>
---	  <td>boolean</td>
---	  <td>Describes whether the asset is a "limited item" that is no longer (if ever) sold</td>
---  </tr>
---	<tr>
---	  <td><code>IsLimitedUnique</code></td>
---	  <td>boolean</td>
---	  <td>Describes whether the asset is a "limited unique" ("Limited U") item that only has a fixed number sold</td>
---  </tr>
---	<tr>
---	  <td><code>IsNew</code></td>
---	  <td>boolean</td>
---	  <td>Describes whether the asset is marked as "new" in the catalog</td>
---  </tr>
---	<tr>
---	  <td><code>Remaining</code></td>
---	  <td>number</td>
---	  <td>The remaining number of items a limited unique item may be sold</td>
---  </tr>
---	<tr>
---	  <td><code>Sales</code></td>
---	  <td>number</td>
---	  <td>The number of items the asset has been sold</td>
---  </tr>
---  <tr>
---	  <td><code>SaleAvailabilityLocations</code></td>
---	  <td>Dictionary</td>
---	  <td>The item's <code>Enum/ProductLocationRestriction|ProductLocationRestriction</code> or sale location setting (e.g. anywhere, Shop only).</td>
---  </tr>
---  <tr>
---	  <td><code>CanBeSoldInThisGame</code></td>
---	  <td>boolean</td>
---	  <td>Describes whether the asset is purchasable in the current experience.</td>
---  </tr>
---	<tr>
---    <th><b>Developer Products and Game Passes</b></th>
---  </tr>
---	<tr>
---	  <td><code>ProductId</code></td>
---	  <td>number</td>
---	  <td>If the InfoType was Product, this is the product ID</td>
---  </tr>
---	<tr>
---	  <td><code>IconImageAssetId</code></td>
---	  <td>number</td>
---	  <td>This is the asset ID of the product/pass icon, or 0 if there isn't one</td>
---  </tr>
---</table>
---
---\* See `enum/AssetType` for the asset type ID numbers. †Timestamps are
---formatted using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
---
---#### Possible Errors
---
---If no such item exists with the given ID, this function will throw an
---error:
---
---- For developer products, the error is:
---
---> MarketplaceService:getProductInfo() failed because rawProductInfo was
---> empty
---
---- For game passes and assets, the error is:
---
---> MarketplaceService:getProductInfo() failed because HTTP 0 (HTTP 400
---> (HTTP/1.1 400 BadRequest))
---
---See also:
---
---- [Monetization Guides][1], learning materials related to monetizing your
---  game
---
---[1]: /learn-roblox/monetization
---
MarketplaceService.GetProductInfo = function(self, assetId, infoType) end;
---@param player Instance
---@param productId string
---@return void
MarketplaceService.PromptNativePurchase = function(self, player, productId) end;
---@return int
MarketplaceService.GetRobuxBalance = function(self) end;
---@return void
MarketplaceService.SignalMockPurchasePremium = function(self) end;
---@param player Instance
---@param subscriptionId int64
---@param wasCanceled bool
---@return void
MarketplaceService.SignalPromptSubscriptionCancellationFinished = function(self, player, subscriptionId, wasCanceled) end;
---@param player Instance
---@param subscriptionId int64
---@param wasPurchased bool
---@return void
MarketplaceService.SignalPromptSubscriptionPurchaseFinished = function(self, player, subscriptionId, wasPurchased) end;
---@param player Instance
---@param productId string
---@return void
---Prompts a third-party purchase.
---
MarketplaceService.PromptThirdPartyPurchase = function(self, player, productId) end;
---@param player Instance
---@return void
---Used to prompt a user to purchase Premium. If the user is already premium,
---the user will receive an error message “You are already subscribed to
---Roblox Premium! Please try again.”
---
---<img src="/assets/blt621af438e478bb7a/Premium-Modal-Example.jpg" />
---            
---To learn more about and incorporating Premium into your game, and monetizing your game with the Premium Payout system, take a look at [this][2] article.
---
---See also:
---
---- `MarketplaceService/PromptPremiumPurchaseFinished`, fires when the
---  Premium purchase UI closes
---- `Players/PlayerMembershipChanged`, fires when the game server recognizes
---  that a player's membership has changed
---
---[2]: /production/monetization/premium-payouts
---
MarketplaceService.PromptPremiumPurchase = function(self, player) end;
---@param didTryPurchasing bool
---@return void
MarketplaceService.SignalPromptPremiumPurchaseFinished = function(self, didTryPurchasing) end;
---@param assetId string
---@param robuxAmount int
---@return void
MarketplaceService.ReportAssetSale = function(self, assetId, robuxAmount) end;
---@param player Instance
---@param productId int64
---@param equipIfPurchased bool
---@param currencyType CurrencyType
---@return void
---Used to prompt a user to purchase a product with the given product id.
---
MarketplaceService.PromptProductPurchase = function(self, player, productId, equipIfPurchased, currencyType) end;
---@param player Instance
---@param gamePassId int64
---@param success bool
---@return void
MarketplaceService.SignalPromptGamePassPurchaseFinished = function(self, player, gamePassId, success) end;
---@param player Instance
---@param bundleId int64
---@param success bool
---@return void
MarketplaceService.SignalPromptBundlePurchaseFinished = function(self, player, bundleId, success) end;
---@param player Instance
---@return bool
MarketplaceService.PlayerCanMakePurchases = function(self, player) end;
---@return void
MarketplaceService.ReportRobuxUpsellStarted = function(self) end;
---@param player Instance
---@param subscriptionId int64
---@return void
MarketplaceService.PromptSubscriptionPurchase = function(self, player, subscriptionId) end;
---@class RBXScriptSignal.ClientLuaDialogRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ClientLuaDialogRequested, callback: fun(arguments: Tuple)): RBXScriptConnection
---
MarketplaceService.ClientLuaDialogRequested = nil;
---@class RBXScriptSignal.ClientPurchaseSuccess : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ClientPurchaseSuccess, callback: fun(ticket: string, playerId: int64, productId: int64)): RBXScriptConnection
---
MarketplaceService.ClientPurchaseSuccess = nil;
---@class RBXScriptSignal.NativePurchaseFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.NativePurchaseFinished, callback: fun(player: Instance, productId: string, wasPurchased: bool)): RBXScriptConnection
---
MarketplaceService.NativePurchaseFinished = nil;
---@class RBXScriptSignal.PromptBundlePurchaseFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptBundlePurchaseFinished, callback: fun(player: Instance, bundleId: int64, wasPurchased: bool)): RBXScriptConnection
---
MarketplaceService.PromptBundlePurchaseFinished = nil;
---@class RBXScriptSignal.PromptBundlePurchaseRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptBundlePurchaseRequested, callback: fun(player: Instance, bundleId: int64)): RBXScriptConnection
---
MarketplaceService.PromptBundlePurchaseRequested = nil;
---@class RBXScriptSignal.PromptGamePassPurchaseFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptGamePassPurchaseFinished, callback: fun(player: Instance, gamePassId: int64, wasPurchased: bool)): RBXScriptConnection
---This event fires when a purchase dialogue of a game pass is closed. This
---fires right as the dialogue closes when the player presses "Cancel" at the
---prompt, or "OK" at the success/error message.
---
---- For **developer product** purchase prompts, connect to
---  `MarketplaceService/PromptProductPurchaseFinished`. In order to process
---  such purchases you need to set the
---  `MarketplaceService/ProcessReceipt|ProcessReceipt` callback in a single
---  script.
---- For **affiliate gear sales** or other assets, use  
---  `MarketplaceService/PromptPurchaseFinished`."
---
MarketplaceService.PromptGamePassPurchaseFinished = nil;
---@class RBXScriptSignal.PromptGamePassPurchaseRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptGamePassPurchaseRequested, callback: fun(player: Instance, gamePassId: int64)): RBXScriptConnection
---
MarketplaceService.PromptGamePassPurchaseRequested = nil;
---@class RBXScriptSignal.PromptPremiumPurchaseFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptPremiumPurchaseFinished, callback: fun()): RBXScriptConnection
---This event fires when the Premium purchase modal closes, specifically when
---the player presses "Cancel" at the prompt, "OK" at the error message, or
---after the payment UI closes.
---
---To learn more about and incorporating Premium into your game, and
---monetizing your game with the Premium Payouts system, take a look at
---[this][1] article.
---
---See also:
---
---- `MarketplaceService/PromptPremiumPurchase`, used to prompt a user to
---  purchase Premium
---- `Players/PlayerMembershipChanged`, fires when the game server recognizes
---  that a player's membership has changed
---
---[1]: /production/monetization/premium-payouts
---
MarketplaceService.PromptPremiumPurchaseFinished = nil;
---@class RBXScriptSignal.PromptPremiumPurchaseRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptPremiumPurchaseRequested, callback: fun(player: Instance)): RBXScriptConnection
---
MarketplaceService.PromptPremiumPurchaseRequested = nil;
---@class RBXScriptSignal.PromptProductPurchaseFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptProductPurchaseFinished, callback: fun(userId: int64, productId: int64, isPurchased: bool)): RBXScriptConnection
---This event fires when a purchase dialogue of a developer product is
---closed. This fires right as the dialogue closes when the player presses
---"Cancel" at the prompt, or "OK" at the success/error message. **Do not use
---this event to process developer product purchases!** For this, you must
---set the `MarketplaceService/ProcessReceipt|ProcessReceipt` callback once.
---
---- For **game passes**, use
---  `MarketplaceService/PromptGamePassPurchaseFinished`.
---- For **affiliate gear sales** or other assets, use
---  `MarketplaceService/PromptPurchaseFinished`.
---
---Unlike the similarly-named events above, this event fires with a
---`Player/UserId` and not a reference to the `Player` object. Despite this
---event's deprecation, it is currently the only way to detect when a
---developer product's purchase dialog is closed.
---
---#### Example
---
---Below is a screenshot of a game pass purchase prompt. The function in the
---code sample runs immediately after the player presses "Cancel" or after
---the player buys the developer product then presses "OK". Should there be
---an issue with the purchase, the event also fires.
---
---![A developer product purchase prompt][1]
---
---```lua
---local MarketplaceService = game:GetService("MarketplaceService")
---
---MarketplaceService.PromptProductPurchaseFinished:Connect(function (...)
---	-- Print all the details of the prompt, for example:
---	-- PromptProductPurchaseFinished 269323 327064551 true
---	print("PromptProductPurchaseFinished", ...)
---end)
---```
---
---[1]: /assets/blt3f7406054de2eebc/PromptProductPurchase.png
---
MarketplaceService.PromptProductPurchaseFinished = nil;
---@class RBXScriptSignal.PromptProductPurchaseRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptProductPurchaseRequested, callback: fun(player: Instance, productId: int64, equipIfPurchased: bool, currencyType: CurrencyType)): RBXScriptConnection
---
MarketplaceService.PromptProductPurchaseRequested = nil;
---@class RBXScriptSignal.PromptPurchaseFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptPurchaseFinished, callback: fun(player: Instance, assetId: int64, isPurchased: bool)): RBXScriptConnection
---For new game passes using a _Game Pass ID_, use
---`MarketplaceService/PromptGamePassPurchaseFinished`
---
---PromptPurchaseFinished fires when a purchase dialogue of an affiliate gear
---sale or other asset is closed. This fires right as the dialogue closes
---when the player presses "Cancel" at the prompt, or "OK" at the
---success/error message.
---
---- For **game passes**, use
---  `MarketplaceService/PromptGamePassPurchaseFinished`.
---- For **developer product** purchase prompts, connect to
---  `MarketplaceService/PromptProductPurchaseFinished`. In order to process
---  such purchases you need to set the
---  `MarketplaceService/ProcessReceipt|ProcessReceipt` callback in a single
---  script.
---
---#### Example
---
---Below is a screenshot of an affiliate gear sale prompt. The function in
---the code sample runs immediately after the player presses "Cancel" or
---after the user buys the item then presses "OK". Should there be an issue
---with the purchase, the event also fires.
---![A product purchase prompt for an affiliate gear sale][1]
---
---```lua
---local MarketplaceService = game:GetService("MarketplaceService")
---
---MarketplaceService.PromptPurchaseFinished:connect(function (...)
---	-- Print all the details of the prompt, for example:
---	-- PromptPurchaseFinished PlayerName 11377306 true
---	print("PromptPurchaseFinished", ...)
---end)
---```
---
---[1]: /assets/blt881d0a28aa9fcf42/PromptProductPurchase-confirm.png
---
MarketplaceService.PromptPurchaseFinished = nil;
---@class RBXScriptSignal.PromptPurchaseRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptPurchaseRequested, callback: fun(player: Instance, assetId: int64, equipIfPurchased: bool, currencyType: CurrencyType)): RBXScriptConnection
---
MarketplaceService.PromptPurchaseRequested = nil;
---@class RBXScriptSignal.PromptRobloxPurchaseRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptRobloxPurchaseRequested, callback: fun(assetId: int64, equipIfPurchased: bool)): RBXScriptConnection
---
MarketplaceService.PromptRobloxPurchaseRequested = nil;
---@class RBXScriptSignal.PromptSubscriptionCancellationFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptSubscriptionCancellationFinished, callback: fun(player: Instance, subscriptionId: int64, wasCanceled: bool)): RBXScriptConnection
---
MarketplaceService.PromptSubscriptionCancellationFinished = nil;
---@class RBXScriptSignal.PromptSubscriptionCancellationRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptSubscriptionCancellationRequested, callback: fun(player: Instance, subscriptionId: int64)): RBXScriptConnection
---
MarketplaceService.PromptSubscriptionCancellationRequested = nil;
---@class RBXScriptSignal.PromptSubscriptionPurchaseFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptSubscriptionPurchaseFinished, callback: fun(player: Instance, subscriptionId: int64, wasPurchased: bool)): RBXScriptConnection
---
MarketplaceService.PromptSubscriptionPurchaseFinished = nil;
---@class RBXScriptSignal.PromptSubscriptionPurchaseRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptSubscriptionPurchaseRequested, callback: fun(player: Instance, subscriptionId: int64)): RBXScriptConnection
---
MarketplaceService.PromptSubscriptionPurchaseRequested = nil;
---@class RBXScriptSignal.ServerPurchaseVerification : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ServerPurchaseVerification, callback: fun(serverResponseTable: Dictionary)): RBXScriptConnection
---
MarketplaceService.ServerPurchaseVerification = nil;
---@class RBXScriptSignal.ThirdPartyPurchaseFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ThirdPartyPurchaseFinished, callback: fun(player: Instance, productId: string, receipt: string, wasPurchased: bool)): RBXScriptConnection
---Fires when a third-party purchase has been completed.
---
MarketplaceService.ThirdPartyPurchaseFinished = nil;
---@class MaterialService : Instance
---@field public AsphaltName string
---@field public BasaltName string
---@field public Brick MaterialVariant
---@field public BrickName string
---@field public Cobblestone MaterialVariant
---@field public CobblestoneName string
---@field public Concrete MaterialVariant
---@field public ConcreteName string
---@field public CorrodedMetal MaterialVariant
---@field public CorrodedMetalName string
---@field public CrackedLavaName string
---@field public DiamondPlate MaterialVariant
---@field public DiamondPlateName string
---@field public Fabric MaterialVariant
---@field public FabricName string
---@field public Foil MaterialVariant
---@field public FoilName string
---@field public GlacierName string
---@field public Granite MaterialVariant
---@field public GraniteName string
---@field public Grass MaterialVariant
---@field public GrassName string
---@field public GroundName string
---@field public Ice MaterialVariant
---@field public IceName string
---@field public LeafyGrassName string
---@field public LimestoneName string
---@field public Marble MaterialVariant
---@field public MarbleName string
---@field public Metal MaterialVariant
---@field public MetalName string
---@field public MudName string
---@field public PavementName string
---@field public Pebble MaterialVariant
---@field public PebbleName string
---@field public Plastic MaterialVariant
---@field public PlasticName string
---@field public RockName string
---@field public SaltName string
---@field public Sand MaterialVariant
---@field public SandName string
---@field public SandstoneName string
---@field public Slate MaterialVariant
---@field public SlateName string
---@field public SmoothPlastic MaterialVariant
---@field public SmoothPlasticName string
---@field public SnowName string
---@field public TerrainAsphalt MaterialVariant
---@field public TerrainBasalt MaterialVariant
---@field public TerrainBrick MaterialVariant
---@field public TerrainCobblestone MaterialVariant
---@field public TerrainConcrete MaterialVariant
---@field public TerrainCrackedLava MaterialVariant
---@field public TerrainGlacier MaterialVariant
---@field public TerrainGrass MaterialVariant
---@field public TerrainGround MaterialVariant
---@field public TerrainIce MaterialVariant
---@field public TerrainLeafyGrass MaterialVariant
---@field public TerrainLimestone MaterialVariant
---@field public TerrainMud MaterialVariant
---@field public TerrainPavement MaterialVariant
---@field public TerrainRock MaterialVariant
---@field public TerrainSalt MaterialVariant
---@field public TerrainSand MaterialVariant
---@field public TerrainSandstone MaterialVariant
---@field public TerrainSlate MaterialVariant
---@field public TerrainSnow MaterialVariant
---@field public TerrainWoodPlanks MaterialVariant
---@field public Use2022Materials bool
---@field public Wood MaterialVariant
---@field public WoodName string
---@field public WoodPlanks MaterialVariant
---@field public WoodPlanksName string
---@field public hasPropertyWarningInStudio bool
---@field public OverrideStatusChanged RBXScriptSignal.OverrideStatusChanged
---MaterialService is the game service responsible for managing materials. It is
---the contrainer for global MaterialVariants. `MaterialVariant|MaterialVariant`
---can be child or descendant of MaterialService. For each base Material type,
---MaterialService internally keeps a set of MaterialVariant references.
---`MaterialVariant/MaterialVariant|MaterialVariant.Name` is the key to access
---it. The `MaterialVariant/Name|MaterialVariant.Name` and
---`MaterialVariant/BaseMateria|MaterialVariant.BaseMateria` are combined to work
---as an identifier. If more than one MaterialVariant object has the same name
---and BaseMaterial under MaterialService, only one of them can be used.
---
---MaterialService has some (Material)Name properties. Assigning a
---MaterialVariant Name replaces the built-in material with the specified
---MaterialVariant. If the MaterialService can't find a matching MaterialVariant,
---it falls back to built-in material. Note BaseMaterial should also match, for
---example, a MaterialVariant with BaseMaterial Grass can only be assigned to
---MaterialService.GrassName, not AsphaltName or any other names. These
---properties are not scriptable but can read and write using
---`MaterialService/GetBaseMaterialOverride` and
---`MaterialService/SetBaseMaterialOverride` function.
---
---MaterialService has a `MaterialService/Use2022Materials` property that
---switches between legacy materials and new materials introduced in year 2022.
---Because legacy and new/ugc terrain materials use different encoding, using
---legacy terrain materials and MaterialVariant at the same time has performance
---penalty. So if the game is using pre 2022 terrain materials, avoid overriding
---any built-in materials. Migrate to 2022 materials if possible.
---
local MaterialService;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Asphalt. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Asphalt.
---
MaterialService.AsphaltName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Basalt. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Basalt.
---
MaterialService.BasaltName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/BrickName` instead.
---
MaterialService.Brick = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Brick.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Brick.
---
MaterialService.BrickName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/CobblestoneName` instead.
---
MaterialService.Cobblestone = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Cobblestone. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Cobblestone.
---
MaterialService.CobblestoneName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/ConcreteName` instead.
---
MaterialService.Concrete = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Concrete. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Concrete.
---
MaterialService.ConcreteName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/CorrodedMetalName` instead.
---
MaterialService.CorrodedMetal = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---CorrodedMetal. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to CorrodedMetal.
---
MaterialService.CorrodedMetalName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---CrackedLava. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to CrackedLava.
---
MaterialService.CrackedLavaName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/DiamondPlateName` instead.
---
MaterialService.DiamondPlate = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---DiamondPlate. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to DiamondPlate.
---
MaterialService.DiamondPlateName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/FabricName` instead.
---
MaterialService.Fabric = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Fabric. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Fabric.
---
MaterialService.FabricName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/FoilName` instead.
---
MaterialService.Foil = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Foil.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Foil.
---
MaterialService.FoilName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Glacier. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Glacier.
---
MaterialService.GlacierName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/GraniteName` instead.
---
MaterialService.Granite = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Granite. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Granite.
---
MaterialService.GraniteName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/GrassName` instead.
---
MaterialService.Grass = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Grass.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Grass.
---
MaterialService.GrassName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Ground. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Ground.
---
MaterialService.GroundName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/IceName` instead.
---
MaterialService.Ice = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Ice.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Ice.
---
MaterialService.IceName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---LeafyGrass. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to LeafyGrass.
---
MaterialService.LeafyGrassName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Limestone. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Limestone.
---
MaterialService.LimestoneName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/MarbleName` instead.
---
MaterialService.Marble = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Marble. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Marble.
---
MaterialService.MarbleName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/MetalName` instead.
---
MaterialService.Metal = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Metal.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Metal.
---
MaterialService.MetalName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Mud.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Mud.
---
MaterialService.MudName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Pavement. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Pavement.
---
MaterialService.PavementName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/PebbleName` instead.
---
MaterialService.Pebble = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Pebble. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Pebble.
---
MaterialService.PebbleName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/PlasticName` instead.
---
MaterialService.Plastic = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Plastic. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Plastic.
---
MaterialService.PlasticName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Rock.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Rock.
---
MaterialService.RockName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Salt.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Salt.
---
MaterialService.SaltName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/SandName` instead.
---
MaterialService.Sand = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Sand.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Sand.
---
MaterialService.SandName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---Sandstone. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to Sandstone.
---
MaterialService.SandstoneName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/SlateName` instead.
---
MaterialService.Slate = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Slate.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Slate.
---
MaterialService.SlateName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/SmoothPlasticName` instead.
---
MaterialService.SmoothPlastic = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---SmoothPlastic. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to SmoothPlastic.
---
MaterialService.SmoothPlasticName = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Snow.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Snow.
---
MaterialService.SnowName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/AsphaltName` instead.
---
MaterialService.TerrainAsphalt = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/BasaltName` instead.
---
MaterialService.TerrainBasalt = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/BrickName` instead.
---
MaterialService.TerrainBrick = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/CobblestoneName` instead.
---
MaterialService.TerrainCobblestone = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/ConcreteName` instead.
---
MaterialService.TerrainConcrete = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/CrackedLavaName` instead.
---
MaterialService.TerrainCrackedLava = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/GlacierName` instead.
---
MaterialService.TerrainGlacier = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/GrassName` instead.
---
MaterialService.TerrainGrass = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/GroundName` instead.
---
MaterialService.TerrainGround = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/IceName` instead.
---
MaterialService.TerrainIce = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/LeafyGrassName` instead.
---
MaterialService.TerrainLeafyGrass = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/LimestoneName` instead.
---
MaterialService.TerrainLimestone = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/MudName` instead.
---
MaterialService.TerrainMud = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/PavementName` instead.
---
MaterialService.TerrainPavement = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/RockName` instead.
---
MaterialService.TerrainRock = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/SaltName` instead.
---
MaterialService.TerrainSalt = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/SandName` instead.
---
MaterialService.TerrainSand = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/SandstoneName` instead.
---
MaterialService.TerrainSandstone = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/SlateName` instead.
---
MaterialService.TerrainSlate = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/SnowName` instead.
---
MaterialService.TerrainSnow = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/WoodPlanksName` instead.
---
MaterialService.TerrainWoodPlanks = nil;
---When it's false, built-in materials use the material pack before 2022.
---When it's true, built-in materials use the material pack released in 2022.
---
MaterialService.Use2022Materials = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/WoodName` instead.
---
MaterialService.Wood = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in Wood.
---The Specified MaterialVariant must have `MaterialVariant/BaseMaterial` set
---to Wood.
---
MaterialService.WoodName = nil;
---Added in early beta stage. Now it is deprecated. Has no effect. Do not
---use. Please use `MaterialService/WoodPlanksName` instead.
---
MaterialService.WoodPlanks = nil;
---Specify `MaterialVariant|MaterialVariant` name to override built-in
---WoodPlanks. The Specified MaterialVariant must have
---`MaterialVariant/BaseMaterial` set to WoodPlanks.
---
MaterialService.WoodPlanksName = nil;
---Internal property that helps show warning icons in studio.
---
MaterialService.hasPropertyWarningInStudio = nil;
---@param material Material
---@return void
---Added in early beta stage. Now it is deprecated. Do not use. Please use
---`MaterialService/SetBaseMaterialOverride` instead.
---
MaterialService.ClearOverrideTerrainMaterial = function(self, material) end;
---@param material Material
---@return string
---Get the override `MaterialVariant|MaterialVariant` name of specified
---Material type.
---
MaterialService.GetBaseMaterialOverride = function(self, material) end;
---@param material Material
---@return PropertyStatus
MaterialService.GetOverrideStatus = function(self, material) end;
---@param material Material
---@return RBXScriptSignal
MaterialService.GetMaterialOverrideChanged = function(self, material) end;
---@param materialVariant MaterialVariant
---@return void
---Added in early beta stage. Now it is deprecated. Do not use. Please use
---`MaterialService/SetBaseMaterialOverride` instead.
---
MaterialService.SetOverrideTerrainMaterial = function(self, materialVariant) end;
---@param material Material
---@return void
---Added in early beta stage. Now it is deprecated. Do not use. Please use
---`MaterialService/SetBaseMaterialOverride` instead.
---
MaterialService.ClearOverridePartMaterial = function(self, material) end;
---@param material Material
---@return MaterialVariant
---Added in early beta stage. Now it is deprecated. Do not use. Please use
---`MaterialService/GetBaseMaterialOverride` instead.
---
MaterialService.GetOverrideTerrainMaterial = function(self, material) end;
---@param material Material
---@param name string
---@return MaterialVariant
---Get the effective MaterialVariant reference given a MaterialVariant name
---and BaseMaterial. This MaterialVariant must be a descendant of
---MaterialService. Returns nil if no matching instance exists.
---
MaterialService.GetMaterialVariant = function(self, material, name) end;
---@param materialVariant MaterialVariant
---@return void
---Added in early beta stage. Now it is deprecated. Do not use. Please use
---`MaterialService/SetBaseMaterialOverride` instead.
---
MaterialService.SetOverridePartMaterial = function(self, materialVariant) end;
---@param material Material
---@param name string
---@return void
---Set a `MaterialVariant|MaterialVariant` name that overrides a built-in
---material.
---
MaterialService.SetBaseMaterialOverride = function(self, material, name) end;
---@param material Material
---@return MaterialVariant
---Added in early beta stage. Now it is deprecated. Do not use. Please use
---`MaterialService/GetBaseMaterialOverride` instead.
---
MaterialService.GetOverridePartMaterial = function(self, material) end;
---@class RBXScriptSignal.OverrideStatusChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OverrideStatusChanged, callback: fun(material: Material)): RBXScriptConnection
---
MaterialService.OverrideStatusChanged = nil;
---@class MaterialVariant : Instance
---@field public BaseMaterial Material
---@field public ColorMap Content
---@field public MaterialPattern MaterialPattern
---@field public MetalnessMap Content
---@field public NormalMap Content
---@field public RoughnessMap Content
---@field public StudsPerTile float
---Using MaterialVariant objects can expand the variety of materials in an
---experience. MaterialVariant has properties that can define the appearance of a
---material. Its name can be set in MaterialService to globally override a
---built-in material, or set in
---`BasePart/MaterialVariant|BasePart.MaterialVariant` property to change certain
---Parts. Now it only work as a descendant of MaterialService.
---
local MaterialVariant;
---Category Material this variant belongs to.
---
MaterialVariant.BaseMaterial = nil;
---This property determines the color of the surface. This texture is
---sometimes called the albedo texture. The alpha channel is not used.
---
MaterialVariant.ColorMap = nil;
---Determines texture tiling method.
---
MaterialVariant.MaterialPattern = nil;
---This property determines which parts of the surface are metal and are
---non-metal. A metalness map is a grayscale image where black pixels
---correspond to non-metals and white pixels correspond to metals.
---
---Metals only reflect light the same color as the metal, and they reflect
---much more light than non-metals. Most materials in the real world can be
---categorized either metals or non-metals. For this reason, most pixels in a
---metalness map will be either pure black or pure white. Values in between
---are typically used to simulate dirt or grunge on top of an underlying
---metal area.
---
---Here's an example of a piece of metal with a layer of paint on top. Most
---paints are non-metallic, so the metalness map is black everywhere except
---on unpainted metal parts and spots where the paint has chipped away and
---the underlying metal is visible.
---
---![Metalness jetpack][1]
---
---![Map explanation][2]
---
---When `Lighting/EnvironmentSpecularScale` is 0, metalness has no effect.
---For the most realistic reflections, setting EnvironmentSpecularScale and
---`Lighting/EnvironmentDiffuseScale` to 1, and `Lighting/Ambient` and
---`Lighting/OutdoorAmbient` to (0,0,0) is recommended.
---
---[1]: /assets/blt0a658c7367d5cdab/jetpack.gif
---[2]: /assets/blt96558be20f7b7a1a/metalness-explained.png
---
MaterialVariant.MetalnessMap = nil;
---This property modifies the lighting of the surface by adding bumps, dents,
---cracks, and curves without adding more polygons.
---
---Normal maps are RGB images that modify the surface's normal vector used
---for lighting calculations. The R, G, and B channels of the NormalMap
---correspond to the X, Y, and Z components of the local surface vector
---respectively, and byte values of 0 and 255 for each channel correspond
---linearly to normal vector components of -1 and 1.016 respectively. This
---range is stretched slightly from -1 to 1 so that a byte value of 127 maps
---to exactly 0. The normal vector's Z axis is always defined as the
---direction of the underlying mesh's normal. A uniform (127,127,255) image
---translates to a completely flat normal map where the normal is everywhere
---perpendicular to the mesh surface. This format is called “tangent space”
---normal maps. Roblox does not support world space or object space normal
---maps.
---
---Incorrectly flipped normal components can make bumps appear like indents.
---If you import a normal map and notice the lighting looks off, you may need
---to invert the G channel of the image. The X and Y axes of the tangent
---space frame correspond to the X and Y directions in the image after it's
---transformed by the mesh UVs. If you view your normal map in an image
---editor as if it were displayed on a surface, normals pointing towards the
---right side of the screen should appear more red, and normals pointing
---towards the top side of your screen should appear more green.
---
---![Bread normal map][1]
---
---The terms “DirectX format” and “OpenGL format” are sometimes used to
---describe whether the G channel of the normal map is inverted or not.
---Roblox expects the OpenGL format.
---
---Roblox expects imported meshes to include tangents. Modeling software may
---also refer to this as “tangent space” information. If you apply a normal
---map and it does not seem to make any visual difference, you may need to
---re-export your mesh along with its tangent information from modeling
---software.
---
---[1]: /assets/blt013e67a5f211cd0d/bread-nmap.png
---
MaterialVariant.NormalMap = nil;
---This property determines the apparent roughness across the surface. A
---roughness map is a grayscale image where black pixels correspond to a
---maximally smooth surface, and white pixels correspond to a maximally rough
---surface.
---
---Roughness refers to how much variation the surface has on a very small
---scale. Reflections on smooth surfaces are sharp and concentrated.
---Reflections on rough surfaces are more blurry and dispersed.
---
MaterialVariant.RoughnessMap = nil;
---Determines the scale of textures. Larger values for this property will
---lead to the textures appearing larger, and repeating less frequently.
---
MaterialVariant.StudsPerTile = nil;
---@class MemStorageConnection : Instance
local MemStorageConnection;
---@return void
MemStorageConnection.Disconnect = function(self) end;
---@class MemStorageService : Instance
local MemStorageService;
---@param key string
---@param value string
---@return void
MemStorageService.SetItem = function(self, key, value) end;
---@param key string
---@param value string
---@return void
MemStorageService.Fire = function(self, key, value) end;
---@param key string
---@param input Variant
---@return Variant
MemStorageService.Call = function(self, key, input) end;
---@param key string
---@return bool
MemStorageService.RemoveItem = function(self, key) end;
---@param key string
---@return bool
MemStorageService.HasItem = function(self, key) end;
---@param key string
---@param callback Function
---@return MemStorageConnection
MemStorageService.Bind = function(self, key, callback) end;
---@param key string
---@param defaultValue string
---@return string
MemStorageService.GetItem = function(self, key, defaultValue) end;
---@param key string
---@param callback Function
---@return MemStorageConnection
MemStorageService.BindAndFire = function(self, key, callback) end;
---@class MemoryStoreQueue : Instance
---Provides access to a queue within MemoryStore. A queue is a data structure
---that provides temporary storage for arbitrary items (up to the maximum item
---size -- see
---[`MemoryStore Limits`](https://developer.roblox.com/articles/memory-store).
---Each queue item has a numeric priority: MemoryStore retrieves items with
---higher priority from the queue first, and it retrieves Items with the same
---priority in order of addition.
---
---Items in the queue can optionally be set to expire after a certain amount of
---time. Expired items simply disappear from the queue as if they were never
---added.
---
local MemoryStoreQueue;
---@param count int
---@param allOrNothing bool
---@param waitTimeout double
---@return Tuple
---Reads one or more items from the queue as a single atomic operation.
---
---This method does not automatically delete the returned items from the
---queue but makes them invisible to other ReadAsync calls for the period of
---the invisibility timeout. The items must be explicitly removed from the
---queue with `MemoryStoreQueue/RemoveAsync` before the invisibility timeout
---expires. The invisibility timeout defaults to 30 seconds unless a
---different value was provided in `MemoryStoreService/GetQueue`.
---
MemoryStoreQueue.ReadAsync = function(self, count, allOrNothing, waitTimeout) end;
---@param id string
---@return void
---Removes an item or items previously read from the queue. This method uses
---the identifier returned by `MemoryStoreQueue/ReadAsync` to identify the
---items to remove. If called after the invisibility timeout has expired, the
---call has no effect.
---
MemoryStoreQueue.RemoveAsync = function(self, id) end;
---@param value Variant
---@param expiration int64
---@param priority double
---@return void
---Adds an item to the queue.
---
MemoryStoreQueue.AddAsync = function(self, value, expiration, priority) end;
---@class MemoryStoreService : Instance
---A top-level singleton class which exposes methods to access specific
---primitives within the MemoryStoreService. Use it for any data that rapidly
---changes that other servers can restore, such as global leaderboards,
---matchmaking queues, and auction houses.
---
---For a more in-depth look, see [Memory Stores](/scripting/data/memory-stores).
---
local MemoryStoreService;
---@param name string
---@param invisibilityTimeout int
---@return MemoryStoreQueue
---Returns a `MemoryStoreQueue` instance for the provided name. The name is
---global within the game, thus any place that uses the same name will access
---the same queue.
---
MemoryStoreService.GetQueue = function(self, name, invisibilityTimeout) end;
---@param name string
---@return MemoryStoreSortedMap
---Returns a `MemoryStoreSortedMap` instance for the provided name. The name
---is global within the game, so any place that uses the same name will
---access the same sorted map.
---
MemoryStoreService.GetSortedMap = function(self, name) end;
---@class MemoryStoreSortedMap : Instance
---Provides access to a sorted map within MemoryStore. A sorted map is a
---collection of items where string keys are associated with arbitrary values (up
---to the maximum allowed size -- see
---[Memory Stores](/scripting/data/memory-stores). The keys are arranged in
---alphabetical order.
---
local MemoryStoreSortedMap;
---@param key string
---@return void
---Removes the provided key from the sorted map.
---
MemoryStoreSortedMap.RemoveAsync = function(self, key) end;
---@param key string
---@return Variant
---Retrieves the value of a key in the sorted map.
---
MemoryStoreSortedMap.GetAsync = function(self, key) end;
---@param key string
---@param value Variant
---@param expiration int64
---@return bool
---Sets the value of the key overwriting any existing key value.
---
MemoryStoreSortedMap.SetAsync = function(self, key, value, expiration) end;
---@param direction SortDirection
---@param count int
---@param exclusiveLowerBound string
---@param exclusiveUpperBound string
---@return Array
---Gets items within a sorted range of keys.
---
MemoryStoreSortedMap.GetRangeAsync = function(self, direction, count, exclusiveLowerBound, exclusiveUpperBound) end;
---@param key string
---@param transformFunction Function
---@param expiration int64
---@return Variant
---Retrieves the value of a key from a sorted map and lets you update it to a
---new value via a callback function.
---
---This method accepts a callback function that transforms the old value into
---the updated value as required. The method retrieves the existing key value
---and passes it to the transform function which returns the new value for
---the item, with these exceptions:
---
---- If the key does not exist, the old value passed to the function will be
---  nil.
---- If the function returns nil, the update is canceled.
---
---The new value is saved only if the key was not updated (e.g. by a
---different game server) since the moment it was read. If the value did
---change, the transform function is invoked again with the most recent item
---value. This cycle repeats until the value is saved successfully or the
---transform function returns nil to abort the operation.
---
MemoryStoreSortedMap.UpdateAsync = function(self, key, transformFunction, expiration) end;
---@class MeshContentProvider : CacheableContentProvider, Instance
---A service that is internally responsible for fetching, parsing, and caching
---meshes.
---
local MeshContentProvider;
---@return Dictionary
MeshContentProvider.GetContentMemoryData = function(self) end;
---@class MeshPart : TriangleMeshPart, BasePart, PVInstance, Instance
---@field public DoubleSided bool
---@field public HasJointOffset bool
---@field public HasSkinnedMesh bool
---@field public JointOffset Vector3
---@field public MeshID Content
---@field public MeshId Content
---@field public MeshSize Vector3
---@field public RenderFidelity RenderFidelity
---@field public TextureID Content
---MeshParts are a form of `BasePart` that includes a physically simulated custom
---mesh. Unlike with other mesh classes, such as `SpecialMesh` and `BlockMesh`,
---they are not parented to a `BasePart` but rather behave as a `BasePart` in
---their own right.
---
---## How do I use MeshParts
---
---The mesh and texture of a MeshPart are determined by the `MeshPart/MeshId` and
---`MeshPart/TextureID` properties. For more information, see
---[Meshes](/building-and-visuals/modeling/meshes).
---
---## SpecialMesh or MeshPart?
---
---There are currently two ways of using a developer created mesh. They are using
---a `SpecialMesh` with the `SpecialMesh/FileType` set to 'FileMesh', or by using
---a MeshPart. Although, on the whole, the MeshPart object has superseded the
---SpecialMesh there are some differences developers should be aware of.
---
---- `BasePart/Material` displays correctly on the mesh when using a MeshPart and
---  not when using a `SpecialMesh`
---- MeshParts include the `MeshPart/CollisionFidelity` property, meaning the
---  collision model of a MeshPart can be set to resemble the geometry of the
---  mesh. The `SpecialMesh` object by contrast, uses the parent `BasePart`s
---  collision model
---- The mesh of a MeshPart scales on all axis depending on the `BasePart/Size`
---  property of the MeshPart, the mesh of a `SpecialMesh` does not
---- The `SpecialMesh` object includes the `DataModelMesh/Offset` and
---  `DataModelMesh/Scale` properties whereas MeshParts do not
---- The `DataModelMesh/MeshId` property of a `SpecialMesh` can be changed by a
---  `Script` or `LocalScript` during runtime. The `MeshPart/MeshId` property of
---  a MeshPart can not
---
---In most, but not all cases, using a MeshPart is more suitable. As MeshParts
---are a relatively new feature however, developers should expect some of the
---above behaviour to change.
---
---[1]: https://developer.roblox.com/articles/Mesh-Parts
---
local MeshPart;
---This property determines whether to render both faces or polygons in the
---mesh. It is only changeable in Studio. This is useful for meshes that are
---typically modeled as cards such as a leaf, hair and cloth.
---
---Example: _The tree leaves are modeled with single sided cards._
---![Leaves as cards][1]
---
---_With MeshPart.DoubleSided disabled some leaves are missing since they are
---back facing the camera._ ![DoubleSided property disabled][2]
---
---_With MeshPart.DoubleSided enabled, both faces of the leaves are
---rendered._ ![DoubleSided property enabled][3]
---
---[1]: /assets/blt32ec4b040982f44d/MeshPartsAsCards.png
---[2]: /assets/blt1955400aa4d9d8d9/DoubleSidedOff.png
---[3]: /assets/blte8ab39d69cf97247/DoubleSidedOn.png
---
MeshPart.DoubleSided = nil;
---
MeshPart.HasJointOffset = nil;
---
MeshPart.HasSkinnedMesh = nil;
---
MeshPart.JointOffset = nil;
---The **MeshId** is the content ID of the mesh that is to be displayed on
---the `MeshPart`.
---
---Note that this property currently cannot be changed by scripts as the
---collision model of the mesh cannot be recomputed during runtime.
---Developers should not rely on this behavior as it may change in the
---future. Those looking for a custom mesh object that can be updated during
---runtime should use `SpecialMesh`.
---
MeshPart.MeshID = nil;
---The **MeshId** is the content ID of the mesh that is to be displayed on
---the `MeshPart`.
---
---Note that this property currently cannot be changed by scripts as the
---collision model of the mesh cannot be recomputed during runtime.
---Developers should not rely on this behavior as it may change in the
---future. Those looking for a custom mesh object that can be updated during
---runtime should use `SpecialMesh`.
---
MeshPart.MeshId = nil;
---
MeshPart.MeshSize = nil;
---This property determines the level of detail that solid-modeled and mesh
---parts will be shown in and can be set to the possible values of the
---`Enum/RenderFidelity` enum.
---
---By default, solid-modeled and mesh parts will always be shown in precise
---fidelity, no matter how far they are from the game camera. This improves
---their appearance when viewed from any distance, but if a place has a large
---number of detailed solid-modeled or mesh parts, it may reduce overall game
---performance.
---
---<table>
---    <thead>
---        <tr>
---            <th>Distance From Camera</th>
---            <th>Render Fidelity</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td>Less than 250 studs</td>
---            <td>Highest</td>
---        </tr>
---        <tr>
---            <td>250-500 studs</td>
---            <td>Medium</td>
---        </tr>
---        <tr>
---            <td>500 or more studs</td>
---            <td>Lowest</td>
---        </tr>
---    </tbody>
---</table>
---
MeshPart.RenderFidelity = nil;
---The texture applied to the `MeshPart`. When this property is set to an
---empty string, no texture will be applied to the mesh.
---
---```
---MeshPart.TextureID = "" -- no texture
---```
---
---Note, although the `MeshPart/MeshId` property cannot be changed during
---runtime, the texture can.
---
---#### How can I change the texture of a mesh?
---
---Using the TextureId property, the texture of a mesh can be changed without
---having to reupload the mesh. To do this, a new image will need to be
---uploaded to Roblox with the desired texture. The original texture image
---file can be obtained by exporting the mesh using the 'Export Selection'
---option in Roblox Studio. The image file will be saved alongside the
---exported .obj file.
---
---The new texture can then be re-uploaded to Roblox as a Decal and its
---content ID can be applied to the mesh using the TextureId property.
---
---#### How can I make a textured mesh?
---
---A mesh can only be textured if the mesh has been UV mapped. UV mapping
---refers to the practice of projecting a texture map onto a mesh. This
---cannot be done using Roblox Studio and has to be done using an external 3D
---modelling application such as [Blender][1].
---
---[1]: https://www.blender.org/
---
MeshPart.TextureID = nil;
---@param meshPart Instance
---@return void
MeshPart.ApplyMesh = function(self, meshPart) end;
---@class Message : Instance
---@field public Text string
---Fills the entire screen with a semi-transparent grey background, with centered
---text in the middle of the screen. With the introduction of Roblox's GUI
---features it has been deprecated and `TextLabel`s should be used instead for
---new work.
---
---Messages will not display if the `Message/Text` field is empty.
---
local Message;
---Sets the text of a `Message` or `Hint`.
---
---A `Message` will be invisible if its `Message/Text` property is blank,
---however the black bar of a `Hint` will remain visible.
---
Message.Text = nil;
---@class MessageBusConnection : Instance
local MessageBusConnection;
---@return void
MessageBusConnection.Disconnect = function(self) end;
---@class MessageBusService : Instance
local MessageBusService;
---@param mid string
---@param params Variant
---@return void
MessageBusService.Publish = function(self, mid, params) end;
---@param protocolName string
---@param methodName string
---@param message Variant
---@param responseCode int
---@param customTelemetryData Variant
---@return void
MessageBusService.PublishProtocolMethodResponse = function(self, protocolName, methodName, message, responseCode, customTelemetryData) end;
---@param mid string
---@return Variant
MessageBusService.GetLast = function(self, mid) end;
---@param protocolName string
---@param methodName string
---@return string
MessageBusService.GetProtocolMethodRequestMessageId = function(self, protocolName, methodName) end;
---@param protocolName string
---@param methodName string
---@param message Variant
---@param customTelemetryData Variant
---@return void
MessageBusService.PublishProtocolMethodRequest = function(self, protocolName, methodName, message, customTelemetryData) end;
---@param key string
---@param input Variant
---@return Variant
MessageBusService.Call = function(self, key, input) end;
---@param domainName string
---@param messageName string
---@return string
MessageBusService.GetMessageId = function(self, domainName, messageName) end;
---@param protocolName string
---@param methodName string
---@param callback Function
---@param once bool
---@param sticky bool
---@return Instance
MessageBusService.SubscribeToProtocolMethodResponse = function(self, protocolName, methodName, callback, once, sticky) end;
---@param protocolName string
---@param methodName string
---@param callback Function
---@param once bool
---@param sticky bool
---@return Instance
MessageBusService.SubscribeToProtocolMethodRequest = function(self, protocolName, methodName, callback, once, sticky) end;
---@param protocolName string
---@param methodName string
---@return string
MessageBusService.GetProtocolMethodResponseMessageId = function(self, protocolName, methodName) end;
---@param mid string
---@param callback Function
---@param once bool
---@param sticky bool
---@return Instance
MessageBusService.Subscribe = function(self, mid, callback, once, sticky) end;
---@class MessagingService : Instance
---The MessagingService allows game servers in the same game to communicate with
---each other in real time (< 1 second) using topics. Topics are developer
---defined strings (1-80 characters) that game servers can send and receive
---messages.
---
---Delivery is best effort and not guaranteed. Make sure to architect your game
---so delivery failures are not critical.
---
---## Limitations
---
---Note: these limits are subject to change.
---
---<table>
---	<thead>
---		<tr>
---			<th>Limit</th>
---			<th>Maximum</th>
---		</tr>
---	</thead>
---	<tbody>
---		<tr>
---			<td>
---				<b>Size of message</b>
---			</td>
---			<td>
---				1kB
---			</td>
---		</tr>
---		<tr>
---			<td>
---				<b>Messages sent per game server</b>
---			</td>
---			<td>
---				 150 + 60 * (number of players in this game server) per minute
---			</td>
---		</tr>
---		<tr>
---			<td>
---				<b>Messages received per topic</b>
---			</td>
---			<td>
---				(10 + 20 * number of servers) per minute
---			</td>
---		</tr>
---		<tr>
---			<td>
---				<b>Messages received for entire game</b>
---			</td>
---			<td>
---				 (100 + 50 * number of servers) per minute
---			</td>
---		</tr>
---	</tbody>
---</table>
---
---[Cross-Server Messaging Guide][1], explores how to communicate between game
---servers in greater detail with relevant code samples
---
---[1]: https://developer.roblox.com/articles/cross-server-messaging
---
local MessagingService;
---@param topic string
---@param message Variant
---@return void
---This function sends the provided message to all subscribers to the topic,
---triggering their registered callbacks to be invoked.
---
---Yields until the message is received by the backend.
---
MessagingService.PublishAsync = function(self, topic, message) end;
---@param topic string
---@param callback Function
---@return RBXScriptConnection
---This function registers a callback to begin listening to the given topic.
---The callback is invoked when a topic receives a message. It can be called
---multiple times for the same topic.
---
---#### Callback
---
---The callback is invoked with two arguments:
---
---<table>
---	<thead>
---		<tr>
---			<th>Field</th>
---			<th>Summary</th>
---		</tr>
---	</thead>
---	<tbody>
---		<tr>
---			<td>
---				<b>Data</b>
---			</td>
---			<td>
---				Developer supplied payload
---			</td>
---		</tr>
---		<tr>
---			<td>
---				<b>Sent</b>
---			</td>
---			<td>
---				Unix time in seconds at which the message was sent
---			</td>
---		</tr>
---	</tbody>
---</table>
---
---It yields until the subscription is properly registered and returns a
---connection object.
---
---To unsubscribe, call `Datatype/RBXScriptConnection|:Disconnect()` on the
---returned object. Once Disconnect() is called, the callback should never be
---invoked. Killing the script containing the connections also causes the
---underlying connect to be unsubscribed.
---
---See also:
---
---- `MessagingService/PublishAsync`, sends the provided message to all
---  subscribers to the topic, triggering their registered callbacks to be
---  invoked
---
MessagingService.SubscribeAsync = function(self, topic, callback) end;
---@class MetaBreakpoint : Instance
---@field public Condition string
---@field public ContinueExecution bool
---@field public Enabled bool
---@field public Id int
---@field public IsLogpoint bool
---@field public Line int
---@field public LogMessage string
---@field public Script string
local MetaBreakpoint;
---
MetaBreakpoint.Condition = nil;
---
MetaBreakpoint.ContinueExecution = nil;
---
MetaBreakpoint.Enabled = nil;
---
MetaBreakpoint.Id = nil;
---
MetaBreakpoint.IsLogpoint = nil;
---
MetaBreakpoint.Line = nil;
---
MetaBreakpoint.LogMessage = nil;
---
MetaBreakpoint.Script = nil;
---@param enabled bool
---@return void
MetaBreakpoint.SetContinueExecution = function(self, enabled) end;
---@return Dictionary
MetaBreakpoint.GetContextBreakpoints = function(self) end;
---@param line int
---@param status Function
---@return int
MetaBreakpoint.SetLine = function(self, line, status) end;
---@param enabled bool
---@return void
MetaBreakpoint.SetEnabled = function(self, enabled) end;
---@param context int
---@param enabled bool
---@return void
MetaBreakpoint.SetContextEnabled = function(self, context, enabled) end;
---@param status Function
---@return int
MetaBreakpoint.Remove = function(self, status) end;
---@class MetaBreakpointContext : Instance
local MetaBreakpointContext;
---@class Model : PVInstance, Instance
---@field public LevelOfDetail ModelLevelOfDetail
---@field public PrimaryPart BasePart
---@field public WorldPivotOrientation Vector3
---@field public WorldPivotPosition Vector3
---@field public WorldPivot CFrame
---Models are container objects, meaning they group objects together. They are
---best used to hold collections of `BasePart|BaseParts` and have a number of
---functions that extend their functionality.
---
---Models are intended to represent **geometric** groupings. If your grouping has
---no geometric interpretation, for instance a collection of `Script|Scripts`,
---use a `Folder` instead.
---
---Models whose constituent parts are joined together with joints (so that they
---can move around or be destroyed via physics simulation) usually have a
---`Model/PrimaryPart|PrimaryPart` set, as it specifies which part within the
---model the pivot and bounding box will "follow" as the model moves. Static
---models which stay in one place do not benefit from having a primary part set.
---
---Models have a wide range of applications, including Roblox player characters.
---They also have a number of unique behaviors that are important to keep in
---mind:
---
---- When a `Humanoid` and a `Part` named **Head** are parented under a model, a
---  name/health GUI will appear over the model; see
---  <a href="https://developer.roblox.com/articles/character-name-health-display">Character
---  Name/Health Display</a> for details.
---- If a part's position on the **Y** axis hits the
---  `Workspace/FallenPartsDestroyHeight` value, and it was the last object
---  inside of a `Model`, the model will be destroyed as well.
---
local Model;
---
Model.LevelOfDetail = nil;
---Points to the primary part of the `Model`. The primary part is the
---`BasePart` that acts as the physical reference for the pivot of the model.
---That is, when parts within the model are moved due to physical simulation
---or other means, the pivot will move in sync with the primary part. If the
---primary part is **not** set, the pivot will remain at the same location in
---world space even if parts within the model are moved.
---
---Note that when setting this property, it must be a `BasePart` that is a
---descendant of the model. If you try to set `Model/PrimaryPart` to a
---`BasePart` that is **not** a descendant of the model, it will be set to
---that part but reset to `nil` during the next simulation step &mdash; this
---is legacy behavior to support scripts which assume they can temporarily
---set the primary part to a `BasePart` which isn't a descendant of the
---model.
---
---The general rule for models is that:
---
---- Models whose parts are joined together via physical joints such as
---  `WeldConstraint|WeldConstraints` or `Motor6D|Motor6Ds` should have a
---  primary part assigned. For example, Roblox character models have their
---  `Model/PrimaryPart` set to the **HumanoidRootPart** by default.
---- Static (usually `BasePart/Anchored|Anchored`) models which stay in one
---  place unless a script explicitly moves them don't require a
---  `Model/PrimaryPart` and tend not to benefit from having one set.
---
Model.PrimaryPart = nil;
---Editor-only property to set the orientation of the pivot. Scripts must use
---`Model/WorldPivot` instead.
---
Model.WorldPivotOrientation = nil;
---Editor-only property to set the position of the pivot. Scripts must use
---`Model/WorldPivot` instead.
---
Model.WorldPivotPosition = nil;
---This property determines where the pivot of a `Model` which does **not**
---have a set `Model/PrimaryPart` is located. If the `Model` **does** have a
---`Model/PrimaryPart|PrimaryPart`, the pivot of the `Model` is equal to the
---pivot of that primary part instead, and this `Model/WorldPivot|WorldPivot`
---property is ignored.
---
---For a newly created `Model`, its pivot will be treated as the center of
---the bounding box of its contents until the **first time** its
---`Model/WorldPivot` property is set. Once the world pivot is set for the
---first time, it is impossible to restore this initial behavior.
---
---Most commonly, moving the model with the Studio tools, or with a model
---movement function such as `PVInstance/PivotTo`, `Model/MoveTo`, and
---`Model/SetPrimaryPartCFrame` will set the world pivot and thus end this
---new model behavior.
---
---The purpose of this behavior is to allow Lua code to get a sensible pivot
---simply by creating a new model and parenting objects to it, avoiding the
---need to explicitly set `Model/WorldPivot` every time you create a model in
---code.
---
---```
---local model = Instance.new("Model")
---workspace.BluePart.Parent = model
---workspace.RedPart.Parent = model
---model.Parent = workspace
---
---print(model:GetPivot())  -- Currently equal to the center of the bounding box containing "BluePart" and "RedPart"
---
---model:PivotTo(CFrame.new(0, 10, 0)  -- This works without needing to explicitly set "model.WorldPivot"
---```
---
Model.WorldPivot = nil;
---@return CFrame
---This function has been superseded by `PVInstance/GetPivot` which acts as a
---replacement and does not change your code's behavior. Use
---`PVInstance/GetPivot` for new work and migrate your existing
---`Model/GetPrimaryPartCFrame` calls when convenient.
---
---Returns the `CFrame` of the `Model`'s `Model/PrimaryPart`.
---
---This function is equivalent to the following.
---
---    Model.PrimaryPart.CFrame
---
---Note this function will throw an error if no primary part exists for the
---`Model`. If this behavior is not desired developers can do the following,
---which will be equal to nil if there is no primary part.
---
---    local cFrame = Model.PrimaryPart and Model.PrimaryPart.CFrame
---
Model.GetPrimaryPartCFrame = function(self) end;
---@return Tuple
---This function returns a description of a volume that contains all
---`BasePart` children within a `Model`. The volume's orientation is based on
---the orientation of the `Model/PrimaryPart|PrimaryPart`, and matches the
---selection box rendered in Studio when the model is selected. The
---description is provided in the form of a `DataType/CFrame` **orientation**
---and `DataType/Vector3` **size**.
---
---Mirroring the behavior of `Terrain/FillBlock`, it returns a CFrame
---representing the center of that bounding box and a Vector3 representing
---its size.
---
---If there is no PrimaryPart for the model, the BoundingBox will be aligned
---to the world axes.
---
---#### Example
---
---Pictured below is a `Model` with a pink semitransparent `Part` whose
---`BasePart/CFrame|CFrame` and `BasePart/Size|Size` have been set to the
---return values of this function called on the model.
---
---![A model of an Observation Tower with a pink semitransparent part representing the volume returned by GetBoundingBox][1]
---
---#### Usage
---
---```lua
---local model = workspace.Model
---local part = workspace.Part
---local orientation, size = model:GetBoundingBox()
---part.Size = size
---part.CFrame = orientation
---```
---
---[1]: /assets/blta46b16b68c24f7d7/Model-GetBoundingBox.png
---
Model.GetBoundingBox = function(self) end;
---@param cframe CFrame
---@return void
---This function has been superseded by `PVInstance/PivotTo` which acts as a
---more performant replacement and does not change your code's behavior. Use
---`PVInstance/PivotTo` for new work and migrate your existing
---`Model/SetPrimaryPartCFrame` calls when convenient.
---
---Sets the `BasePart/CFrame` of the `Model`'s `Model/PrimaryPart`. All other
---parts in the model will also be moved and will maintain their orientation
---and offset respective to the `Model/PrimaryPart`.
---
---Note, this function will throw an error if no `Model/PrimaryPart` exists
---for the model. This can cause issues if, for example, the primary part was
---never set or has been destroyed. Therefore, it is recommended the
---developer check the `Model/PrimaryPart` exists before using this function.
---For example:
---
---    if model.PrimaryPart then
---    	model:SetPrimaryPartCFrame(cf)
---    end
---
---A common use for this is for the 'teleportation' of player characters to
---different positions.
---
Model.SetPrimaryPartCFrame = function(self, cframe) end;
---@return void
---Breaks connections between `BaseParts`, including surface connections with
---any adjacent parts, `WeldConstraint`s, and all `Weld`s and other
---`JointInstance`s.
---
---When BreakJoints is used on a Player character `Model`, the character's
---`Humanoid` will die as it relies on the Neck joint.
---
---Note that although joints produced by surface connections with adjacent
---Parts can technically be recreated using `Model/MakeJoints`, this will
---only recreate joints produced by surfaces. Developers should not rely on
---this as following the joints being broken parts may no longer be in
---contact with each other.
---
Model.BreakJoints = function(self) end;
---@return void
---Sets the identity rotation of the given model, allowing you to reset the
---rotation of the entire model later, through the use of the
---`ResetOrientationToIdentity` method.
---
Model.SetIdentityOrientation = function(self) end;
---@return Vector3
---Returns the size of the smallest bounding box that contains all of the
---`BasePart`s in the `Model`. If `Model/PrimaryPart` exists then the
---bounding box will be aligned to that part. If a primary part has not been
---set then the function will chose a part in the model to align the bounding
---box to. As the the selection of this part is not deterministic it is
---recommended to set a `Model/PrimaryPart` to get consistent results with
---this function.
---
---Note this function only returns the size of the smallest bounding box, and
---the developer must employ their own method to obtain the position of the
---bounding box.
---
Model.GetExtentsSize = function(self) end;
---@param position Vector3
---@return void
---Moves the `Model/PrimaryPart` to the given position. If a primary part has
---not been specified then the root part of the model will be used. Because
---the root part is not deterministic, it is recommended to always set a
---`Model/PrimaryPart` when using MoveTo.
---
---If there are any obstructions where the model is to be moved to, such as
---`Terrain` or other `BasePart`s, then the model will be moved up in the Y
---direction until there is nothing in the way. If this behavior is not
---desired, `Model/SetPrimaryPartCFrame` should be used instead.
---
---Note that rotation is not preserved when moving a model with MoveTo. It is
---recommended to use either `Model/TranslateBy` or
---`Model/SetPrimaryPartCFrame` if the current rotation of the model needs to
---be preserved.
---
Model.MoveTo = function(self, position) end;
---@param location Vector3
---@return void
Model.move = function(self, location) end;
---@return void
Model.makeJoints = function(self) end;
---@return CFrame
---This value historically returned the CFrame of a central position in the
---model. It has been deprecated as it did not provide reliable results.
---
Model.GetModelCFrame = function(self) end;
---@return void
Model.breakJoints = function(self) end;
---@param delta Vector3
---@return void
---Shifts a `Model` by the given `Vector3` offset, preserving the `Model`'s
---orientation. If another `BasePart` or `Terrain` already exists at the new
---position then the `Model` will overlap said object.
---
---The translation is applied in world space rather than object space,
---meaning even if the model's parts are orientated differently it will still
---move along the standard axis.
---
Model.TranslateBy = function(self, delta) end;
---@param location Vector3
---@return void
Model.moveTo = function(self, location) end;
---@return Vector3
---The GetModelSize function returns the `Vector3` size of the `Model`.
---
Model.GetModelSize = function(self) end;
---@return void
---Resets the rotation of the model's parts to the previously set identity
---rotation, which is done through the `Model/SetIdentityOrientation` method.
---
Model.ResetOrientationToIdentity = function(self) end;
---@return void
---**Deprecated**
---
---SurfaceType based joining is deprecated, do not use MakeJoints for new
---projects. `WeldConstraint|WeldConstraints` and
---`HingeConstraint|HingeConstraints` should be used instead.
---
---Goes through all `BasePart|Parts` in the `Model` and creates joints
---between the specified Parts and any planar touching surfaces, depending on
---the parts' surfaces.
---
---- Smooth surfaces will not create joints
---- Glue surfaces will create a `Glue` joint
---- Weld will create a `Weld` joint with any surface except for Unjoinable
---- Studs, Inlet, or Universal will each create a `Snap` joint with either
---  of other the other two surfaces (e.g. Studs with Inlet and Universal)
---- Hinge and Motor surfaces create `Rotate` and `RotateV` joint instances
---
---This function will not work if the Part is not a descendant of
---`Workspace`. Therefore developers must first ensure the Model is parented
---to Workspace before using MakeJoints.
---
Model.MakeJoints = function(self) end;
---@class ModuleScript : LuaSourceContainer, Instance
---@field public LinkedSource Content
---@field public Source ProtectedString
---A ModuleScript is a type of Lua source container that runs once and must
---return exactly one value. This value is then returned by a call to `require`
---given the ModuleScript as the only argument. ModuleScripts run once and only
---once per Lua environment and return the exact same value for subsequent calls
---to `require`.
---
---ModuleScripts are essential objects for adhering to the don't-repeat-yourself
---(DRY) principle. When you write a function, write it only once and use it
---everywhere. Having multiple copies of a function is disastrous when you need
---to change that behavior. So, you should define functions or groups of
---functions in ModuleScripts and have your Scripts and LocalScripts call
---`require` on your ModuleScripts. Keep your code organized!
---
---It's important to know that return values from ModuleScripts are independent
---with regards to LocalScripts and Scripts, and other environments like the
---Command Bar. Using `require` on a ModuleScript in a LocalScript will run the
---code on the client, even if a Script did so already on the server. Similarly,
---in Roblox Studio, using `require` on a ModuleScript in the hierarchy with the
---Command Bar will give a similar behavior. So, be careful if you are using a
---ModuleScript on the client and server at the same time, or debugging it within
---Studio.
---
---Note that the first call to `require` on a ModuleScript will not yield (halt)
---unless the ModuleScript yields (e.g. calls `wait`). The current thread that
---called `require` will yield until a ModuleScript returns a value. A run time
---error is generated if this doesn't happen. If a ModuleScript is attempting to
---`require` another ModuleScript that in turn tries to `require`s it, the
---**thread will hang and never halt (cyclic `require` calls do not generate
---errors).** Be mindful of your module dependencies in large projects!
---
---If a ModuleScript object is has its Name property set to 'MainModule' and is
---uploaded to Roblox as a model to your account, Scripts can use `require` with
---the uploaded model's AssetId instead. This allows you to create private
---modules on your Roblox account!
---
local ModuleScript;
---Used to store a URL that points to an online script source. Binds the
---online code to the script's `Script/Source`.
---
ModuleScript.LinkedSource = nil;
---The code to be executed.
---
ModuleScript.Source = nil;
---@class Motor : JointInstance, Instance
---@field public CurrentAngle float
---@field public DesiredAngle float
---@field public MaxVelocity float
---An object used to make movable `JointInstance` between two Parts.
---
local Motor;
---Displays the current rotation of the motor in radians.
---
Motor.CurrentAngle = nil;
---The desired angle to turn the motor to in radians. The motor will attempt
---to reach this angle (provided `Motor/MaxVelocity` is greater than 0.
---
Motor.DesiredAngle = nil;
---The maximum velocity the motor can use to reach `Motor/DesiredAngle`
---measured in radians per physics frame (1/60th of a second).
---
Motor.MaxVelocity = nil;
---@param value float
---@return void
---Sets `Motor/DesiredAngle` of the motor.
---
Motor.SetDesiredAngle = function(self, value) end;
---@class Motor6D : Motor, JointInstance, Instance
---@field public ChildName string
---@field public ParentName string
---@field public Transform CFrame
---**Motor6D** joins two `BasePart` (`JointInstance/Part0|Part0` and
---`JointInstance/Part1|Part1`) together in an animatable way. The
---`Motor6D/Transform|Transform` property determines the offset between these
---parts. This can be set manually using `RunService/Stepped` or through an
---`Animator`.
---
---Models whose parts are joined by Motor6D are usually referred to as rigs,
---typically for `Humanoid`s. There are two primary kinds of rigs for `Player`
---avatars: R6 and R15.
---
local Motor6D;
---
Motor6D.ChildName = nil;
---
Motor6D.ParentName = nil;
---The internal CFrame that is manipulated by Animations when a Motor6D is
---being animated. It is recommended to use this property for custom
---animations rather than `JointInstance/C0` and `JointInstance/C1`.
---
---Transform is the transformation between the "parent" `BasePart|part` and
---the "child" part. The "parent" part will always be the part that is more
---directly connected to the JointInstance.C0. This is not affected by which
---part is assigned to `JointInstance/Part0` and which is
---`JointInstance/Part1`. If the side the root part is on changes the
---interpretation of Transform will be inverted.
---
---Similar to a `Weld`, an active Motor6D will rigidly hold its two parts
---such that:
---`PartParent.CFrame * CParent * Transform == PartChild.CFrame * Child`
---
Motor6D.Transform = nil;
---@class MotorFeature : Feature, Instance
---A MotorFeature is an unused type of surface joint. It can be connected to a
---`Hole` object by using a `VelocityMotor`.
---
local MotorFeature;
---@class Mouse : Instance
---@field public Hit CFrame
---@field public Icon Content
---@field public Origin CFrame
---@field public Target BasePart
---@field public TargetFilter Instance
---@field public TargetSurface NormalId
---@field public UnitRay Ray
---@field public ViewSizeX int
---@field public ViewSizeY int
---@field public X int
---@field public Y int
---@field public hit CFrame
---@field public target BasePart
---@field public Button1Down RBXScriptSignal.Button1Down
---@field public Button1Up RBXScriptSignal.Button1Up
---@field public Button2Down RBXScriptSignal.Button2Down
---@field public Button2Up RBXScriptSignal.Button2Up
---@field public Idle RBXScriptSignal.Idle
---@field public KeyDown RBXScriptSignal.KeyDown
---@field public KeyUp RBXScriptSignal.KeyUp
---@field public Move RBXScriptSignal.Move
---@field public WheelBackward RBXScriptSignal.WheelBackward
---@field public WheelForward RBXScriptSignal.WheelForward
---@field public keyDown RBXScriptSignal.keyDown
---**Mouse** has been superseded by `UserInputService` and
---`ContextActionService`, which cover a broader scope, are more feature rich,
---and support **cross-platform** patterns better. It remains supported because
---of its widespread use, but you should strongly consider using these
---alternatives.
---
---The **Mouse** object houses various API for pointers, primarily for buttons
---and raycasting. It can be accessed through `Player/GetMouse` called on the
---`Players/LocalPlayer` in a `LocalScript`. It is also passed by the
---`Tool/Equipped` event.
---
---- It is most notable for the `Mouse/Icon|Icon` property, which changes the
---  cursor's appearance.
---- It continually raycasts the screen mouse position into the 3D world using
---  the `Mouse/TargetFilter|TargetFilter` property, storing the results of the
---  raycast in the `Mouse/Hit|Hit`, `Mouse/Target|Target`, and
---  `Mouse/TargetSurface|TargetSurface` properties. These can be useful for
---  simple cases, but `WorldRoot/Raycast` should be used in more complicated
---  scenarios (whitelists, etc).
---- `Plugin|Plugins` can use use `Plugin/GetMouse` to get a `PluginMouse`, which
---  behaves similarly.
---
---```lua
----- From a LocalScript:
---local Players = game:GetService("Players")
---local player = Players.LocalPlayer
---local mouse = Player:GetMouse()
----- Setting the mouse icon
---mouse.Icon = "rbxasset://SystemCursors/Wait"
---```
---
---Note:
---
---- This object does not control/restrict pointer movement. For this, see
---  `UserInputService/MouseBehavior` and
---  `UserInputService/MouseDeltaSensitivity`.
---- If two functions are connected to same input event, such as
---  `Mouse/Button1Down|Button1Down`, **both** functions will run when the event
---  fires. There is no concept of sinking/passing input, as events don't support
---  this behavior. However, `ContextActionService` does have this behavior
---  through `ContextActionService/BindAction|BindAction`.
---- While a mouse may not be available on all platforms, Mouse will still
---  function on mobile (touch) and console (gamepad), which don't typically have
---  mice or pointer hardware. For explicit cross-platform behaviors, use
---  `UserInputService` and `ContextActionService`.
---
local Mouse;
---This property indicates `DataType/CFrame` of the mouse's position in 3D
---space. Note that `Mouse/TargetFilter` and its descendants will be ignored.
---
---Developers can get obtain the position of Hit like so:
---
---```
---local position = mouse.Hit.p
---```
---
---Hit is often used by `Tool`s to fire a weapon towards the mouse in third
---person.
---
---Developers looking for the `BasePart` the mouse is pointing at should use
---`Mouse/Target`.
---
---#### How is Mouse.Hit calculated?
---
---The position of the Hit CFrame is calculated as the point of intersection
---between the mouse's internal `DataType/Ray` (an extended version of
---`Mouse/UnitRay`) and an object in 3D space (such as a part).
---
---The orientation of the Hit CFrame corresponds with the direction of the
---`Mouse/UnitRay`.
---
---```
---local unitRayDirection = mouse.UnitRay.Direction
---local mouseHitDirection = mouse.Hit.lookVector
----- unitRayDirection ≈ mouseHitDirection
----- the vectors are approximately equal
---```
---
---Note, the roll of the `Workspace/CurrentCamera` is not used when
---calculating the orientation of the Hit `DataType/CFrame`.
---
---The mouse's internal ray extends for 1000 studs. If the mouse is not
---pointing at an object in 3D space (for example when pointing at the sky),
---this property will be 1000 studs away from the `Workspace/CurrentCamera`.
---
Mouse.Hit = nil;
---**Icon** is a property that determines the image used as the pointer. If
---blank, a default arrow is used. While the cursor hovers over a
---`GuiButton`, this property is temporarily ignored.
---
---To hide the cursor entirely, **do not** use a transparent image &ndash;
---instead, set `UserInputService/MouseIconEnabled` to false.
---
---#### Designing a Cursor
---
---The following guidelines may prove useful when creating your own mouse
---cursors:
---
---- The dimensions of the image used determines the size of the cursor.
---- The **center** of the image is where mouse inputs are issued.
---- The default mouse image is 64x64 pixels, with the mouse taking up 17x24
---  pixels of space.
---
---#### System Cursors for `PluginMouse`
---
---When using a `PluginMouse` retrieved from `Plugin/GetMouse`, you can use
---the following icons similar to your system's default cursors, such as
---hands, arrows, I-beams, etc. You can use these with GUI events like
---`GuiObject/MouseEnter|MouseEnter`, `GuiObject/MouseLeave|MouseLeave`, and
---`GuiButton/MouseButton1Down|MouseButton1Down` to provide a consistent
---studio experience when interacting with certain kinds of GUI components.
---Note that these only work for studio plugins; they will not work for other
---`Mouse` objects.
---
---<table>
---    <thead>
---        <tr>
---            <th>Look*</th>
---            <th>Asset</th>
---            <th>Suggested Use</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td><img src="/assets/blt4482654ef91a9008/Mouse-Icon-Pointer.png" /></td>
---            <td><code>rbxasset://SystemCursors/Arrow</code></td>
---            <td>Default clicking and selection.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/bltc2bdf42fc1ed250d/Mouse-Icon-PointingHand.png" /></td>
---            <td><code>rbxasset://SystemCursors/PointingHand</code></td>
---            <td>Hovering over an active link/button.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt9a60df866240a5e9/Mouse-Icon-OpenHand.png" /></td>
---            <td><code>rbxasset://SystemCursors/OpenHand</code></td>
---            <td>Hovering over a draggable item.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blte5d3e06e06fab88c/Mouse-Icon-GrabbingHand.png" /></td>
---            <td><code>rbxasset://SystemCursors/ClosedHand</code></td>
---            <td>Dragging an item.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt79a362eb3c601381/Mouse-Icon-IBeam.png" /></td>
---            <td><code>rbxasset://SystemCursors/IBeam</code></td>
---            <td>Hovering in a text field.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt47428ee42664d002/Mouse-Icon-ResizeNS.png" /></td>
---            <td><code>rbxasset://SystemCursors/SizeNS</code></td>
---            <td>Hovering over a vertical resize handle.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt3f97374ddb823581/Mouse-Icon-ResizeEW.png" /></td>
---            <td><code>rbxasset://SystemCursors/SizeEW</code></td>
---            <td>Hovering over a horizontal resize handle.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt893bc2edd5c09e54/Mouse-Icon-ResizeNESW.png" /></td>
---            <td><code>rbxasset://SystemCursors/SizeNESW</code></td>
---            <td>Hovering over a corner resize handle.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt07969d143abbdc1d/Mouse-Icon-ResizeNWSE.png" /></td>
---            <td><code>rbxasset://SystemCursors/SizeNWSE</code></td>
---            <td>Hovering over a corner resize handle.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt4edcc341574209f2/Mouse-Icon-ResizeAll.png" /></td>
---            <td><code>rbxasset://SystemCursors/SizeAll</code></td>
---            <td>Hovering over a multi-direction resize handle.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt2c229bc59095b65b/Mouse-Icon-ResizeSplitV.png" /></td>
---            <td><code>rbxasset://SystemCursors/SplitNS</code></td>
---            <td>Hovering over a vertical "split" handle.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt55e74af96d16bf13/Mouse-Icon-ResizeSplitH.png" /></td>
---            <td><code>rbxasset://SystemCursors/SplitEW</code></td>
---            <td>Hovering over a horizontal "split" handle.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blte2400cb5f4fbf76b/Mouse-Icon-Forbidden.png" /></td>
---            <td><code>rbxasset://SystemCursors/Forbidden</code></td>
---            <td>Hovering over a locked/forbidden item.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/bltde507fd6476b6cd3/Mouse-Icon-Wait.png" /></td>
---            <td><code>rbxasset://SystemCursors/Wait</code></td>
---            <td>Indicating an action is in progress.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/bltae7412bfdbad51d1/Mouse-Icon-Busy.png" /></td>
---            <td><code>rbxasset://SystemCursors/Busy</code></td>
---            <td>Indicating the system is busy.</td>
---        </tr>
---        <tr>
---            <td><img src="/assets/blt512ea5431f8546e6/Mouse-Icon-Crosshair.png" /></td>
---            <td><code>rbxasset://SystemCursors/Cross</code></td>
---            <td>Hovering over a pinpoint selection area.</td>
---        </tr>
---    </tbody>
---</table>
---
---\* These appearances are approximations &ndash; the actual look is
---dependent on your operating system.
---
Mouse.Icon = nil;
---The origin `Mouse` property is a `DataType/CFrame` indicating where the
---mouse originated from. It is positioned at the `Workspace/CurrentCamera`
---and oriented toward the `Mouse`'s 3D position.
---
---`Mouse/UnitRay` starts at the same position as Origin, and extends for a
---stud in the same direction.
---
---```lua
---local unitRay = mouse.UnitRay
---local origin = mouse.Origin
----- unitRay.Direction = origin.p
----- unitRay.Direction ≈ origin.lookVector
---```
---
---For the position of the `Mouse` in 3D space, see `Mouse/Hit`.
---
Mouse.Origin = nil;
---The object in 3D space the `Mouse|mouse` is pointing to.
---
---Note:
---
---- If `Mouse/TargetFilter` has been set, the target filter and its
---  descendants will be ignored.
---- When the mouse is not pointing at a `BasePart`, for example when it is
---  pointing at the sky, Target will be nil.
---- Developers looking for the position of the mouse in 3D space should use
---  `Mouse/Hit`.
---
Mouse.Target = nil;
---This property determines an object to be ignored by the mouse when
---calculating `Mouse/Hit` and `Mouse/Target`. The descendants of the object
---are also ignored, so it is possible to ignore multiple objects so long as
---they are a descendant of the object to which this property is set. This
---property is useful when filtering models containing special effects or
---decorations that should not affect `Mouse/Hit` or `Mouse/Target`.
---
---This property can be set to any `Instance` or nil, for example:
---
---```lua
---local Players = game:GetService("Players")
---local player = Players.LocalPlayer
---local mouse = player:GetMouse()
---mouse.TargetFilter = workspace.Model
---
----- Now, when the player hovers the cursor over the model, mouse.Target will be some object
----- behind workspace.Model, if there is one.
---```
---
---This property is essentially a single-object blacklist for mouse
---raycasting. For more in-depth control on raycasting, see the following
---functions of `Workspace`: `Workspace/FindPartOnRay|FindPartOnRay`,
---`Workspace/FindPartOnRayWithWhitelist|FindPartOnRayWithWhitelist` and
---`Workspace/FindPartOnRayWithIgnoreList|FindPartOnRayWithIgnoreList`.
---
---The `Player/Character|Character` of the `Players/LocalPlayer` is ignored
---by the mouse automatically."
---
Mouse.TargetFilter = nil;
---This property indicates the `Enum/NormalId` of the `BasePart` surface at
---which the mouse is pointing. This property is derived from the world
---position of mouse (`Mouse/Hit`) and the part toward which the mouse is
---pointing (`Mouse/Target`).
---
---This property isn't meaningful when the mouse is not pointing at a part,
---for example when the mouse is pointing at the sky. At the moment, this
---property is set to 'Right' under these circumstances. Before using this
---property, check that the mouse's target is not nil.
---
---```lua
---local Players = game:GetService("Players")
---local player = Players.LocalPlayer
---local mouse = player:GetMouse()
----- Check that there exists a part at which the mouse is pointing
---if mouse.Target then
---	print("The mouse is pointing to the " .. mouse.TargetSurface.Name .. " side of " .. mouse.Target.Name)
---else
---	print("The mouse is not pointing at anything.")
---end
---```
---
Mouse.TargetSurface = nil;
---The UnitRay property is a `DataType/Ray` directed toward the `Mouse`'s
---position in 3D space (described by `Mouse/Hit`). It originates from the
---`Camera/CFrame|CFrame` of the `Workspace/CurrentCamera`. Like all unit
---rays, it has a distance of 1.
---
---```lua
---local Players = game:GetService("Players")
---local player = Players.LocalPlayer
---local mouse = player:GetMouse()
---print(mouse.UnitRay.Direction.magnitude) -- Always 1
---```
---
Mouse.UnitRay = nil;
---The ViewSizeX property describes the horizontal component of the game
---window's size in pixels.
---
Mouse.ViewSizeX = nil;
---The ViewSizeY property describes the vertical component of the game
---window's size in pixels. This length includes the space used by the
---topbar.
---
Mouse.ViewSizeY = nil;
---When detecting changes in the mouse's position on-screen, it is
---recommended that you use `ContextActionService/BindAction` with
---`Enum.UserInputType.MouseMovement` or `UserInputService/InputChanged`,
---which both describe the position of the mouse using the
---`InputObject/Position|Position` (a `DataType/Vector3`) of an
---`InputObject`, instead of using this and related properties.
---
---The X property describes the horizontal component of the mouse's position
---on the screen. The position is measured in pixels relative to the top left
---corner, under the topbar. This property can be used in conjunction with
---`Mouse/Y` to produce a `DataType/Vector2` representing the mouse's
---position:
---
---```lua
---local position = Vector2.new(mouse.X, mouse.Y)
---```
---
---This property does not fire `Instance/Changed|Changed` or the signal
---returned from
---`Instance/GetPropertyChangedSignal|GetPropertyChangedSignal`. Use the
---`Mouse/Move` event instead.
---
Mouse.X = nil;
---When detecting changes in the mouse's position on-screen, it is
---recommended that you use `ContextActionService/BindAction` with
---`Enum.UserInputType.MouseMovement` or `UserInputService/InputChanged`,
---which both describe the position of the mouse using the
---`InputObject/Position|Position` (a `DataType/Vector3`) of an
---`InputObject`, instead of using this and related properties.
---
---The Y property describes the vertical component of the mouse's position on
---the screen. The position is measured in pixels relative to the top left
---corner, under the topbar. This property can be used in conjunction with
---`Mouse/X` to produce a `DataType/Vector2` representing the mouse's
---position:
---
---```lua
---local position = Vector2.new(mouse.X, mouse.Y)
---```
---
---This property does not fire `Instance/Changed|Changed` or the signal
---returned from
---`Instance/GetPropertyChangedSignal|GetPropertyChangedSignal`. Use the
---`Mouse/Move` event instead.
---
Mouse.Y = nil;
---
Mouse.hit = nil;
---
Mouse.target = nil;
---@class RBXScriptSignal.Button1Down : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Button1Down, callback: fun()): RBXScriptConnection
---The Button1Down even fires when the the player presses their left mouse
---button.
---
---This can also be accessed from a `Tool`. For example, when placed in a
---`LocalScript`, the code below prints Button1Down whenever the left mouse
---button is pressed:
---
---```lua
---local Tool = script.Parent --make sure this is a Tool object
---
---Tool.Equipped:Connect(function(Mouse)
---	Mouse.Button1Down:Connect(function()
---		print("Button1Down")
---	end)
---end)
---```
---
---Developers can find out the position of the mouse in world-space, and if
---it is pointing at any `BasePart`, using the `Mouse/Hit` and `Mouse/Target`
---properties.
---
---For information on how to obtain the mouse object, please see the `Mouse`
---page.
---
---Note, developers are recommended to use `UserInputService` instead of the
---`Mouse` object in new work.
---
Mouse.Button1Down = nil;
---@class RBXScriptSignal.Button1Up : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Button1Up, callback: fun()): RBXScriptConnection
---Fires when the left mouse button is released.
---
---For information on how to obtain the `Mouse` object, please see the
---`Mouse` page.
---
---Developers can find out the position of the mouse in world-space, and if
---it is pointing at any `BasePart` using the `Mouse/Hit` and `Mouse/Target`
---properties.
---
---Note, developers are recommended to use `UserInputService` instead of the
---`Mouse` object in new work.
---
Mouse.Button1Up = nil;
---@class RBXScriptSignal.Button2Down : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Button2Down, callback: fun()): RBXScriptConnection
---The Button2Down even fires when the the player presses their right mouse
---button.
---
---This can also be accessed from a `Tool`. For example, when placed in a
---`LocalScript`, the code below prints Button2Down whenever the right mouse
---button is pressed:
---
---```lua
---local Tool = script.Parent --make sure this is a Tool object
---
---Tool.Equipped:Connect(function(Mouse)
---	Mouse.Button2Down:Connect(function()
---		print("Button2Down")
---	end)
---end).
---```
---
---Developers can find out the position of the mouse in world-space, and if
---it is pointing at any `BasePart`, using the `Mouse/Hit` and `Mouse/Target`
---properties.
---
---For information on how to obtain the mouse object, please see the `Mouse`
---page.
---
---Note, developers are recommended to use `UserInputService` instead of the
---`Mouse` object in new work.
---
Mouse.Button2Down = nil;
---@class RBXScriptSignal.Button2Up : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Button2Up, callback: fun()): RBXScriptConnection
---Fired when the right mouse button is released.
---
---```lua
---mouse.Button2Up:Connect(function()
---print("button 2 up!")
---end
---```
---
---For information on how to obtain the `Mouse` object, please see the
---`Mouse` page.
---
---Developers can find out the position of the mouse in world-space, and if
---it is pointing at any `BasePart` using the `Mouse/Hit` and `Mouse/Target`
---properties.
---
---Note, developers are recommended to use `UserInputService` instead of the
---`Mouse` object in new work.
---
Mouse.Button2Up = nil;
---@class RBXScriptSignal.Idle : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Idle, callback: fun()): RBXScriptConnection
---Fired during every heartbeat that the mouse isn't being passed to another
---mouse event.
---
---Note, this event should not be used to determine when the mouse is still.
---As it fires every heartbeat it will fire between `Mouse/Move` events.
---
---For information on how to obtain the `Mouse` object, please see the
---`Mouse` page.
---
---Developers can find out the position of the mouse in world-space, and if
---it is pointing at any `BasePart` using the `Mouse/Hit` and `Mouse/Target`
---properties.
---
---Note, developers are recommended to use `UserInputService` instead of the
---`Mouse` object in new work.
---
Mouse.Idle = nil;
---@class RBXScriptSignal.KeyDown : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.KeyDown, callback: fun(key: string)): RBXScriptConnection
---This event fires when a Key is pressed, with the passed argument being the
---key that was pressed.
---
---Note:
---
---- Not all keys generate this event. However, you can get around this with
---  a few of the keys, "/" for example, by using the `Mouse/KeyUp` event.
---- Some keys generate the same string as other keys.
---- It's possible for the string to be empty (possibly due to "\0" key
---  code).
---
Mouse.KeyDown = nil;
---@class RBXScriptSignal.KeyUp : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.KeyUp, callback: fun(key: string)): RBXScriptConnection
---This event is fired when a Key is released, with the passed argument being
---the key that was released.
---
---Note:
---
---- Not all keys generate this event. However, you can get around this with
---  a few of the keys, "/" for example, by using the
---  [[API:Class/Mouse/KeyUp|KeyUp]] event.
---- Some keys generate the same string as other keys.
---- It's possible for the string to be empty (possibly due to "\0" key
---  code).
---
Mouse.KeyUp = nil;
---@class RBXScriptSignal.Move : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Move, callback: fun()): RBXScriptConnection
---Fired when the mouse is moved.
---
---Note, this event is fired when the mouse's position is updated, therefore
---it will fire repeatedly whilst being moved.
---
---For information on how to obtain the `Mouse` object, please see the
---`Mouse` page.
---
---Developers can find out the position of the mouse in world-space, and if
---it is pointing at any `BasePart` using the `Mouse/Hit` and `Mouse/Target`
---properties.
---
---```
---mouse.Move:Connect(function()
---	local position = mouse.Hit.p
---	local target = mouse.Target
---	print(target, position)
---end)
---```
---
---Note, developers are recommended to use `UserInputService` instead of the
---`Mouse` object in new work.
---
Mouse.Move = nil;
---@class RBXScriptSignal.WheelBackward : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.WheelBackward, callback: fun()): RBXScriptConnection
---The WheelBackward event fires when the mouse wheel is scrolled backwards.
---Possible uses for this event include toggling a gun's scope in a first
---person shooter (FPS) or zooming the player's camera.
---
---This can be used alongside the scrolling forward event,
---`Mouse/WheelForward`.
---
---For information on how to obtain the `Mouse` object, please see the
---`Mouse` page.
---
---Note, developers are recommended to use `UserInputService` instead of the
---`Mouse` object in new work.
---
Mouse.WheelBackward = nil;
---@class RBXScriptSignal.WheelForward : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.WheelForward, callback: fun()): RBXScriptConnection
---The WheelForward event fires when the mouse wheel is scrolled forwards.
---Possible uses for this event include toggling a gun's scope in a first
---person shooter (FPS) or zooming the player's camera.
---
---This can be used alongside the scrolling backward event,
---`Mouse/WheelBackward`.
---
---For information on how to obtain the `Mouse` object, please see the
---`Mouse` page.
---
---Note, developers are recommended to use `UserInputService` instead of the
---`Mouse` object in new work.
---
Mouse.WheelForward = nil;
---@class RBXScriptSignal.keyDown : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.keyDown, callback: fun(key: string)): RBXScriptConnection
---
Mouse.keyDown = nil;
---@class MouseService : Instance
local MouseService;
---@class MultipleDocumentInterfaceInstance : Instance
---@field public FocusedDataModelSession Instance
---@field public DataModelSessionEnded RBXScriptSignal.DataModelSessionEnded
---@field public DataModelSessionStarted RBXScriptSignal.DataModelSessionStarted
local MultipleDocumentInterfaceInstance;
---
MultipleDocumentInterfaceInstance.FocusedDataModelSession = nil;
---@class RBXScriptSignal.DataModelSessionEnded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.DataModelSessionEnded, callback: fun(dataModelSession: Instance)): RBXScriptConnection
---
MultipleDocumentInterfaceInstance.DataModelSessionEnded = nil;
---@class RBXScriptSignal.DataModelSessionStarted : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.DataModelSessionStarted, callback: fun(dataModelSession: Instance)): RBXScriptConnection
---
MultipleDocumentInterfaceInstance.DataModelSessionStarted = nil;
---@class NegateOperation : PartOperation, TriangleMeshPart, BasePart, PVInstance, Instance
---The NegateOperation creates a CSG part that can be removed from other part via
---solid modeling. To use it, select a part and click the **Negate** button in
---the **Model** tab.
---
---<img src="/assets/blt7dc16d2d629426a6/CSG-Negate-Button.png" />
---
---This will convert the part to a "negative part" (it will turn red and
---translucent to indicate this). If this negative part is unioned with a normal
---part using the **Union** tool, the section of the parts which overlap will be
---cut out.
---
---This function can be used in conjunction with `UnionOperation` to shape,
---resize, and create holes in solid models. Combined parts can also be
---separated, allowing developers to revert (undo) the result of a unioned model.
---
---Note that you can undo part negation by selecting the negated part and
---clicking **Negate** again.
---
---See also:
---
---- <a href="/building-and-visuals/modeling/solid-modeling">Solid modeling</a>,
---  an article that dives into solid modeling and how it lets you create complex
---  models from simple blocks, spheres, wedges, and cylinders
---- <a href="https://developer.roblox.com/articles/in-game-solid-modeling">In
---  Game Solid Modeling</a>, an article discussing how developers can perform
---  solid modeling live in-game as well as in Studio
---
local NegateOperation;
---@class NetworkClient : NetworkPeer, Instance
---@field public ConnectionAccepted RBXScriptSignal.ConnectionAccepted
---@field public ConnectionFailed RBXScriptSignal.ConnectionFailed
---This service is responsible for connecting a client to a server.
---
local NetworkClient;
---@class RBXScriptSignal.ConnectionAccepted : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ConnectionAccepted, callback: fun(peer: string, replicator: Instance)): RBXScriptConnection
---Fired when the client successfully connects to a server. Returns a string
---showing the server's IP and Port, and the client's `ClientReplicator`.
---
NetworkClient.ConnectionAccepted = nil;
---@class RBXScriptSignal.ConnectionFailed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ConnectionFailed, callback: fun(peer: string, code: int, reason: string)): RBXScriptConnection
---Fired if the client fails to connect to the server.
---
NetworkClient.ConnectionFailed = nil;
---@class NetworkMarker : Instance
---@field public Received RBXScriptSignal.Received
---The NetworkMarker is used to tell the client when the server has finished
---loading the world for the client.
---
local NetworkMarker;
---@class RBXScriptSignal.Received : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Received, callback: fun()): RBXScriptConnection
---Fired when the server has finished replicating the world to the client.
---
NetworkMarker.Received = nil;
---@class NetworkPeer : Instance
---The NetworkPeer object is the most basic class of the network objects.
---
local NetworkPeer;
---@param limit int
---@return void
---Sets the maximum outgoing bandwidth that Roblox can use.
---
NetworkPeer.SetOutgoingKBPSLimit = function(self, limit) end;
---@class NetworkReplicator : Instance
---An object which handles the replication of other objects either from the
---server to the client, or from the client to the server.
---
local NetworkReplicator;
---@return Instance
---Returns the player that is connected to the NetworkReplicator.
---
NetworkReplicator.GetPlayer = function(self) end;
---@class NetworkServer : NetworkPeer, Instance
---The `NetworkServer` stores all the `NetworkReplicator` in the game and handles
---all connections. `NetworkPeer/SetOutgoingKBPSLimit` can be used to imitate
---latency while using Start Server.
---
local NetworkServer;
---@param toEncrypt string
---@param playerId int64
---@return string
NetworkServer.EncryptStringForPlayerId = function(self, toEncrypt, playerId) end;
---@class NetworkSettings : Instance
---@field public EmulatedTotalMemoryInMB int
---@field public FreeMemoryMBytes float
---@field public HttpProxyEnabled bool
---@field public HttpProxyURL string
---@field public IncomingReplicationLag double
---@field public PrintJoinSizeBreakdown bool
---@field public PrintPhysicsErrors bool
---@field public PrintStreamInstanceQuota bool
---@field public RandomizeJoinInstanceOrder bool
---@field public RenderStreamedRegions bool
---@field public ShowActiveAnimationAsset bool
---@field public TrackDataTypes bool
---@field public TrackPhysicsDetails bool
---NetworkSettings is a settings class that allow you to debug a lot of features
---with Roblox's server/client networking. It can be found in Roblox Studio's
---settings, under the **Network** tab.
---
local NetworkSettings;
---
NetworkSettings.EmulatedTotalMemoryInMB = nil;
---FreeMemoryMBytes is a read-only property that describes how much free
---memory is available, in MBs. It is stored as a floating point number, so
---it can be be read down at the level of available bytes by multiplying its
---value by `1024 * 1024`.
---
NetworkSettings.FreeMemoryMBytes = nil;
---
NetworkSettings.HttpProxyEnabled = nil;
---
NetworkSettings.HttpProxyURL = nil;
---Instruct the engine to simulate additional lag by delaying all incoming
---messages. Units are seconds.
---
NetworkSettings.IncomingReplicationLag = nil;
---Print diagnostic information to the Output window after connecting. The
---data will indicate the largest individual Instances sent, as well as
---aggregate data about data sent by Instance type. The data sent for initial
---loading is compressed so the contributions are approximate.
---
NetworkSettings.PrintJoinSizeBreakdown = nil;
---When set to true, debug messages will be printed into the output,
---pertaining to physics replication errors. Note that this property is
---intended for Roblox engineers who are debugging network replication. The
---following are debug outputs that are made available when this property is
---set to true.
---
---- `Physics-in old packet` prints if the PhysicsReceiver receives a
---  mechanism update packet for a part that has been updated ahead of the
---  packet's submission time. This happens if the packet is received late,
---  and a newer packet has already been processed.
---- `Physics-in of unidentified {GUID}` prints if the PhysicsReceiver cannot
---  find the part that is trying to be updated because the provided Instance
---  identifier was invalid, where `{GUID}` is the unknown
---  `Instance/GetDebugId` identifier that is supposed to be targeting the
---  part. This typically happens if a part is removed before the physics
---  update packet is received.
---- `Physics-in of part not in workspace {GUID}` prints if the
---  PhysicsReceiver receives a request to update the physics of a part that
---  is not a descendant of the Workspace, where `{GUID}` is the
---  `Instance/GetDebugId` identifier of the target part. This happens if the
---  part was just moved out of the Workspace, and was previously being
---  simulated.
---
NetworkSettings.PrintPhysicsErrors = nil;
---When set to true, debug information is printed to the output regarding the
---replication of instances when `Workspace/StreamingEnabled` is set to true.
---There are several debug outputs that are made available when this property
---is set to true, as listed below.
---
---Note that this property is intended for Roblox engineers who are debugging
---network replication. This documentation may become outdated in the future,
---as Roblox's network code is always changing behind the scenes.
---
---#### Streaming Capacity Update
---
---When the client's streaming capacity is updated, the following debug
---message will be printed:
---`clientInstanceQuota {1}, packet in queue {2}, predictedTotalInstanceProcessTime {3}, avgStreamDataReadTime {4}, avgInstancesPerStreamData {5}`
---
---**The numbers in curly braces are substituted, and can be described as:**
---
---- `{1}` – The id of the client instance quota.
---- `{2}` – The current number of incoming packets that have been queued.
---- `{3}` – A prediction for how long it will take to update the quota.
---- `{4}` – The current average time it takes to read the stream data.
---- `{5}` – The average number of instances in the stream data.
---
---#### Instance Quota Update
---
---When the client receives an instance quota update, the following debug
---message will be printed:
---`Received new client instance quota: {1}, max region radius: {2}`
---
---**The numbers in curly braces are substituted, and can be described as:**
---
---- `{1}` – The id of the client instance quota.
---- `{2}` – The maximum radius of space around the client's
---  `Player/ReplicationFocus` that can have physical instances streamed in.
---
NetworkSettings.PrintStreamInstanceQuota = nil;
---Emulate the behavior of a server that has been online a long time by
---randomizing the order that instances initially arrive on clients. It is
---recommended to keep this setting enabled to help discover potential bugs
---while testing in Studio.
---
NetworkSettings.RandomizeJoinInstanceOrder = nil;
---![RenderStreamedRegions in action!][1]
---
---When set to true, regions of space that are being streamed to the client
---will be outlined in red. This will only be shown if
---`Workspace/StreamingEnabled` is set to true.
---
---[1]: /assets/blte3c189bb8bdbf8e3/ShowStreamedRegions.png
---
NetworkSettings.RenderStreamedRegions = nil;
---When set to true, a label will be shown above each `Player`'s head,
---showing the current animation being played by the Player's `Humanoid`, if
---any.
---
NetworkSettings.ShowActiveAnimationAsset = nil;
---TrackDataTypes is a diagnostics property that, when set to true, tells the
---replicator stats to sample data about messages that are being sent.
---
NetworkSettings.TrackDataTypes = nil;
---TrackPhysicsDetails is a diagnostics property that, when set to true,
---tells the replicator stats to sample replication physics details.
---
NetworkSettings.TrackPhysicsDetails = nil;
---@class NoCollisionConstraint : Instance
---@field public Enabled bool
---@field public Part0 BasePart
---@field public Part1 BasePart
---The NoCollisionConstraint is an instance used to prevent collisions between
---two specific parts. Connected `BasePart|Parts` will have no collision reaction
---between them, but can still have collisions with the rest of the world. Both
---parts can still receive touch events.
---
---Using a NoCollisionConstraint allows you to create and share `Model|Models`
---with customized collision filtering. You can still achieve collision filtering
---with [Collision Groups][1], but you can't export that information to a model
---without adding a script to set them when the game runs.
---
---It also provides a quicker way to disable specific problematic collisions.
---However, if you are trying to spot a large number of parts from colliding with
---another, it might be better to use [Collision Groups][2].
---
---![NoCollisionConstraint Demo][3]
---
---The easiest way to add an NoCollisionConstraint is from the Create Constraint
---dropdown menu.
---
---![Creating a NoCollisionConstraint][4]
---
---Similar to other constraints, this tool will act differently based on how many
---parts are selected when the tool is activated.
---
---## No Parts Selected
---
---If no parts are selected when the NoCollisionConstraint tool is clicked, the
---next two parts that are clicked on will be connected. If the same part is
---clicked twice no link will be created.
---
---## One Part Selected
---
---If one part is selected when the NoCollisionConstraint tool is clicked, the
---next part that is clicked on will be connected to the selected part.
---
---## Two Parts Selected
---
---If two parts are selected when the NoCollisionConstraint tool is clicked, the
---two parts will be connected. You cannot create an NoCollisionConstraint with
---more than two parts selected.
---
---[1]: /building-and-visuals/physics/collision-filtering
---[2]: /building-and-visuals/physics/collision-filtering
---[3]: /assets/blt1bdbb753907c17e2/NoCollisionConstraintDemo-min.gif
---[4]: /assets/bltfc3e108f2decb90f/SettingNoCollisionConstraint-min.gif
---
local NoCollisionConstraint;
---This property determines whether the two constrained parts,
---`NoCollisionConstraint/Part0` and `NoCollisionConstraint/Part1`, will
---collide with each other.
---
NoCollisionConstraint.Enabled = nil;
---The second `BasePart|Part` that the constraint connects.
---
NoCollisionConstraint.Part0 = nil;
---The first `BasePart|Part` that the constraint connects.
---
NoCollisionConstraint.Part1 = nil;
---@class NonReplicatedCSGDictionaryService : FlyweightService, Instance
---A version of the `CSGDictionaryService` that does not replicate to clients.
---
local NonReplicatedCSGDictionaryService;
---@class NotificationService : Instance
---@field public IsLuaChatEnabled bool
---@field public IsLuaGameDetailsEnabled bool
---@field public SelectedTheme string
---@field public Roblox17sConnectionChanged RBXScriptSignal.Roblox17sConnectionChanged
---@field public Roblox17sEventReceived RBXScriptSignal.Roblox17sEventReceived
---@field public RobloxConnectionChanged RBXScriptSignal.RobloxConnectionChanged
---@field public RobloxEventReceived RBXScriptSignal.RobloxEventReceived
---An unfinished service that would allow you to schedule notifications.
---Currently goes unimplemented, and cannot be enabled.
---
local NotificationService;
---
NotificationService.IsLuaChatEnabled = nil;
---
NotificationService.IsLuaGameDetailsEnabled = nil;
---
NotificationService.SelectedTheme = nil;
---@param actionType AppShellActionType
---@return void
NotificationService.ActionEnabled = function(self, actionType) end;
---@param userId int64
---@param alertId int
---@param alertMsg string
---@param minutesToFire int
---@return void
---UNIMPLEMENTED
---
NotificationService.ScheduleNotification = function(self, userId, alertId, alertMsg, minutesToFire) end;
---@param userId int64
---@param alertId int
---@return void
---UNIMPLEMENTED
---
NotificationService.CancelNotification = function(self, userId, alertId) end;
---@param userId int64
---@return void
---UNIMPLEMENTED
---
NotificationService.CancelAllNotification = function(self, userId) end;
---@param userId int64
---@return Array
---UNIMPLEMENTED
---
NotificationService.GetScheduledNotifications = function(self, userId) end;
---@param appShellFeature AppShellFeature
---@return void
NotificationService.SwitchedToAppShellFeature = function(self, appShellFeature) end;
---@param actionType AppShellActionType
---@return void
NotificationService.ActionTaken = function(self, actionType) end;
---@class RBXScriptSignal.Roblox17sConnectionChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Roblox17sConnectionChanged, callback: fun(connectionName: string, connectionState: ConnectionState, namespaceSequenceNumbers: string)): RBXScriptConnection
---
NotificationService.Roblox17sConnectionChanged = nil;
---@class RBXScriptSignal.Roblox17sEventReceived : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Roblox17sEventReceived, callback: fun(eventData: Map)): RBXScriptConnection
---
NotificationService.Roblox17sEventReceived = nil;
---@class RBXScriptSignal.RobloxConnectionChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.RobloxConnectionChanged, callback: fun(connectionName: string, connectionState: ConnectionState, sequenceNumber: string, namespaceSequenceNumbers: string)): RBXScriptConnection
---
NotificationService.RobloxConnectionChanged = nil;
---@class RBXScriptSignal.RobloxEventReceived : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.RobloxEventReceived, callback: fun(eventData: Map)): RBXScriptConnection
---
NotificationService.RobloxEventReceived = nil;
---@class NumberPose : PoseBase, Instance
---@field public Value double
---A NumberPose holds the value applied to a specific FACS control. The control
---which is affected depends on the name of the NumberPose.
---
---NumberPoses are the building blocks of facial animation and, with `Keyframe`s,
---make up `KeyframeSequence`s.
---
---## NumberPoses and Facial Animation
---
---Although a NumberPose is assigned to a single FACS control by name, that
---control can in turn affect multiple bones of the face rig. FACS controls act
---as an abstraction layer between facial muscle movements and how they are
---defined in the rig.
---
---## NumberPose and hierarchy
---
---Contrary to `Pose` Instances, `NumberPose`s cannot be parented together.
---However, they all must be stored in a `Folder` named 'FaceControls' that is a
---child of the 'Head' `Pose`.
---
---## NumberPose value
---
---The Roblox animation system applies `NumberPose.Value`s to the corresponding
---FACS controls. Because those controls only respond to values between 0 and 1,
---the values calculated by the animation system are always clamped to that
---range.
---
local NumberPose;
---The value that will be applied to the FACS control corresponding with the
---`NumberPose`.
---
NumberPose.Value = nil;
---@class NumberValue : ValueBase, Instance
---@field public Value double
---@field public Changed RBXScriptSignal.Changed
---@field public changed RBXScriptSignal.changed
---A NumberValue is an object whose purpose is to store a single [Lua number][1],
---defined to be [double-precision floating point number][2], or more commonly
---known as a **double**. This stores a number in 64 bits (8 bytes) using the
---IEEE 754 representation (1 sign bit, 11 exponent bits and 52 fractional bits).
---The maximum numerical value that may be stored is 2^53, or
---9,007,199,254,740,992, and the minimum is -9,007,199,254,740,992. It stores up
---to 15 digits of precision.
---
---Like all "-Value" objects, this single value is stored in the Value property.
---The Changed event for this (and other objects like it) will fire with the new
---value being stored in the object, instead of a string representing the
---property being changed.
---
---[1]: https://www.lua.org/pil/2.3.html
---[2]: https://en.wikipedia.org/wiki/Double-precision_floating-point_format
---
local NumberValue;
---Used to hold a double value.
---
NumberValue.Value = nil;
---@class RBXScriptSignal.Changed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Changed, callback: fun(value: double)): RBXScriptConnection
---This event fires whenever the `NumberValue/Value` property is changed.
---
---This event, like other changed events, can be used to track when an
---NumberValue changes and to track the different values that it may change
---to.
---
---For instance, this even may be useful in games that rely on NumberValues
---to track game states and values, such as item IDs.
---
---Equivalent changed events exist for similar objects, such as `ObjectValue`
---and `StringValue`, depending on what object type best suits the need.
---
NumberValue.Changed = nil;
---@class RBXScriptSignal.changed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.changed, callback: fun(value: double)): RBXScriptConnection
---
NumberValue.changed = nil;
---@class ObjectValue : ValueBase, Instance
---@field public Value Instance
---@field public Changed RBXScriptSignal.Changed
---@field public changed RBXScriptSignal.changed
---A ObjectValue is an object whose purpose is to store a single reference to
---another object. If this object is duplicated within studio and the value
---refers to an object also being copied, then the new ObjectValue will point to
---the copied object instead of the original. Otherwise, the same value is kept.
---Copying and pasting this object will clear the value field.
---
---The value of this can be set within studio like other reference-type fields
---(such as `Modle/PrimaryPart`): click the field within the Properties window,
---then click the object you wish to set it to within the game view or Explorer
---window. You can clear the field (set it to `nil`) by clicking the X that
---appears when you click the field.
---
---Like all "-Value" objects, this single value is stored in the Value property.
---The Changed event for this (and other objects like it) will fire with the new
---value being stored in the object, instead of a string representing the
---property being changed.
---
local ObjectValue;
---Holds a reference to an instance.
---
ObjectValue.Value = nil;
---@class RBXScriptSignal.Changed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Changed, callback: fun(value: Instance)): RBXScriptConnection
---This event fires whenever the `ObjectValue/Value` property is changed. It
---will run with the new value being stored in the argument object, instead
---of a string representing the property being changed.
---
---This event, like other changed events, can be used to track when an
---ObjectValue changes and to track the different values that it may change
---to.
---
---For instance, this even may be useful in games that rely on ObjectValues
---to track game states and values, such as RPG targeting systems.
---
---Equivalent changed events exist for similar objects, such as `NumberValue`
---and `StringValue`, depending on what object type best suits the need.
---
ObjectValue.Changed = nil;
---@class RBXScriptSignal.changed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.changed, callback: fun(value: Instance)): RBXScriptConnection
---
ObjectValue.changed = nil;
---@class OrderedDataStore : GlobalDataStore, Instance
---A **OrderedDataStore** is essentially a `GlobalDataStore` with the exception
---that stored values must be **positive integers**. It exposes a method
---`OrderedDataStore/GetSortedAsync|GetSortedAsync()` which allows inspection of
---the entries in sorted order using a `DataStorePages` object.
---
---See [Data Stores](/scripting/data/data-stores) for an overview on using
---ordered data stores.
---
local OrderedDataStore;
---@param ascending bool
---@param pagesize int
---@param minValue Variant
---@param maxValue Variant
---@return Instance
---Returns a `DataStorePages` object. The sort order is determined by
---**ascending**, the length of each page by **pageSize**, and
---**minValue**/**maxValue** are optional parameters which filter the
---results.
---
---If this function throws an error, see
---[Data Stores](/scripting/data/data-stores) for descriptions of the error
---codes.
---
OrderedDataStore.GetSortedAsync = function(self, ascending, pagesize, minValue, maxValue) end;
---@class OutfitPages : Pages, Instance
local OutfitPages;
---@class PVAdornment : GuiBase3d, GuiBase, Instance
---@field public Adornee PVInstance
---The PVAdornment class is an abstract class of which the inheritors can be
---adorned to objects of the PVInstance class.
---
local PVAdornment;
---The <a href="/reference/engine/classes/PVInstance">PVInstance</a> the
---PVAdornment is attached to. An adornment will stay positioned and rotated
---relative to its adornee, even if the adornee moves.
---
PVAdornment.Adornee = nil;
---@class PVInstance : Instance
---@field public OriginOrientation Vector3
---@field public OriginPosition Vector3
---@field public PivotOffsetOrientation Vector3
---@field public PivotOffsetPosition Vector3
---A `PVInstance` ("Position Velocity Instance") is an abstract class that cannot
---be created. It is the base for all objects that have a physical location in
---the world, specifically `BasePart|BaseParts` and `Model|Models`.
---
local PVInstance;
---Editor-only property used to rotate the object around its pivot. Scripts
---must use `PVInstance/PivotTo` instead.
---
PVInstance.OriginOrientation = nil;
---Editor-only property used to move the object. Scripts must use
---`PVInstance/PivotTo` instead.
---
PVInstance.OriginPosition = nil;
---Editor-only property to set the orientation of the pivot relative to a
---part. Scripts must use `BasePart/PivotOffset` instead.
---
PVInstance.PivotOffsetOrientation = nil;
---Editor-only property to set the position of the pivot relative to a part.
---Scripts must use `BasePart/PivotOffset` instead.
---
PVInstance.PivotOffsetPosition = nil;
---@return CFrame
---This function gets the pivot of a `PVInstance`. This is often used with
---`PVInstance/PivotTo` to move a model.
---
---`Model|Models` and `BasePart|BaseParts` are both `PVInstance|PVInstances`
---("Position Velocity Instances") and so both have this function.
---
PVInstance.GetPivot = function(self) end;
---@param targetCFrame CFrame
---@return void
---Transforms the `PVInstance` along with all of its descendant
---`PVInstance|PVInstances` such that the pivot is now located at the
---specified `datatype/CFrame`. This is the primary function that should be
---used to move `Model|Models` via scripting.
---
---`BasePart|BaseParts` are moved in this way by having their
---`datatype/CFrame` transformed by the necessary offset. `Model|Models` are
---moved in this way by having their `Model/WorldPivot` transformed by the
---necessary offset.
---
---Note that for efficiency purposes, `Instance/Changed` events are not fired
---for `BasePart/Position|Position` and `BasePart/Orientation|Orientation` of
---`BasePart|BaseParts` moved in this way; they are only fired for
---`datatype/CFrame`.
---
---When calling `PVInstance/PivotTo|PivotTo` on `Model|Models`, the offsets
---of the descendant parts and models are cached, such that subsequent calls
---to `PVInstance/PivotTo|PivotTo` on the same model do not accumulate
---floating point drift between the parts making up the model.
---
---`Model|Models` and `BasePart|BaseParts` are both `PVInstance|PVInstances`
---("Position Velocity Instances") and so both have this function.
---
PVInstance.PivotTo = function(self, targetCFrame) end;
---@class PackageLink : Instance
---@field public AutoUpdate bool
---@field public Creator string
---@field public PackageAssetName string
---@field public PackageId Content
---@field public PermissionLevel PackagePermission
---@field public Status string
---@field public VersionNumber int64
---The purpose of the PackageLink object is to link a `DataModel` instance to a
---corresponding asset in the cloud. This improves flows for collaboration,
---version control and sharing for models. The PackageLink instance will be a
---child of the root of the entire package hierarchy.
---
---![PackageLink in Studio Explorer][1]
---
---In this case PackageLink designates `Model` to be the root of the Package
---hierarchy.
---
---They not creatable through `Script|scripts`. They can only be added through
---interaction with Studio and can only be parented to `Instance|Instances` that
---can be published independently of DataModel publish. The PackageLink instance
---will always be the first child shown in the tree view, regardless of sorting.
---
---[1]: /assets/blt1cb3d894c9e965ba/PackageLink.jpg
---
local PackageLink;
---When this property is set to true, the package associated with the given
---`PackageLink` will be automatically updated to the latest version. By
---default this property will be false upon creation of a package.
---
---This property would allows you to decide if a given package should be
---automatically updated to the latest version when entering a given place.
---The game will periodically check for new updates while a place is open.
---
PackageLink.AutoUpdate = nil;
---The creator of the package asset.
---
PackageLink.Creator = nil;
---The asset name of the package.
---
PackageLink.PackageAssetName = nil;
---The id of the asset this package corresponds to.
---
PackageLink.PackageId = nil;
---The package permission for the current Studio user.
---
PackageLink.PermissionLevel = nil;
---The status of the package. It can be one of the following statuses: Up To
---Date, Changed, New Version Available, Changed + New Version Available.
---
PackageLink.Status = nil;
---This property refers to a revision of a specific package
---
PackageLink.VersionNumber = nil;
---@class PackageService : Instance
local PackageService;
---@class PackageUIService : Instance
---@field public OnConvertToPackageResult RBXScriptSignal.OnConvertToPackageResult
---@field public OnOpenConvertToPackagePlugin RBXScriptSignal.OnOpenConvertToPackagePlugin
local PackageUIService;
---@param uploadUrl string
---@param cloneInstances Objects
---@param originalInstances Objects
---@return void
PackageUIService.ConvertToPackageUpload = function(self, uploadUrl, cloneInstances, originalInstances) end;
---@class RBXScriptSignal.OnConvertToPackageResult : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnConvertToPackageResult, callback: fun(isSuccessful: bool, errorMessage: string)): RBXScriptConnection
---
PackageUIService.OnConvertToPackageResult = nil;
---@class RBXScriptSignal.OnOpenConvertToPackagePlugin : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnOpenConvertToPackagePlugin, callback: fun(instances: Objects, name: string, cloneInstances: Objects)): RBXScriptConnection
---
PackageUIService.OnOpenConvertToPackagePlugin = nil;
---@class Pages : Instance
---@field public IsFinished bool
---An object which is essentially a table of pages, each of which is a sorted
---list of the key/value pairs. When each page contains a list of multiple items,
---this iterator function may be handy:
---
---```lua
---function iterPageItems(pages)
---	return coroutine.wrap(function()
---		local pagenum = 1
---		while true do
---			for _, item in ipairs(pages:GetCurrentPage()) do
---				coroutine.yield(item, pagenum)
---			end
---			if pages.IsFinished then
---				break
---			end
---			pages:AdvanceToNextPageAsync()
---			pagenum = pagenum + 1
---		end
---	end)
---end
---```
---
---Which can be used as
---
---```lua
---for item, pageNo in iterPageItems(myPageObject) do
---	-- look at item. Pages will advance automatically
---end
---```
---
local Pages;
---Whether or not the current page is the last page available.
---
Pages.IsFinished = nil;
---@return Array
---Returns the items on the current page. The keys in the item are determined
---by the source of this object.
---
Pages.GetCurrentPage = function(self) end;
---@return void
---Iterates to the next page in the pages object, if possible.
---
Pages.AdvanceToNextPageAsync = function(self) end;
---@class Pants : Clothing, CharacterAppearance, Instance
---@field public PantsTemplate Content
---<img src="/assets/blt4b8457e467710f8d/Pants.jpg" alt="A default rig wearing a very dapper pair of pants (rbxassetid://86896501)"  />
---The **Pants** object displays a Pants texture from the Roblox website on a
---`Humanoid` rig. Pants cover the torso and legs, and will be covered by a
---`Shirt` on the torso. To be visible, a Pants must be a sibling of a
---Humanoid and have its `Pants/PantsTemplate|PantsTemplate` property set to
---an appropriate texture (such as `rbxassetid://86896501`, pictured to the
---right). The pants texture may be colorized using the `Clothing/Color3`
---property.
---
---Pants are automatically loaded on `Player` characters if their avatar is
---wearing one.
---
---See also:
---
---- `Shirt`, an object which works similarly with the torso and arms
---- [Making Avatar Clothing][1], which goes into detail about creating Shirts
---  and Pants
---
---[1]:
---  https://developer.roblox.com/articles/How-to-Make-Shirts-and-Pants-for-Roblox-Characters
---
local Pants;
---Determines the texture of the `Pants`. The content ID link pointing to the
---pants template hosted on the Roblox website.
---
---#### How do I find the PantsTemplate?
---
---This content ID is different to the website URL of the pants. The content
---ID can be found by pasting the website URL of the pants into the
---PantsTemplate property in Roblox Studio, as studio will correct it.
---Alternatively `InsertService/LoadAsset` can be used to insert the pants
---into the workspace, for example:
---
---    local webURL = "https://www.roblox.com/catalog/1804739/Jeans"
---    local assetId = tonumber(string.match(webURL, "%d+") or 0) -- extract the number
---    local success, model = pcall(function()
---    	return game:GetService("InsertService"):LoadAsset(assetId)
---    end)
---    if success then
---    	model.Parent = workspace
---    end
---
---For a `Shirt` object's template, see `Shirt/ShirtTemplate`.
---
Pants.PantsTemplate = nil;
---@class ParabolaAdornment : PVAdornment, GuiBase3d, GuiBase, Instance
---@field public A float
---@field public B float
---@field public C float
---@field public Range float
---@field public Thickness float
---A special type of Adornment that is still a work in progress. This object can
---only be created by `CoreScript` at the moment.
---
local ParabolaAdornment;
---
ParabolaAdornment.A = nil;
---
ParabolaAdornment.B = nil;
---
ParabolaAdornment.C = nil;
---
ParabolaAdornment.Range = nil;
---
ParabolaAdornment.Thickness = nil;
---@param ignoreDescendentsTable Objects
---@return Tuple
ParabolaAdornment.FindPartOnParabola = function(self, ignoreDescendentsTable) end;
---@class Part : FormFactorPart, BasePart, PVInstance, Instance
---@field public Shape PartType
---## What is a Part
---
---The Part object is a physical object. When it is in the `Workspace`, it will
---move and interact with other Parts. It can have bonds formed with other Parts,
---so that the two Parts stay in the same relative position.
---
---Parts are the basic building blocks of any Roblox place. Commonly known as
---**bricks**, you'll see these the most often of any other objects as almost
---every place is built out of these. It is possible to stretch a Part to very
---large sizes and use them for baseplates, or make them very small and use them
---to create cool looking `Tool`.
---
---## How can I edit a Part
---
---The Part object can be edited using the various studio tools. It is available
---via either the insert menu, or the _Object Insert menu_. It can also be
---created using the function:
---
---```lua
---Instance.new("Part")
---```
---
---## How do I create different shaped Parts
---
---Using the Mesh objects, such as `SpecialMesh`, `BlockMesh`, or `CylinderMesh`
---objects you can change the shape of them. Using the `Decal` or `Texture`
---objects, you can place pictures on top of the bricks.
---
---## Changing Parts using scripts
---
---There are many scripting opportunities using the Part object. Many of the
---other scripting objects, such as `BodyForce` objects operate inside of a Part
---or other physics based objects. Editing the Part's properties through a script
---can result in a lot of fun opportunities.
---
local Part;
---The Shape property sets the type of shape the object has.
---
---The `Enum/PartType` enum controls the shape value, and has three possible
---shapes:
---
---| Shape/Value | Description                           |
---| ----------- | ------------------------------------- |
---| Ball        | A spherical shape, like a basketball. |
---| Cylinder    | A rod-like shape, like a tin can.     |
---| Block       | The default, brick shape.             |
---
---To obtain custom part shapes, you can use a `MeshPart` instead of a
---`Part`.
---
Part.Shape = nil;
---@class PartAdornment : GuiBase3d, GuiBase, Instance
---@field public Adornee BasePart
---An abstract class for GUI elements that are adorned to (displayed as attached
---to) objects deriving from `BasePart`.
---
local PartAdornment;
---Sets the object to adorn to.
---
PartAdornment.Adornee = nil;
---@class PartOperation : TriangleMeshPart, BasePart, PVInstance, Instance
---@field public RenderFidelity RenderFidelity
---@field public SmoothingAngle float
---@field public TriangleCount int
---@field public UsePartColor bool
---An abstract class that all parts based on
---[solid modeling](/building-and-visuals/modeling/solid-modeling) inherit from.
---
local PartOperation;
---
PartOperation.RenderFidelity = nil;
---This property represents an angle in degrees for a threshold value between
---face normals on a
---[solid modeled](/building-and-visuals/modeling/solid-modeling) part. If
---the normal difference is less than the value, normals will be adjusted to
---smooth the difference. Usually a value between 30 and 70 degrees will
---produce a good result. 0 degrees leads to sharp edges. Values between 90
---and 180 degrees are allowed but not encouraged, as it may cause a
---"shadowing" effect on unions with sharp edges.
---
---Note that smoothing will not affect the normals between different
---materials or different colors.
---
---<figure>
---<img src="/assets/blt53ff07ce0d5f1cf7/CSG-SmoothingAngle-0.png" />
---<figcaption>SmoothingAngle = 0</figcaption>
---</figure>
---<figure>
---<img src="/assets/bltc1f5f51600953267/CSG-SmoothingAngle-50.png" />
---<figcaption>SmoothingAngle = 50</figcaption>
---</figure>
---
PartOperation.SmoothingAngle = nil;
---The number of polygons in this solid model. This value will always be
---&lt;= 5000.
---
PartOperation.TriangleCount = nil;
---Sets whether the PartOperation can be recolored using the BrickColor
---property. When true, the entire Union will be colored as per
---`BasePart/BrickColor`. When false, the parts in the Union will maintain
---their original colors before the Union operation was performed.
---
PartOperation.UsePartColor = nil;
---@class PartOperationAsset : Instance
---An internal instance used to save/load
---<a href="/building-and-visuals/modeling/solid-modeling">solid models</a> onto
---the Roblox cloud.
---
local PartOperationAsset;
---@class ParticleEmitter : Instance
---@field public Acceleration Vector3
---@field public Brightness float
---@field public Color ColorSequence
---@field public Drag float
---@field public EmissionDirection NormalId
---@field public Enabled bool
---@field public FlipbookFramerate NumberRange
---@field public FlipbookIncompatible string
---@field public FlipbookLayout ParticleFlipbookLayout
---@field public FlipbookMode ParticleFlipbookMode
---@field public FlipbookStartRandom bool
---@field public Lifetime NumberRange
---@field public LightEmission float
---@field public LightInfluence float
---@field public LockedToPart bool
---@field public Orientation ParticleOrientation
---@field public Rate float
---@field public RotSpeed NumberRange
---@field public Rotation NumberRange
---@field public Shape ParticleEmitterShape
---@field public ShapeInOut ParticleEmitterShapeInOut
---@field public ShapePartial float
---@field public ShapeStyle ParticleEmitterShapeStyle
---@field public Size NumberSequence
---@field public Speed NumberRange
---@field public SpreadAngle Vector2
---@field public Squash NumberSequence
---@field public Texture Content
---@field public TimeScale float
---@field public Transparency NumberSequence
---@field public VelocityInheritance float
---@field public VelocitySpread float
---@field public ZOffset float
---A ParticleEmitter allows for the creation of [particle systems][1]. It is a
---special effect object that emits customizable 2D billboard particles into the
---world. On Roblox, a particle is a square 2D image, like a `BillboardGui` or
---`SurfaceGui` with an `ImageLabel`.
---
---To emit and render particles, a ParticleEmitter must be parented to a
---`BasePart` (such as a `Part`) or an `Attachment` within such a part. Particles
---are emit automatically when the emitter is `ParticleEmitter/Enabled|Enabled`
---with a non-zero `ParticleEmitter/Rate|Rate`, or manually when the
---`ParticleEmitter/Emit|Emit` method is called. The starting positions of
---particles are determined by the `ParticleEmitter/Shape|Shape` and
---`ParticleEmitter/ShapePartial|ShapePartial` properties as well as the parent
---`BasePart/Size`. By default, particles spawn randomly in the **bounding box**
---of the parent part, although this can be configured to be on a specific
---surface by the emitter's `ParticleEmitter/ShapeStyle|ShapeStyle` and
---`ParticleEmitter/EmissionDirection|EmissionDirection`. With a non-zero
---`ParticleEmitter/Speed|Speed`, particles are set in motion outwards and/or
---inwards, depending on the `ParticleEmitter/ShapeInOut|ShapeInOut` property.
---The direction can be randomized with
---`ParticleEmitter/SpreadAngle|SpreadAngle`. By default, particles face the
---camera, but the `ParticleEmitter/Orientation|Orientation` can be modified to
---respect the particle velocity instead.
---
---During the `ParticleEmitter/Lifetime|Lifetime` of the particles, they can
---change appearance according to the `ParticleEmitter/Color|Color` and
---`ParticleEmitter/Size|Size`. Their motion can change over time according to
---the `ParticleEmitter/Drag|Drag` and
---`ParticleEmitter/Acceleration|Acceleration` properties, and they can also move
---as their parent moves when they are
---`ParticleEmitter/LockedToPart|LockedToPart` or have a non-zero
---`ParticleEmitter/VelocityInheritance|VelocityInheritance`.
---
---Roblox provides several pre-made particle effect objects - `Fire`, `Smoke` and
---`Sparkles`. They behave similarly to a ParticleEmitter, but they are not as
---customizable. They also lack the particle-controlling methods
---(`ParticleEmitter/Emit|Emit` and `ParticleEmitter/Clear|Clear`). An
---`Explosion` also creates particles, but provides little-to-no control with
---regards to how the effect looks.
---
---See also:
---
---- To learn more about creating, using, and customizing particle emitters check
---  out [this][2] article
---
---[1]: https://en.wikipedia.org/wiki/Particle_system
---[2]: /building-and-visuals/lighting-and-effects/particle-emitters
---
local ParticleEmitter;
---The Acceleration property determines how particles `ParticleEmitter/Speed`
---changes over the particle's lifetime. It is defined using a
---`DataType/Vector3` to determine the acceleration on the global X/Y/Z axes.
---It is measured in studs per second squared. When changed, this property
---affects all particles emit by the emitter, both current and future
---particles.
---
---Pictured below are two default ParticleEmitters. The foreground (right)
---emitter has an Acceleration on the positive-X axis, causing the path of
---the particles to bend in that direction.
---![An image of two default ParticleEmitters, wherein the foreground emitter has a +X Acceleration][1]
---
---Acceleration will slow particles down if the vector points in the opposite
---`ParticleEmitter/EmissionDirection` in which particles are emitted.
---Otherwise, it will speed them up. You can use `ParticleEmitter/Drag` to
---slow particles down no matter what direction they travel.
---
---Acceleration is most often used to apply a gravity effect to particles
---(try a value of (0, -3, 0) for this). You can also use small values on the
---X/Z axes to make it look like particles are being blown away by wind. If
---you emit a bubble particle downwards, you could use an acceleration of (0,
---5, 0) to cause the bubbles to decelerate and then float back upwards.
---
---[1]: /assets/bltaeb3393ea3390868/ParticleEmitter_Acceleration.png
---
ParticleEmitter.Acceleration = nil;
---
ParticleEmitter.Brightness = nil;
---The Color property determines the color of all particles active in an
---emitter's system. The color is applied to the `ParticleEmitter/Texture`
---when rendering, and uses the texture alpha along with the
---`ParticleEmitter/Transparency`. If a particle has a
---`ParticleEmitter/LightEmission` of greater than 0, darker colors will make
---particles appear more transparent. Below, two default `ParticleEmitter`
---are pictured, except the right emitter uses a Color from yellow to cyan.
---
---![Two default ParticleEmitters, except the right has a Color from Yellow to Cyan][1]
---
---Note that the default `ParticleEmitter/Lifetime` is 5 to 10 seconds, so
---some particles next to each other have small variations in color due to
---the variations in individual particle lifetime.
---
---A particle's present color is determined by linearly interpolating on this
---ColorSequence using the particle's age and the particle's total lifetime.
---For example, if a particle spawned 2 seconds ago and has a 4 second
---lifetime, the color will be whatever is 50% of the way through the
---`DataType/ColorSequence`.
---
---Changing this property applies changes to all particles present in the
---system. This is because the color of a particle is determined using its
---present lifetime and this ColorSequence (the ColorSequence when the
---particle was emit is not stored on a per-particle basis).
---
---[1]: /assets/blt07a957ff7394b365/ParticleEmitter_Color.png
---
ParticleEmitter.Color = nil;
---The Drag property determines the rate in seconds at which individual
---particles will lose half their speed via exponential decay. Pictured below
---are two identical default ParticleEmitters, except that the right has a
---Drag value of 0.25.
---
---![Animation of drag on a ParticleEmitter][1]
---
---Drag is applied by scaling the expected velocity (from
---`ParticleEmitter/Speed` and any velocity inherited from the parent from
---`ParticleEmitter/VelocityInheritance`) by the following formula:
---`2 ^ (elapsedTime * -drag)`, where `elapsedTime` is the time since the
---particle was emit. Consequently, setting Drag to a negative value will
---cause particles' velocities to grow exponentially.
---
---Warning: if Drag is set to a sufficiently negative value, this can cause
---all particles emit by the emitter to completely disappear. Be careful when
---setting this property lower than -100.
---
---[1]: /assets/blt9a58d2b5746274de/ParticleEmitter_Drag.gif
---
ParticleEmitter.Drag = nil;
---The EmissionDirection property determines the face (`Enum/NormalId`) of
---the parent object towards which particles will be emit. By default, this
---is the top (+Y) direction. A negative `ParticleEmitter/Speed` will emit in
---the opposite direction. `ParticleEmitter/SpreadAngle` will further vary
---the emission direction. If a `ParticleEmitter` is added to an
---`Attachment`, which has a direction, the the Attachment itself can be
---rotated (`Attachment/Orientation`) instead of using this property. Below
---are pictured two ParticleEmitters which are otherwise the same, except the
---left has an EmissionDirection of Top (+Y, default) and the right uses
---Front (-Z).
---
---![Two identical ParticleEmitters except with differing EmissionDirection (left is Top, right is Front)][1]
---
---[1]: /assets/blt529991a1b0fa24f4/ParticleEmitter_EmissionDirection.png
---
ParticleEmitter.EmissionDirection = nil;
---The Enabled property determines whether a `ParticleEmitter` should emit
---partciles according to its `ParticleEmitter/Rate`. Setting Enabled to
---false will halt further particles from spawning; any existing particles
---will remain until they expire. This property is useful when you have a
---pre-made particle effect that you want to remain disabled until you need
---it to emit particles.
---
---If you want no particles to render, you should call
---`ParticleEmitter/Clear` to clear any existing particles. You can use
---`ParticleEmitter/Emit` on disabled `ParticleEmitter`s and they will still
---emit and render particles.
---
ParticleEmitter.Enabled = nil;
---
ParticleEmitter.FlipbookFramerate = nil;
---
ParticleEmitter.FlipbookIncompatible = nil;
---
ParticleEmitter.FlipbookLayout = nil;
---
ParticleEmitter.FlipbookMode = nil;
---
ParticleEmitter.FlipbookStartRandom = nil;
---The Lifetime property defines the maximum and minimum ages a newly emit
---particle will. When a particle is emit, a random lifetime is chosen
---uniformly. Lifetimes are stored on a per-particle basis, so if this value
---is changed, existing particles will stay "alive" until their randomly
---chosen lifetime is lived. The bounds for this property should be in the
---range [0, 20]. By default, `ParticleEmitter`s will have a lifetime of 5 to
---10 seconds. A lifetime of 0 will prevent particles from being emit in the
---first place.
---
---it is important to pick a sensible Lifetime and `ParticleEmitter/Rate` so
---that you don't have too many particles being rendered at once. Long
---lifetimes and high emission rates are a quick way to cause performance
---issues. If you need many particles, pick a balance of lifetime and rate.
---To instantly remove any presently emit particles (perhaps ones with
---absurdly long lifetimes), you can call `ParticleEmitter/Clear`.
---
ParticleEmitter.Lifetime = nil;
---The LightEmission property determines the blending of the
---`ParticleEmitter/Texture`'s colors with the colors behind them. It should
---be set on the range [0, 1]. A value of 0 uses normal blending modes, and a
---value of 1 will use additive blending. The value of the additive blending
---is determined by this property. When changed, this property instantly
---affects all particles owned by the emitter, both current and future
---particles.
---
---Pictured below are two default ParticleEmitters. The right one has its
---LightEmission set to 1, so the particles appear brighter due to the
---additive blending when they overlap.
---![Two default ParticleEmitters; the right one has a LightEmission of 1][1]
---
---When set to 1, only additive blending is used. As such, choosing a
---suitable `ParticleEmitter/Texture` is necessary. Below is an example
---texture that is suitable for such a ParticleEmitter.
---![A gray-scale image suitable as a particle Texture][2]
---
---This property should not be confused with
---`ParticleEmitter/LightInfluence`, which determines how particles are
---affected by environment light. This property does not cause particles to
---light the environment around them. To do that, consider using a
---`PointLight`.
---
---[1]: /assets/bltfaa542eee7781432/ParticleEmitter_LightEmission.png
---[2]: /assets/bltf793b94e42b0b6bf/aura.png
---
ParticleEmitter.LightEmission = nil;
---The LightInfluence property determines how much environment light affects
---the color of individual particles when they are rendered. It must be in
---the range [0, 1]; behavior of values outside of this range are not
---defined. At 0, particles are not influenced by light at all (they retain
---full brightness), and at 1 particles are fully influenced by light (in
---complete darkness, particles will be black).
---
---Pictured below are three default ParticleEmitters [at night][1] with
---varing LightInfluence. There is a `PointLight` with sufficient
---`PointLight/Brightness` and `PointLight/Range` to light the particles near
---to their parent parts. Take note of how each particle is affected by the
---lack of light close to the end of their lifetime.
---
---![Three default ParticleEmitters with varying LightInfluence values][2]
---
---By default, this value is 1 if inserted with Studio tools. If inserted
---using `Instance.new`, it is 0.
---
---[1]: https://www.youtube.com/watch?v=bLIVeQgS_pI
---[2]: /assets/blt0978dec6faf6d7ae/ParticleEmitter_LightInfluence.png
---
ParticleEmitter.LightInfluence = nil;
---The LockedToPart property determines if particles will "stick" to the
---emission source (the `Attachment` or `BasePart` to which the
---`ParticleEmitter` is parented).
---
---Below is an animation of two `Part|Parts` being moved simultaneously in
---Studio. Inside each is a default `ParticleEmitter`; the background/left
---emitter has LockedToPart enabled so the column of particles moves as the
---part is moved. Contrast with the foreground/right emitter particles which
---stay in their world position.
---![Moving two parts with default ParticleEmitters, the background emitter has LockedToPart enabled][1]
---
---Also consider using the `ParticleEmitter/VelocityInheritance` property set
---to 1, which may be more appropriate for some effects.
---
---[1]: /assets/bltdf5045209fff8b32/ParticleEmitter_LockedToPart.gif
---
ParticleEmitter.LockedToPart = nil;
---This property determines which orientation mode to use for an emitter's
---particle geometry:
---
---FaceCamera: standard camera facing billboard quad, default behavior.
---FaceCameraWorldUp: face the camera, but rotating only on the vertical
---world-up Y-axis. VelocityParallel: align particles parallel to the
---direction of their movement. VelocityPerpendicular: align particles
---perpendicular to the direction of their movement.
---
ParticleEmitter.Orientation = nil;
---The Rate property determines how many particles are `ParticleEmitter/Emit`
---emit per second while the `ParticleEmitter` is `ParticleEmitter/Enabled`.
---It is the inverse of frequency - a Rate of 5 means that a particle will be
---emit every `1/5 = 0.2` seconds. When changed, this property will have no
---affect on any already emit particles.
---
---it is important to pick a sensible `ParticleEmitter/Lifetime` and Rate so
---that you don't have too many particles being rendered at once. Long
---lifetimes and high emission rates are a quick way to cause performance
---issues. If you need many particles, pick a balance of lifetime and rate.
---To instantly remove any presently emit particles (perhaps ones with
---absurdly long lifetimes), you can call `ParticleEmitter/Clear`.
---
ParticleEmitter.Rate = nil;
---The RotSpeed property determines a random range of angular speeds that
---newly emit particles will have. A random angular speed is chosen upon
---emission, so changing this property will not affect already emit
---particles. This property, along with `ParticleEmitter/Rotation` affect the
---angle of the rendered particle image. This property is a
---`DataType/NumberRange` measured in degrees per second.
---
---Below is an animation of two default `ParticleEmitter`s. The right has a
---nonzero RotSpeed, so its particles rotate as they move through the world.
---![Two default ParticleEmitters; the right emitter has a RotSpeed applied][1]
---
---Using a spiral as a `ParticleEmitter/Texture` like the one below, you can
---create some quite interesting particle effects:
---![A swirl texture][2]![A portal effect using RotSpeed and a Swirl texture][3]
---
---Particles with very high angular speeds can appear to rotate slower or not
---at all - this is because the angle of rotation is synchronized with the
---software render speed. In other words, if the particle is rotating at
---exactly 360 degrees every frame, there will be no apparent change in
---rotation.
---
---[1]: /assets/bltfe2427c2a9f0f3ad/ParticleEmitter_RotSpeed.gif
---[2]: /assets/bltc50865c165e13d07/ParticleEmitter_RotSpeed2_swirl.gif
---[3]: /assets/blt6c03c8e2536b2634/ParticleEmitter_RotSpeed2.gif
---
ParticleEmitter.RotSpeed = nil;
---The Rotation property determines the angle at which new particles are
---emit. It is a `DataType/NumberRange` measured in degrees. Positive values
---are in the clockwise direction. This property is often set to [0, 360] to
---provide a completely random rotation to new particles.
---`ParticleEmitter/RotSpeed` also influences the rotation of a particle over
---its lifetime. Finally, this property is useful for correcting any
---`ParticleEmitter/Texture`s that aren't at the desired orientation.
---
---Pictured below are two default ParticleEmitters, except that the right has
---a Rotation of 22.5. Note how the particles on the left are straight up,
---and the right are tilted slightly.
---
---![Two default ParticleEmitters with varying Rotations][1]
---
---Changes to this value only affect new particles; existing particles will
---maintain the rotation at which they were originally emitted.
---
---[1]: /assets/bltb0b7b9f3f01688b2/ParticleEmitter_Rotation.png
---
ParticleEmitter.Rotation = nil;
---
ParticleEmitter.Shape = nil;
---
ParticleEmitter.ShapeInOut = nil;
---
ParticleEmitter.ShapePartial = nil;
---
ParticleEmitter.ShapeStyle = nil;
---The Size property determines the world size in studs of all active
---particles over their individual lifetimes. This property represents the
---dimensions of the square `ParticleEmitter/Texture` for each particle. It
---is a `DataType/NumberSequence` that works similar to
---`ParticleEmitter/Transparency` and `ParticleEmitter/Color`.
---
---Below is an animation of two default `ParticleEmitter` where the right one
---has a Size of 0 to 2. Note how the particles grow over their lifetime.
---![Animation of two default ParticleEmitters; the right one has a Size of 0 to 2][1]
---
---A particle's present size is determined by linearly interpolating on this
---NumberSequence using the particle's age and the particle's total lifetime.
---For example, if a particle spawned 2 seconds ago and has a 4 second
---lifetime, the size will be whatever is 50% of the way through the
---`DataType/NumberSequence`. For any `DataType/NumberSequenceKeypoint` with
---a nonzero envelop value, a random value in the envelop range is chosen for
---each keypoint for each particle when it spawns.
---
---Changing this property applies changes to all particles present in the
---system. This is because the size of a particle is determined using its
---present lifetime and this NumberSequence (the Size at the time the
---particle was emit is not stored on a per-particle basis).
---
---#### Design Note
---
---When designing particle effects, size is probably the most important of
---all properties. Too large or too subtle can ruin a particle effect! The
---first thing you should do is decide how you want particles to enter and
---exit view - fade in/out, or grow/shrink from size 0? The choice is yours -
---start with a size NumberSequence from 0 to 3 or the reverse and go from
---there.
---
---[1]: /assets/blt908c9ca9b5bddace/ParticleEmitter_Size.gif
---
ParticleEmitter.Size = nil;
---The Speed property determines the random range of velocities that newly
---emit particles may have. It is measured in studs per second using a
---`DataType/NumberRange`. The velocity is chosen upon emission, and is
---applied in the `ParticleEmitter/EmissionDirection`. Negative speed values
---will cause particles to travel in reverse.
---
---Below is an animation of two default `ParticleEmitter`s; the left has the
---default Speed of 5. The right one has the Speed range set to [20, 20], so
---its particles emit at a constant speed of 20.
---![Two default ParticleEmitters, the right has a speed of 20.][1]
---
---`ParticleEmitter/VelocityInheritance`, `ParticleEmitter/Acceleration` and
---`ParticleEmitter/Drag` will affect a particle's speed over its lifetime.
---Changing Speed will not affect already existing particles - they will
---retain whatever speed they have already.
---
---[1]: /assets/blte13fc189c250bd2b/ParticleEmitter_Speed.gif
---
ParticleEmitter.Speed = nil;
---The SpreadAngle property determines the random angles that a particle may
---be emit. On emission, a random angle is selected uniformly using the range
---defined by SpreadAngle. For example, if the
---`ParticleEmitter/EmissionDirection` is Top (+Y), then this
---`DataType/Vector2` describes the size of the random angle spread on the
---X/Z axes, in degrees. The particle is given a velocity based on the
---`ParticleEmitter/Speed` in the chosen direction.
---
---Below is an animation of two default ParticleEmitters. The foreground
---(closer) emitter has one of its SpreadAngle axes set to 90 degrees, so
---particles are emit randomly in an arc.
---![Two default ParticleEmitters. The foreground (closer) emitter has one axis of SpreadAngle set to 90 degrees][1]
---
---Setting one axis to 360 will cause particles to emit in all direction in a
---**circle**. Setting both to 360 will cause particles to emit in all
---directions in a **sphere**.
---
---[1]: /assets/blt05b793010052f4b7/ParticleEmitter_SpreadAngle.gif
---
ParticleEmitter.SpreadAngle = nil;
---
ParticleEmitter.Squash = nil;
---The Texture property determines the image rendered on particle billboards.
---The rendered image is influenced by `ParticleEmitter/Color`,
---`ParticleEmitter/Transparency`, `ParticleEmitter/LightInfluence`, and
---`ParticleEmitter/LightEmission`. Transparent textures work best for
---particles
---
---Pictured below are two default ParticleEmitters, but the right one uses
---the Robux icon as a texture.
---
---![Two default ParticleEmitters, except the right one uses the Robux icon][1]
---
---#### Example Textures
---
---The following texture is a transparent PNG image that works well as a
---Texture for a `ParticleEmitter`. Try uploading it as a decal to your
---account and using it in a ParticleEmitter's texture.
---![Pixel art of a gold coin][2]
---
---Below is an opaque gray-scale Texture that works nicely for particles with
---`ParticleEmitter/LightEmission` set to 1.
---![An example particle texture][3]
---
---[1]: /assets/blt15e439cb32a655c1/ParticleEmitter_Texture.png
---[2]: /assets/bltfe72f664112679bb/coin_01.png
---[3]: /assets/bltf793b94e42b0b6bf/aura.png
---
ParticleEmitter.Texture = nil;
---A value between 0-1 than controls the speed of the particle effect. At 1
---it runs at normal speed, at 0.5 it runs at half speed, and at 0 it freezes
---time.
---
ParticleEmitter.TimeScale = nil;
---The Transparency property determines the transparency of all active
---particles over their individual lifetimes. It works similar to
---`ParticleEmitter/Size` in how it affects particles over time. In terms of
---rendering, it works like the `BasePart/Transparency` of a part on a scale
---of 0 to 1, where 0 is completely visible (opaque), and a value of 1 is
---completely invisible (not rendered at all).
---
---Pictured below are two default `ParticleEmitter`s. The right emitter has a
---Transparency set to a `DataType/NumberSequence` that interpolates from 0
---to 1.
---![Two default ParticleEmitters; the right emitter Transparency fades over the lifetime of the particles][1]
---
---A particle's present transparency is determined by linearly interpolating
---on this NumberSequence using the particle's age and the particle's total
---lifetime. For example, if a particle spawned 2 seconds ago and has a 4
---second lifetime, the transparency will be whatever is 50% of the way
---through the `DataType/NumberSequence`. For any
---`DataType/NumberSequenceKeypoint` with a nonzero envelop value, a random
---value in the envelop range is chosen for each keypoint for each particle
---when it spawns.
---
---Changing this property applies changes to all particles present in the
---system. This is because the transparency of a particle is determined using
---its present lifetime and this `NumberSequence` (the Transparency at the
---time the particle was emit is not stored on a per-particle basis).
---
---[1]: /assets/blt7d318803556982ca/ParticleEmitter_Transparency.png
---
ParticleEmitter.Transparency = nil;
---The VelocityInheritance property determines how much of the parent part's
---`BasePart/Velocity` is inherited by particles when they are emitted. A
---value of 0 means that no velocity is inherited, and a value of 1 means the
---particle will have the exact same speed as the parent `BasePart`.
---
---Below is an animation of a `Part` moving back and forth. As it changes
---direction, the VelocityInheritance will toggle between 0 and 1. Note that
---when it is 1, the particles move with the part.
---![A part moving back and forth with VelocityInheritance toggling from 0 to 1][1]
---
---When used in conjunction with `ParticleEmitter/Drag`, a particle emitter
---can make appear to be "shedding" particles from a moving part.
---
---[1]: /assets/blt6b88061023429950/ParticleEmitter_VelocityInheritance.gif
---
ParticleEmitter.VelocityInheritance = nil;
---This property determines how offset a particle can be fired from the local
---emitter direction of its parent. When a particle is created its offset is
---picked randomly between 0 and VelocitySpread. This value is measured in
---degrees.
---
ParticleEmitter.VelocitySpread = nil;
---The ZOffset property determines the forward-backward (Z) render position
---of particles, in studs. they render at a modified `ParticleEmitter/Size`
---such that this property will not affect the screen size of particles. When
---changed, this property will affects all particles, both current and future
---particles. Note that this property accepts fractional values; it is not
---like `GuiObject/ZIndex` (an integer)
---
---Pictured below are three default ParticleEmitters with varying ZOffset
---values. The center is default, the left has +2 and the right has -2. Note
---how all the particles have the same apparent screen size.
---![Three default ParticleEmitters with varying ZOffset values][1]
---
---A practical use of ZOffset is for `ParticleEmitters` placed in players'
---characters: use it to define if particles should appear in front of or
---behind the character (use a value of +/- 2).
---
---![Two identical Roblox characters with ParticleEmitters in their head, with varying ZOffset values][2]
---
---Positive values will move particles closer to the camera, and negative
---values move particles away. Sufficiently negative values can cause
---particles to render inside or behind the parent part.
---
---[1]: /assets/blt216bd741511f3108/ParticleEmitter_ZOffset.png
---[2]: /assets/blt8b9262a841414c12/ParticleEmitter_ZOffset2.png
---
ParticleEmitter.ZOffset = nil;
---@param particleCount int
---@return void
---The Emit method will cause the `ParticleEmitter` to emit the given number
---of particles similar to how `ParticleEmitter/Rate` does on
---`ParticleEmitter/Enalbed` emitters. Be warned - this always emits exactly
---the number of particles even if Roblox' graphics settings are lower.
---Emitting too many particles can cause performance issues on lower-end
---hardware.
---
---To clear any emit particles, use `ParticleEmitter/Clear`.
---
ParticleEmitter.Emit = function(self, particleCount) end;
---@return void
---The Clear method will instantly destroy any existing particles that have
---been emit by the `ParticleEmitter` via its natural emission (nonzero
---`ParticleEmitter/Rate` on an `ParticleEmitter/Enabled` emitter) or via
---`ParticleEmitter/Emit`. It is not possible to clear individual particles -
---all are deleted at once.
---
---Sometimes it is desirable to clear particles before teleporting a
---character so that there are no lingering effects that might follow due to
---`ParticleEmitter/LockedToPart`.
---
ParticleEmitter.Clear = function(self) end;
---@class Path : Instance
---@field public Status PathStatus
---@field public Blocked RBXScriptSignal.Blocked
---@field public Unblocked RBXScriptSignal.Unblocked
---**Path** objects store the result of paths created by
---`PathfindingService/CreatePath|PathfindingService:CreatePath()`.
---
---Once a path object is created, you can call
---`Path/ComputeAsync|Path:ComputeAsync()` with a starting point and ending
---point. This will attempt to compute a valid path for a character to move
---along, based on default or custom parameters passed to
---`PathfindingService/CreatePath|CreatePath()`. If
---`Path/ComputeAsync|ComputeAsync()` successfully finds a path, the `Path`
---object will have a `Path/Status` value of `Enum.PathStatus.Success`. Otherwise
---the status will be `Enum.PathStatus.NoPath` which can occur if there are
---obstacles between the two points (and no way around) or if the points are
---inside of solid objects.
---
---In addition to `Path/ComputeAsync|ComputeAsync()`, `Path` objects have the
---`Path/GetWaypoints|GetWaypoints()` method which returns a list of waypoints
---representing the points a character should follow in sequence to get from the
---beginning to the end of the path.
---
---Finally, `Path` objects can be **connected** to the
---`Path/Blocked|Path.Blocked` event. This event will fire if, at any time during
---the path's existence, the path is blocked. Note that this can occur **behind**
---a character moving along the path, not just in front of it.
---
local Path;
---The success of the generated `Path`.
---
Path.Status = nil;
---@param start int
---@return int
---This function checks if a path is blocked starting at the waypoint
---indicated by **start**.
---
---It returns the first waypoint of occlusion if blocked, -1 if not. it
---returns an error if **start** is less than 0 or greater than the number of
---waypoints in the `Path`.
---
Path.CheckOcclusionAsync = function(self, start) end;
---@return Array
---This function returns an array of all the
---`DataType/PathWaypoint|PathWaypoints` in a `Path`, as computed by
---`Path/ComputeAsync`.
---
---Each waypoint in the array specifies a `DataType/Vector3` position and
---`Enum/PathWaypointAction|action` to take when this PathWaypoint is
---reached. The array is arranged in the order of waypoints from the path
---start to path end.
---
---If a path could not be computed, this function will return an empty array.
---
Path.GetWaypoints = function(self) end;
---@param start Vector3
---@param finish Vector3
---@return void
---This function computes a `Path` from a start position to an end position.
---This function is not automatically called when a path is created and must
---be invoked each time the path needs to be updated.
---
---Once the Path is computed, it will have a series of waypoints that, when
---followed, can lead a character along the path. These points are gathered
---with the `Path/GetWaypoints` function.
---
Path.ComputeAsync = function(self, start, finish) end;
---@return Array
---This function returns a table of `Path` instances.
---
Path.GetPointCoordinates = function(self) end;
---@class RBXScriptSignal.Blocked : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Blocked, callback: fun(blockedWaypointIdx: int)): RBXScriptConnection
---
Path.Blocked = nil;
---@class RBXScriptSignal.Unblocked : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Unblocked, callback: fun(unblockedWaypointIdx: int)): RBXScriptConnection
---
Path.Unblocked = nil;
---@class PathfindingLink : Instance
---@field public Attachment0 Attachment
---@field public Attachment1 Attachment
---@field public IsBidirectional bool
---@field public Label string
---**Beta Feature** This class is currently a part of the PathfindingLink beta
---feature. Eligible developers must enable the feature within Studio and
---functionality may change.
---
---The code block below constructs a `PathfindingLink`:
---
---```lua
---local link = Instance.new("PathfindingLink", myModel)
---link.Attachment0 = … -- starting point of the link
---link.Attachment1 = … -- end point of the link
---link.Bidirectional = false
---link.Label = "Boat"
---```
---
local PathfindingLink;
---The originating attachment of the link.
---
PathfindingLink.Attachment0 = nil;
---The landing attachment of the link.
---
PathfindingLink.Attachment1 = nil;
---Enables a path to traverse a link in both directions. The default value is
---`true`.
---
PathfindingLink.IsBidirectional = nil;
---A classifying string to add additional information about the link. This
---Label is included in the waypoint generated by this link.
---
PathfindingLink.Label = nil;
---@class PathfindingModifier : Instance
---@field public Label string
---@field public PassThrough bool
---Pathfinding modifiers can be used to represent space that has a higher or
---lower cost to be traversed. When added as a child to a `Part`, it takes that
---Part's volume to annotate areas of the navmesh that are inside and on top of
---it.
---
---You can include pathfinding modifiers in the `PathfindingService/CreatePath`
---parameters and compute smarter paths across various materials or around
---defined regions.
---
---Note that when adding a `PathfindingModifier` to a part, **either**:
---
---- The part is `BasePart/CanCollide|collidable` and we are interested in
---  modifying pathfinding costs of paths on top of this part, which we call
---  **area**.
---- The part is `BasePart/CanCollide|non-collidable` (and usually invisible in
---  game) and we are interested in modifying pathfinding costs of paths inside
---  the part, which we call **volume**.
---
local PathfindingModifier;
---**Beta Feature**
---
---This class is currently a part of the PathfindingModifier beta feature.
---Eligible developers must enable the feature within Studio and
---functionality may change.
---
---For a more detailed overview of the `PathfindingService` and
---PathfindingModifiers, you can take a look at the
---<a href="https://developer.roblox.com/articles/Pathfinding">Pathfinding</a>
---article.
---
---The name of the navigation area inside or on top of the `Part|Part's`
---volume.
---
PathfindingModifier.Label = nil;
---Determines if the parts enclosed by the modifier are traversable, even if
---they would normally be collided with. See
---<a href="https://developer.roblox.com/articles/Pathfinding#ignoring-obstacles">Ignoring
---Obstacles</a> for details.
---
PathfindingModifier.PassThrough = nil;
---@class PathfindingService : Instance
---@field public EmptyCutoff float
---**PathfindingService** is used to find paths between two points. These paths
---make sure that characters can move between the points without running into
---walls or other obstacles. Paths can be used for both player-controlled
---characters and non-player characters.
---
---This service has one function, `PathfindingService/CreatePath|CreatePath()`,
---which creates a `Path` object based on various parameters.
---
---## Navigation Mesh
---
---**PathfindingService** generates a "navigation mesh" over all parts in a place
---while the game is running. Any path that is created with the service will stay
---within the mesh. If the geometry of the place changes &mdash; for example, if
---a part is created or a part moves &mdash; the navigation mesh will be
---recalculated.
---
---To see the navigation mesh for a place:
---
---1. Open the place in Studio.
---2. Navigate to **File** &rarr; **Settings...**.
---3. In the **Studio** tab, under **Visualization**, toggle on the **Show
---   Navigation Mesh** setting. The mesh will then show up in the 3D view.
---
---The purple areas show where a character can walk, while the non-colored areas
---are considered blocked. Studio also displays arrows on top of the mesh which
---show where a character would have to **jump** to reach one part of the mesh
---from another.
---
---<img src="/assets/blt1e4f3f08b0e04301/NavigationMesh.jpg" />
---
local PathfindingService;
---This function worked with the legacy pathfinding system. The pathfinding
---system currently uses a navigation grid and the EmptyCutoff is unused.
---
---When the `PathfindingService|PathfindingService` computes a path using
---`PathfindingService/ComputeRawPathAsync` or
---`PathfindingService/ComputeRawPathAsync` it uses the voxel representation
---of the world. A voxel is one cube in a grid overlayed on the world. In
---this case the voxels being used are 4x4x4. This property sets the percent
---of a voxel has to be occupied to be considered empty. Defaults to 0.16.
---
PathfindingService.EmptyCutoff = nil;
---@param start Vector3
---@param finish Vector3
---@param maxDistance float
---@return Instance
---This function computes and returns a smooth `Path` between two
---`DataType/Vector3|Vector3s`. This function fulfills the same purpose as
---`PathfindingService/ComputeRawPathAsync`, but creates a much smoother path
---for an NPC to follow in comparison.
---
PathfindingService.ComputeSmoothPathAsync = function(self, start, finish, maxDistance) end;
---@param start Vector3
---@param finish Vector3
---@return Instance
---This function is used to find a `Path` between two provided points. This
---path uses the navigation grid created by `PathfindingService` and makes
---sure that the path can be followed by a regular-sized Roblox character.
---
---This function returns a `Path` object which contains the coordinates of
---the path. If no path is found between the two points, this function will
---still return a `Path` object, but that object's `Path/Status` will be
---`Enum.PathStatus.NoPath`.
---
---To get the waypoints of a `Path` object, you can use the
---`Path/GetWaypoints` function.
---
PathfindingService.FindPathAsync = function(self, start, finish) end;
---@param agentParameters Dictionary
---@return Instance
---Creates a `Path` object based on various agent parameters (see below).
---
---#### Agent parameters
---
---<table>
---    <thead>
---        <tr>
---            <th>Key</th>
---            <th>Type</th>
---            <th>Default</th>
---            <th>Description</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td><b>AgentRadius</b></td>
---            <td>integer</td>
---            <td>2</td>
---            <td>Determines the minimum amount of horizontal space required for empty space to be considered traversable.</td>
---        </tr>
---        <tr>
---            <td><b>AgentHeight</b></td>
---            <td>integer</td>
---            <td>5</td>
---            <td>Determines the minimum amount of vertical space required for empty space to be considered traversable.</td>
---        </tr>
---        <tr>
---            <td><b>AgentCanJump</b></td>
---            <td>boolean</td>
---            <td>true</td>
---            <td>Determines whether off-mesh links for jumping are allowed.</td>
---        </tr>
---        <tr>
---            <td><b>WaypointSpacing</b></td>
---            <td>number</td>
---            <td>4</td>
---            <td>Determines the spacing between intermediate waypoints in path.</td>
---        </tr>
---        <tr>
---            <td><b>Costs</b></td>
---            <td>table</td>
---            <td>{}</td>
---            <td>Table of materials or defined <code>PathfindingModifier|PathfindingModifiers</code> and their "cost" for traversal. Useful for making the agent prefer certain materials/regions over others.</td>
---        </tr>
---    </tbody>
---</table>
---
---#### Pathfinding Costs
---
---By default, all walkable (navmesh) areas have a pathfinding cost of 1.0
---(jumps have a cost of 4.0), which is exactly how pathfinding worked before
---the introduction of `PathfindingModifier|PathfindingModifiers`.
---
---Since not all characters have the same movement abilities or constraints,
---it is desirable to provide a way to customize them. For example, a regular
---car always wants to avoid water, while an amphibian vehicle might not have
---such restriction.
---
---To assign different pathfinding costs to different named areas/volumes
---and/or materials, for a particular AI character (including the player
---character in the Click to Move mode), just add an optional parameter
---`Costs` of type dictionary to CreatePath(.). It maps Pathfinding Modifier
---areas/volumes and materials to their pathfinding costs. For example:
---
---```lua
---local path = PathfindingService:CreatePath{
---    AgentRadius = agentRadius,
---    AgentHeight = agentHeight,
---    AgentCanJump = agentCanJump,
---
---    -- New parameter --
---    Costs = {
---        Grass = 10
---    }
---}
---```
---
PathfindingService.CreatePath = function(self, agentParameters) end;
---@param start Vector3
---@param finish Vector3
---@param maxDistance float
---@return Instance
---This function computes and returns a `Path` between two
---`DataType/Vector3|Vector3s`. If the given MaxDistance is greater than 512,
---an error will be thrown. (MaxDistance is too large).
---
PathfindingService.ComputeRawPathAsync = function(self, start, finish, maxDistance) end;
---@class PausedState : Instance
---@field public AllThreadsPaused bool
---@field public Reason DebuggerPauseReason
---@field public ThreadId int
local PausedState;
---
PausedState.AllThreadsPaused = nil;
---
PausedState.Reason = nil;
---
PausedState.ThreadId = nil;
---@class PausedStateBreakpoint : PausedState, Instance
---@field public Breakpoint Breakpoint
local PausedStateBreakpoint;
---
PausedStateBreakpoint.Breakpoint = nil;
---@class PausedStateException : PausedState, Instance
---@field public ExceptionText string
local PausedStateException;
---
PausedStateException.ExceptionText = nil;
---@class PermissionsService : Instance
local PermissionsService;
---@return bool
PermissionsService.GetIsThirdPartyPurchaseAllowed = function(self) end;
---@return bool
PermissionsService.GetIsThirdPartyTeleportAllowed = function(self) end;
---@return bool
PermissionsService.GetIsThirdPartyAssetAllowed = function(self) end;
---@param assetId string
---@param permissions Array
---@return void
PermissionsService.SetPermissions = function(self, assetId, permissions) end;
---@param assetId string
---@return Array
PermissionsService.GetPermissions = function(self, assetId) end;
---@class PhysicsService : Instance
---PhysicsService is a game service that has functions for working with
---**collision groups**, which define a set of parts that may or may not collide
---with parts assigned to other collision groups. Assign a part to a collision
---group using `PhysicsService/SetPartCollisionGroup|SetPartCollisionGroup`.
---Collision groups and their relationships are saved to and loaded from file.
---
---## Network Replication
---
---Creating, deleting and modifying collision relationships between collision
---groups is limited to server-side `Script`s. However, client-side
---`LocalScript`s may only set individual parts' associated collision group.
---
local PhysicsService;
---@param name1 string
---@param name2 string
---@param collidable bool
---@return void
---Sets the collision status between two groups. This function will throw an
---error if either of the groups do not exist.
---
PhysicsService.CollisionGroupSetCollidable = function(self, name1, name2, collidable) end;
---@param name string
---@return int
---Creates a new collision group with the given name, and returns the id of
---the created group.
---
PhysicsService.CreateCollisionGroup = function(self, name) end;
---@param part BasePart
---@param target CFrame
---@param translateStiffness float
---@param rotateStiffness float
---@return void
PhysicsService.LocalIkSolve = function(self, part, target, translateStiffness, rotateStiffness) end;
---@param part BasePart
---@param name string
---@return void
---The SetPartCollisionGroup function sets the collision group of the
---specified part to the group with the specified name.
---
---This function is equivalent to setting the `BasePart/CollisionGroupId`,
---although this function is the recommended method of configuring a part's
---collision group.
---
---Note that for a part to respect its collision filter setting it must have
---its `BasePart/CanCollide` property set to true.
---
---This function will throw a runtime error in the following circumstances:
---
---- The part parameter is not a `BasePart` instance.
---- The specified group does not exist.
---
PhysicsService.SetPartCollisionGroup = function(self, part, name) end;
---@param from string
---@param to string
---@return void
---Renames the specified collision group. The first argument of this function
---is the name of the group to rename, the second argument is the new name
---for the group. If the specified group does not exist, then this function
---will not do anything. The naming conventions for the new name follow the
---same rules as if the group was being created with
---`PhysicsService/CreateCollisionGroup`. The new name cannot be “Default”,
---and it cannot contain the special characters “/” or “^”. This function
---will throw a runtime error in the following circumstances:
---
---- Invalid or empty name provided for either argument.
---- The function is called from a client.
---
PhysicsService.RenameCollisionGroup = function(self, from, to) end;
---@return int
---Returns the maximum number of collision groups the engine supports. This
---value is currently 32.
---
PhysicsService.GetMaxCollisionGroups = function(self) end;
---@param name string
---@param part BasePart
---@return bool
---Returns whether the specified part is in the specified collision group.
---This function will throw a runtime error in the following circumstances:
---
---- The specified group does not exist.
---- The specified part is not a BasePart.
---
PhysicsService.CollisionGroupContainsPart = function(self, name, part) end;
---@param name string
---@return int
---The GetCollisionGroupId function returns the id of the collision group
---with the specified name.
---
---This function will throw an error if no group with the given name exists.
---
PhysicsService.GetCollisionGroupId = function(self, name) end;
---@param part BasePart
---@param target CFrame
---@param translateStiffness float
---@param rotateStiffness float
---@return void
PhysicsService.IkSolve = function(self, part, target, translateStiffness, rotateStiffness) end;
---@param name string
---@return void
---Removes the collision group with the given name. If an invalid name is
---provided the function will not do anything, although if the reserved name
---“Default” is provided then the function will throw an error. If there are
---any parts in the collision group when it is removed, these parts will
---still maintain the same collision group id. The physical behavior of parts
---in a removed group is undefined, so it is recommended to move any parts in
---a removed group to another group (such as the Default group). This
---function will throw a runtime error in the following circumstances:
---
---- The name “Default” is provided.
---- The function is called from a client.
---
PhysicsService.RemoveCollisionGroup = function(self, name) end;
---@param name int
---@return string
---Returns the name of the collision group with the corresponding id. This
---function will return nil if the group with the corresponding id has not
---been named. This function will throw an error if the id is not in the
---range of 0 &lt;= id &lt; maxCollisionGroups
---
PhysicsService.GetCollisionGroupName = function(self, name) end;
---@return Array
---Returns a table with info on all of the place's collision groups. Each
---value in this table is itself a table and contains 3 members:
---
---<table>
---  <thead>
---    <tr>
---      <th>Member</th>
---      <th>Type</th>
---      <th>Description</th>
---    </tr>
---  </thead>
---  <tbody>
---    <tr>
---      <td><b>id</b></td>
---      <td>integer</td>
---      <td>The ID of the group</td>
---    </tr>
---    <tr>
---      <td><b>mask</b></td>
---      <td>integer</td>
---      <td>The mask of the group (for internal use)</td>
---    </tr>
---    <tr>
---      <td><b>name</b></td>
---      <td>string</td>
---      <td>The name of the group</td>
---    </tr>
---  </tbody>
---</table>
---
PhysicsService.GetCollisionGroups = function(self) end;
---@param name1 string
---@param name2 string
---@return bool
---Returns whether the two specified collision groups will collide. This
---function will throw an error if either of the groups do not exist.
---
PhysicsService.CollisionGroupsAreCollidable = function(self, name1, name2) end;
---@class PhysicsSettings : Instance
---@field public AllowSleep bool
---@field public AreAnchorsShown bool
---@field public AreAssembliesShown bool
---@field public AreAwakePartsHighlighted bool
---@field public AreBodyTypesShown bool
---@field public AreContactIslandsShown bool
---@field public AreContactPointsShown bool
---@field public AreJointCoordinatesShown bool
---@field public AreMechanismsShown bool
---@field public AreModelCoordsShown bool
---@field public AreOwnersShown bool
---@field public ArePartCoordsShown bool
---@field public AreRegionsShown bool
---@field public AreTerrainReplicationRegionsShown bool
---@field public AreTimestepsShown bool
---@field public AreUnalignedPartsShown bool
---@field public AreWorldCoordsShown bool
---@field public DisableCSGv2 bool
---@field public ForceCSGv2 bool
---@field public IsInterpolationThrottleShown bool
---@field public IsReceiveAgeShown bool
---@field public IsTreeShown bool
---@field public PhysicsEnvironmentalThrottle EnviromentalPhysicsThrottle
---@field public ShowDecompositionGeometry bool
---@field public ThrottleAdjustTime double
---@field public UseCSGv2 bool
---The PhysicsSettings is a singleton class, which lets developers view debugging
---features in Roblox's physics engine.It can be found under the Physics tab in
---Roblox Studio's settings menu.
---
local PhysicsSettings;
---When set to true, physically simulated objects will stop being simulated
---if they have little to no motion for a set period of time.
---
PhysicsSettings.AllowSleep = nil;
---When set to true, parts that are `BasePart/Anchored` will show a gray
---surface outline on the surface of the part's bounding box that is
---currently facing the ground.
---
PhysicsSettings.AreAnchorsShown = nil;
---When set to true, each physics assembly is assigned a unique color and the
---`Part` associated with the assembly are outlined with the color. Parts
---that are attached together by `JointInstance` will share the same color.
---
PhysicsSettings.AreAssembliesShown = nil;
---When set to true, parts that are actively being physically simulated will
---have a red outline.
---
PhysicsSettings.AreAwakePartsHighlighted = nil;
---When set to true, `Part` will be outlined with a specific color, depending
---on the state of its root simulation body.
---
---#### Body Types
---
---<table>
---	<tbody><tr>
---		<th width="50">Color</th>
---		<th>Body Type</th>
---		<th>Description</th>
---	</tr>
---	<tr>
---		<td bgcolor="#FF0000"></td>
---		<td>Real Time Body</td>
---		<td>Physics Body that is always simulated in real time, and is never throttled. Used for Humanoids.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#00FF00"></td>
---		<td>Free Fall Body</td>
---		<td>Physics Body that is freely moving with no physical contact.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#0000FF"></td>
---		<td>Joint Body</td>
---		<td>Physics Body that is being influenced by a physically simulated joint, such as a Motor or a Hinge.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#FFFF00"></td>
---		<td>Contact Body</td>
---		<td>Physics Body that is in contact with another physics body.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#FF7700"></td>
---		<td>Symmetric Contact Body</td>
---		<td>Physics Body that is experiencing a torquing force, while in contact with another body.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#777700"></td>
---		<td>Vertical Contact Body</td>
---		<td>Physics Body that is moving very little along the Y plane, while in contact with another body.</td>
---	</tr>
---</tbody></table>
---
PhysicsSettings.AreBodyTypesShown = nil;
---When set to true, each contact island will render `SelectionBox` adorns on
---the parts in contact islands, where each contact island is assigned a
---random color.
---
PhysicsSettings.AreContactIslandsShown = nil;
---When set to true, sphere adorns will be drawn at the contact points of
---each part where physics interactions are occurring. Each sphere also has
---an arrow drawn in 3D, facing the surface that the contact point is
---detecting.
---
---#### Solver Variations
---
---The behavior of this property varies depending on whether Roblox's physics
---engine is using the `PGS Physics Solver`, or the `Spring Physics Solver`.
---
---This is controlled by the `Workspace`'s
---`Workspace/PGSPhysicsSolverEnabled` property.
---
---##### Spring Physics Solver
---
---When `Workspace/PGSPhysicsSolverEnabled` is set to false, the contact
---points are color coded as listed below. The length of the arrow extruding
---from the sphere depends on how much force the contact point is exerting,
---and what the contact type is.
---
---<table>
---	<tbody><tr>
---		<th width="50">Color</th>
---		<th width="200">Contact Type</th>
---		<th>Description</th>
---	</tr>
---	<tr>
---		<td bgcolor="#CCCC00"></td>
---		<td>Normal Contact</td>
---		<td>Contact point with no special conditions.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#656500"></td>
---		<td>Resting Contact</td>
---		<td>Contact point that has been active for at least 4 frames.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#CC0000"></td>
---		<td>Second Pass Contact</td>
---		<td>Contact point that was made by a kernel joint going through a second pass. Rarely seen.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#CC6500"></td>
---		<td>Real Time Contact</td>
---		<td>Contact point that was made with a real-time physics body. This applies to tripped `Humanoid`.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#0000CC"></td>
---		<td>Joint Contact</td>
---		<td>Contact point that was made under the context of a physically simulated joint. This applies to Motors and Hinges.</td>
---	</tr>
---</tbody></table>
---<b>PGS Physics Solver</b>
---
---When `Workspace/PGSPhysicsSolverEnabled` is set to true, the contact
---points are always colored **RED**, and the length of the arrow will always
---be 1 stud. There are no special conditions tracked, because the PGS solver
---does not keep specific lookup tables for the states listed in the Spring
---Solver.
---
---<table>
---	<tbody><tr>
---		<th width="50">Color</th>
---		<th width="200">Contact Type</th>
---		<th>Description</th>
---	</tr>
---	<tr>
---		<td bgcolor="#CC0000"></td>
---		<td>Normal Contact</td>
---		<td>Contact point with no special conditions.</td>
---	</tr>
---</tbody></table>
---
PhysicsSettings.AreContactPointsShown = nil;
---When set to true, XYZ axes are rendered at the `BasePart/CFrame` of every
---part.
---
PhysicsSettings.AreJointCoordinatesShown = nil;
---When set to true, every individual mechanism of parts is given a unique
---color.
---
PhysicsSettings.AreMechanismsShown = nil;
---An ancient property that hasn't work correctly since late 2007. It's
---supposed to render an XYZ axis on the root part of a `Model`, but the axis
---rendering component doesn't work correctly.
---
PhysicsSettings.AreModelCoordsShown = nil;
---When set to true, each `Player`'s character is outlined with a unique
---color, and each part that the player has network ownership over is
---outlined with the same color.
---
PhysicsSettings.AreOwnersShown = nil;
---An ancient property that hasn't worked correctly since late 2007. It's
---supposed to render a large XYZ axis in the center of each `BasePart`, but
---the axis rendering component doesn't work correctly.
---
PhysicsSettings.ArePartCoordsShown = nil;
---When set to true, a cylinder is drawn around each `Player`'s character,
---representing their `Player/SimulationRadius`. Each physically simulated
---object will check to see which player is closest to that object, and if
---they are within the player's simulation radius. If both conditions are
---met, that player will becomes the network owner of that object.
---
PhysicsSettings.AreRegionsShown = nil;
---
PhysicsSettings.AreTerrainReplicationRegionsShown = nil;
---
PhysicsSettings.AreTimestepsShown = nil;
---When set to true, parts that aren't aligned on the 1x1x1 grid will be
---outlined yellow.
---
PhysicsSettings.AreUnalignedPartsShown = nil;
---An ancient property that hasn't worked correctly since late 2007. It's
---supposed to render a large XYZ axis in the center of the world, but the
---axis rendering component doesn't work correctly.
---
PhysicsSettings.AreWorldCoordsShown = nil;
---When set to true, Roblox will fall back to using its legacy CSG solver
---when performing solid model operations.
---
PhysicsSettings.DisableCSGv2 = nil;
---
PhysicsSettings.ForceCSGv2 = nil;
---
PhysicsSettings.IsInterpolationThrottleShown = nil;
---This property is supposed to show the `BasePart/ReceiveAge` of a part, but
---it does not work correctly.
---
PhysicsSettings.IsReceiveAgeShown = nil;
---When set to true, the joint connections of each part, and the states of
---their underlying primitive components are visualized as a spanning tree.
---
---##### Spanning Tree Table
---
---There are several visualizations made available when this property is set
---to true:
---
---<table>
---	<tbody><tr>
---		<th width="50">Color</th>
---		<th width="125">Adorn Type</th>
---		<th>Description</th>
---	</tr>
---	<tr>
---		<td bgcolor="#FF0000"></td>
---		<td>Box</td>
---		<td>Root Primitive of a Mechanism that is currently anchored, or connected to an anchored primitive. (See: `BasePart/IsGrounded`)</td>
---	</tr>
---	<tr>
---		<td bgcolor="#FF7F00"></td>
---		<td>Box</td>
---		<td>Root Primitive of a Mechanism that is free to be physically simulated.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#0000FF"></td>
---		<td>Box</td>
---		<td>Root Primitive of a Mechanism that has moving components.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#CCCC00"></td>
---		<td>Sphere</td>
---		<td>Root Primitive of an Assembly.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#FF7F00"></td>
---		<td>Cylinder</td>
---		<td>Root Primitive of a Clump.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#B2B2B2"></td>
---		<td>Line</td>
---		<td>Connection between two Primitives that share the same Assembly and Clump.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#0000FF"></td>
---		<td>Line</td>
---		<td>Connection between two Primitives that share the same Assembly.</td>
---	</tr>
---	<tr>
---		<td bgcolor="#29D0D0"></td>
---		<td>Line</td>
---		<td>Connection between two Primitives.</td>
---	</tr>
---</tbody></table>
---
PhysicsSettings.IsTreeShown = nil;
---Controls the throttle rate of Roblox's physics engine. By default, the
---physics engine will adjust the physics environment throttle depending on
---how much work the physics engine is doing, and the current framerate. See
---the enum page for
---<a href="/reference/engine/enums/EnviromentalPhysicsThrottle">EnviromentalPhysicsThrottle</a>
---for more information.
---
PhysicsSettings.PhysicsEnvironmentalThrottle = nil;
---When set to true, the underlying collision geometry for `PartOperation`
---and `MeshPart` is rendered.
---
PhysicsSettings.ShowDecompositionGeometry = nil;
---If the `PhysicsSettings/PhysicsEnvironmentalThrottle` is set to
---`DefaultAuto`, this specifies the maximum time that the physics
---environmental throttle has to wait before it is allowed to automatically
---change.
---
PhysicsSettings.ThrottleAdjustTime = nil;
---If set to true, version 2 of Roblox's CSG solver will be used instead of
---version 1.
---
PhysicsSettings.UseCSGv2 = nil;
---@class PitchShiftSoundEffect : SoundEffect, Instance
---@field public Octave float
---The PitchShiftSoundEffect raises or lowers the pitch of the associated Sound
---or SoundGroup without changing the playback speed of the audio. This effect
---can be computationally expensive.
---
local PitchShiftSoundEffect;
---Range: 0.5 to 2 (default 1.25) The percentage to shift the original pitch.
---Setting this to its minimum (0.5) lowers the octave by 1, setting this to
---its maximum (2) increases the octave by 1.
---
PitchShiftSoundEffect.Octave = nil;
---@class Plane : Constraint, Instance
---Constrains Attachment0 and Attachment1 such that both points lie in an plane
---defined by Attachment0. The plane origin is at Attachment0 and the plane unit
---normal is the primary axis of Attachment0. This means that Attachment0 and
---Attachment1 will move to a position/orientation such that the distance between
---Attachment1 and Attachment0, projected onto the Plane unit normal, is zero.
---
local Plane;
---@class Platform : Part, FormFactorPart, BasePart, PVInstance, Instance
---The Platform object creates a brick that when touched by a `Player` will
---anchor their torso to the brick. This allows for the creation of vehicles that
---players can stand in and not be flung about the cabin/deck of the vehicle.
---
---The Platform is almost identical to the `Seat` object, except that instead of
---sitting down the player will be standing while locked in place. Good for
---ships.
---
---The Platform object is very useful for making people's characters staying in
---one spot while they move around, such as a ship or truck. When a player
---touches the Platform a `Weld` constraint is created, so they are 'attached' to
---the Platform and can't move until that weld is broken. It can be removed by
---hitting the spacebar, when the player jumps to exit the Platform.
---
local Platform;
---@class Player : Instance
---@field public AccountAge int
---@field public AppearanceDidLoad bool
---@field public AutoJumpEnabled bool
---@field public CameraMaxZoomDistance float
---@field public CameraMinZoomDistance float
---@field public CameraMode CameraMode
---@field public CanLoadCharacterAppearance bool
---@field public Character Model
---@field public CharacterAppearance string
---@field public CharacterAppearanceId int64
---@field public ChatMode ChatMode
---@field public DataComplexity int
---@field public DataComplexityLimit int
---@field public DataReady bool
---@field public DevCameraOcclusionMode DevCameraOcclusionMode
---@field public DevComputerCameraMode DevComputerCameraMovementMode
---@field public DevComputerMovementMode DevComputerMovementMode
---@field public DevEnableMouseLock bool
---@field public DevTouchCameraMode DevTouchCameraMovementMode
---@field public DevTouchMovementMode DevTouchMovementMode
---@field public DisplayName string
---@field public FollowUserId int64
---@field public GameplayPaused bool
---@field public Guest bool
---@field public HealthDisplayDistance float
---@field public LocaleId string
---@field public MaximumSimulationRadius float
---@field public MembershipType MembershipType
---@field public NameDisplayDistance float
---@field public Neutral bool
---@field public OsPlatform string
---@field public PlatformName string
---@field public ReplicationFocus Instance
---@field public RespawnLocation SpawnLocation
---@field public SimulationRadius float
---@field public Team Team
---@field public TeamColor BrickColor
---@field public Teleported bool
---@field public TeleportedIn bool
---@field public UserId int64
---@field public VRDevice string
---@field public userId int64
---@field public CharacterAdded RBXScriptSignal.CharacterAdded
---@field public CharacterAppearanceLoaded RBXScriptSignal.CharacterAppearanceLoaded
---@field public CharacterRemoving RBXScriptSignal.CharacterRemoving
---@field public Chatted RBXScriptSignal.Chatted
---@field public FriendStatusChanged RBXScriptSignal.FriendStatusChanged
---@field public Idled RBXScriptSignal.Idled
---@field public OnTeleport RBXScriptSignal.OnTeleport
---@field public SimulationRadiusChanged RBXScriptSignal.SimulationRadiusChanged
---A Player object a client that is currently connected. These objects are added
---to the `Players` service when a new player connects, then removed when they
---eventually disconnect from the server.
---
---The `Instance/Name` property reflects the player's username. When saving
---information about a player, you should use their `Player/UserId` since it is
---possible that a player can change their username.
---
---There are several similar methods in the `Players` for working with Player
---objects. Use these over their respective `Instance` methods:
---
---- You can get a table of current Player objects using `Players/GetPlayers`;
---  again, use this instead of `Instance/GetChildren`.
---- To detect the addition of Player objects, it is recommended to use the
---  `Players/PlayerAdded` event (instead of `Instance/ChildAdded` on the
---  `Players` service).
---- Similarly, you can detect the removal of Player objects using
---  `Players/PlayerRemoving`, which fires just **before** the Player is removed
---  (instead of `Instance/ChildRemoved` which fires after). This is important if
---  you are saving information about the player that might be removed or cleaned
---  up on-removal.
---
local Player;
---The AccountAge is a `Player` property that describes how long ago a
---player's account was registered in days. It is set using the
---`Player/SetAccountAge` function, which cannot be accessed by scripts.
---
---This property is useful for conditionally showing new Roblox players
---content such as tutorials.
---
Player.AccountAge = nil;
---
Player.AppearanceDidLoad = nil;
---The AutoJumpEnabled property determines whether the `Player/Character` of
---a `Player` using a mobile device will automatically jump when they hit an
---obstacle. This can make levels more navigable while on a mobile device.
---
---When the player joins the game, the `StarterPlayer/AutoJumpEnabled` value
---determines the initial state of this property. Then, this property
---determines the value of the `Humanoid/AutoJumpEnabled` property of the
---`Player/Character`s `Humanoid` on spawn. In other words, it is possible to
---set the auto-jump behavior on a per-character, per-player and per-game
---basis using these three properties.
---
Player.AutoJumpEnabled = nil;
---The CameraMaxZoomDistance `Player` property sets the maximum distance in
---studs the camera can be from the character with the default cameras.
---
---In other words, it controls the maximum distance the player's camera is
---allowed to zoom out.
---
---The default value of this property is set by
---`StarterPlayer/CameraMaxZoomDistance`. If this value is set to a lower
---value than `Player/CameraMinZoomDistance`, it will be increased to
---CameraMinZoomDistance.
---
Player.CameraMaxZoomDistance = nil;
---The CameraMinZoonDistance `Player` property sets the minimum distance in
---studs the camera can be from the character with the default cameras.
---
---In other words, it controls the minimum distance the player's camera is
---allowed to zoom in.
---
---The default value of this property is set by
---`StarterPlayer/CameraMinZoomDistance`. If this value is set to a higher
---value than `Player/CameraMaxZoomDistance` it will be decreased to
---CameraMaxZoomDistance.
---
Player.CameraMinZoomDistance = nil;
---The CameraMode `Player` property sets what mode that the player's camera
---is in. By default, the camera mode is set to third person.
---
---The camera has two modes:
---
---1.  First person
---2.  Third person
---
---The `Enum/CameraMode` Enum is used to set CameraMode in Player, and
---determines when first and third person cameras should be used.
---
---#### First-person
---
---In first-person mode, the player's camera is zoomed all the way in. Unless
---there is a visible GUI present with the `GuiButton/Modal` property set to
---_true_, the mouse will be locked and the user's camera will turn as the
---mouse moves. ![First Person CameraMode][1]
---
---#### Third-person
---
---In third-person mode, the character can be seen in the camera. While in
---third-person mode on Roblox:
---
---- You may right-click and drag to rotate your camera, or use the arrow
---  keys at the bottom right-hand corner of the screen.
---- When you move your mouse, your camera does not change (unless you move
---  the mouse to the end of the screen).
---- When you press any of the arrow keys, the user's character will face in
---  the corresponding arrow key's direction.
---- You can zoom in and out freely.
---
---Third-person is the default camera setting. ![Third Person CameraMode][2]
---
---#### Note
---
---- This item should be used in a `LocalScript` to work as expected online.
---
---[1]: /assets/blt3d3247ee058ba219/CameraMode-LockFirstPerson.jpg
---[2]: /assets/bltbf81f29ace6b335b/CameraMode-Classic.jpg
---
Player.CameraMode = nil;
---The CanLoadCharacterAppearance `Player` property determines whether the
---character's appearance will be loaded when the player spawns. The default
---value of this property is set by `StarterPlayer/LoadPlayerAppearance`.
---
---If _true_, the character will load the appearance of the player
---corresponding to the player's `Player/CharacterAppearanceId`.
---
---If _false_, the player will spawn with a default appearance - a grey
---character model without any hats, shirts, pants, etc.
---
---Attempting to set the property after the character has spawned will not
---change the character, you must call `Player/LoadCharacter` to load the new
---appearance.
---
Player.CanLoadCharacterAppearance = nil;
---The Character property contains a reference to a `Model` containing a
---`Humanoid`, body parts, scripts and other objects required for simulating
---the player's avatar in-game. The model is parented to the `Workspace`, but
---may be moved. It is automatically loaded when `Players/CharacterAutoLoads`
---is true, but can be manually loaded otherwise using
---`Player/LoadCharacter`.
---
---Initially, this property is nil then set when the player's character first
---spawns. Use the `Player/CharacterAdded` event to detect when a player's
---character properly loads, and the `Player/CharacterRemoving` event to
---detect when the character is about to despawn. Avoid using
---`Instance/GetPropertyChangedSignal` on this property.
---
---Note: LocalScripts that are cloned from `StarterGui` or `StarterPack` into
---a player's `Backpack` or `PlayerGui` are often run before the old
---Character model is deleted. Player.Character still refers to a model, but
---that model's parent is nil and it is has been destroyed. Because of this,
---if the Character already exists, you should check to make sure that the
---Character's parent is not nil before using it.
---
---So if you're writing a `LocalScript` under the `StarterGui` or
---`StarterPack` that requires access to the player's character, use this:
---
---```lua
---local Players = game:GetService("Players")
---local player = Players.LocalPlayer
---local character = player.Character
---if not character or not character.Parent then
---    character = player.CharacterAdded:wait()
---end
---```
---
Player.Character = nil;
---The CharacterAppearance property indicates the URL of the asset containing
---the character's appearance, clothing, and gear.
---
---It is automatically set by Roblox to load your avatar's appearance when
---you join a game.
---
---Attempting to set the property after the character has spawned will not
---change the character, you must call `Player/LoadCharacter` to load the new
---appearance.
---
Player.CharacterAppearance = nil;
---This property determines the user ID of the account whose character
---appearance is used for a player's
---`character. By default, this property is the `Player`'s `Player/UserId`,
---which uses the player's avatar as they have created it on the Roblox
---website.
---
---Changing this property to the user ID of another account will cause the
---player to spawn with that account's appearance (hats, shirt, pants, etc).
---
---Games can also toggle whether or not a player's character appearance is
---loaded in game by changing the `StarterPlayer/LoadCharacterAppearance`
---property.
---
Player.CharacterAppearanceId = nil;
---
Player.ChatMode = nil;
---This property was once used by an ancient data persistence method to
---indicate the total amount of data currently being stored in the
---`Player|Player's` cache on the current place.
---
---Note:
---
---- Booleans and numbers cost 1 data complexity unit.
---- Strings cost their length divided by 100 in data complexity units.
---- Instances cost their DataCost in data complexity units.
---- Saving the default value (0 for numbers, false for booleans, "" for
---  strings and nil for Instances) removes the key from the DataComplexity
---  count.
---- If, when using the SaveBoolean, SaveString, SaveNumber or SaveInstance
---  functions, the DataComplexity for the player goes over the limit
---  (currently 45000 units, defined by DataComplexityLimit), the function
---  throws an error, the value is not saved, and any previous value of the
---  key that was being saved to is deleted.
---
Player.DataComplexity = nil;
---This property was once used by an ancient data persistence method to
---specify the maximum amount of data that can be stored to a
---`Player|Player's` cache per place. It is currently set at 45,000 data
---complexity units.
---
Player.DataComplexityLimit = nil;
---This property was once used by an ancient data persistence method to
---indicate when the player's data is available to load. Becomes true when
---data is available.
---
Player.DataReady = nil;
---The DevCameraOcclusionMode `Player` property sets how the default camera
---handles objects between the camera and the player. Set by default by
---`StarterPlayer/DevCameraOcclusionMode`.
---
---The default value is _Zoom_ (0): The camera will zoom in until there is
---nothing between the player and camera.
---
---See `Enum/DevCameraOcclusionMode` for the different occlusion modes
---available. Sets how the default camera handles objects between the camera
---and the player.
---
Player.DevCameraOcclusionMode = nil;
---The DevComputerCameraMode property determines the manner in which a player
---moves their camera when using a mouse-and-keyboard device device. See
---`Enum/DevComputerCameraMovementMode` for a description of each camera
---control mode available. This property cannot be set using a `LocalScript`
---(it must be set on the server using a `Script`).
---
---The default value of this property is determined by
---`StarterPlayer/DevComputerCameraMovementMode`.
---
---#### Note
---
---- The word "Computer" in this property name refers to
---  non-`UserInputService/TouchEnabled|TouchEnabled`,
---  non-`UserInputService/GamepadEnabled|GamepadEnabled` devices.
---- When set to **UserChoice**, a player can choose between any control mode
---  (except **Scriptable**) in the Roblox game settings. In general, it is a
---  good idea to allow players to choose their control mode to maximize
---  accessibility.
---- It is possible to create a custom control scheme by setting this
---  property to **Scriptable**.
---- This property does not affect players using a touch enabled device. See
---  `Player/DevTouchCameraMode ` instead.
---
Player.DevComputerCameraMode = nil;
---The DevComputerMovementMode property determines the manner in which a
---player moves their character when using a mouse-and-keyboard device
---device. See `Enum/DevComputerMovementMode` for a description of each
---movement control mode available. This property cannot be set using a
---`LocalScript` (it must be set on the server using a `Script`).
---
---The default value of this property is determined by
---`StarterPlayer/DevComputerMovementMode`.
---
---#### Note
---
---- The word "Computer" in this property name refers to
---  non-`UserInputService/TouchEnabled|TouchEnabled` devices.
---- When set to **UserChoice**, a player can choose between any control mode
---  (except **Scriptable**) in the Roblox game settings. In general, it is a
---  good idea to allow players to choose their control mode to maximize
---  accessibility.
---- It is possible to create a custom control scheme by setting this
---  property to **Scriptable**.
---- This property does not affect players using a touch enabled device. See
---  `Player/DevTouchMovementMode ` instead.
---
Player.DevComputerMovementMode = nil;
---This property determines if a player is able to toggle **`Mouse|mouse`
---lock** by pressing **Shift**. A player can disable the mouse lock switch
---in Roblox's game settings. By default, this property is set to the value
---of `StarterPlayer/EnableMouseLockOption`. This can be set server-side
---during run-time by using a `Script`. It can not be set client-side.
---
---#### What is Mouse Lock?
---
---When mouse lock is enabled, the player's cursor is locked to the center of
---the screen. Moving the mouse will orbit the camera around the player's
---`Player/Character|character`, and character will face the same direction
---as the `Camera|camera`. It also offsets the camera view just over the
---right shoulder of the player's character.
---
---Below, the camera is moved left and right first by holding right-click.
---Then, mouse lock is enabled which changes the mouse to a target reticule,
---and offsets the camera. The camera is again moved left and right (without
---holding right click).
---<video width="164" height="219" playsinline autoplay muted loop><source src="/assets/bltb2be4e8c8b092b4f/MouseLock.webm" type="video/webm" /></video>
---
Player.DevEnableMouseLock = nil;
---The DevTouchCameraMode property determines the manner in which a player
---moves their camera when using a
---`UserInputService/TouchEnabled|TouchEnabled` device. See
---`Enum/DevTouchCameraMovementMode` for a description of each camera control
---mode available. This property cannot be set using a `LocalScript` (it must
---be set on the server using a `Script`).
---
---The default value of this property is determined by
---`StarterPlayer/DevTouchCameraMovementMode`.
---
---#### Note
---
---- When set to **UserChoice**, a player can choose between any control mode
---  (except **Scriptable**) in the Roblox game settings. In general, it is a
---  good idea to allow players to choose their control mode to maximize
---  accessibility.
---- It is possible to create a custom control scheme by setting this
---  property to **Scriptable**.
---- This property does not affect players who are not using a touch enabled
---  device. See `Player/DevComputerCameraMovementMode` instead.
---
Player.DevTouchCameraMode = nil;
---The DevTouchMovementMode property determines the manner in which a player
---moves their character when using a
---`UserInputService/TouchEnabled|TouchEnabled` device. See
---`Enum/DevTouchMovementMode` for a description of each movement control
---mode available. This property cannot be set using a `LocalScript` (it must
---be set on the server using a `Script`).
---
---The default value of this property is determined by
---`StarterPlayer/DevTouchMovementMode`.
---
---#### Note
---
---- When set to **UserChoice**, a player can choose between any control mode
---  (except **Scriptable**) in the Roblox game settings. In general, it is a
---  good idea to allow players to choose their control mode to maximize
---  accessibility.
---- It is possible to create a custom control scheme by setting this
---  property to **Scriptable**.
---- This property does not affect players who are not using a touch enabled
---  device. See `Player/DevComputerMovementMode` instead.
---
Player.DevTouchMovementMode = nil;
---The `DisplayName` is a `Player` property that contains the display name of
---the authenticated user associated with the `Player` object. Unlike
---usernames, display names are non-unique names a player displays to others.
---If the Roblox user has not chosen one, the property will read the same as
---the `Name` property.
---
---Note:
---
---- Since display names are non-unique, it's possible for two players in a
---  single instance to have identical names. If you need a globally unique
---  identifier for a player, use `Player.UserId` (which is static) or
---  `Player.Name` (which is the current Username) instead.
---- Characters generated with `LoadCharacter` or by the Roblox engine will
---  have their Humanoid's `DisplayName` property assigned to the Player's
---  `DisplayName` property.
---- Display names may have unicode characters in the string. See
---  [UTF8](/reference/engine/libraries/utf8) for more information on how to
---  work with strings with unicode characters.
---
Player.DisplayName = nil;
---The FollowUserId is a `Player` property that contains the `Player/UserId`
---of the user that a player followed into the game. If the player did not
---follow anyone into the game, this property will be 0. This property is
---useful for alerting players who have been followed by another player into
---the game.
---
---You can get the name of the player followed using this user ID and the
---`Players/GetNameFromUserIdAsync` function.
---
Player.FollowUserId = nil;
---The **GameplayPaused** property indicates if the player is currently in a
---pause state in a place with `Workspace/StreamingEnabled|StreamingEnabled`
---activated. It is set on the client but replicated to the server. To
---determine the pause status, you can utilize this property.
---
---See also:
---
---- `Workspace/StreamingEnabled` which controls whether content streaming is
---  enabled
---- `Workspace/StreamingPauseMode` which controls the streaming physics
---  pause mode
---
Player.GameplayPaused = nil;
---
Player.Guest = nil;
---The HealthDisplayDistance `Player` property sets the distance in studs at
---which this player will see other `Humanoid`'s health bars. If set to 0,
---the health bars will not be displayed. This property is set to
---`StarterPlayer/HealthDisplayDistance` by default.
---
---#### Note
---
---If a Humanoid's health bar is visible, you can set the display type using
---`Humanoid/DisplayDistanceType`.
---
Player.HealthDisplayDistance = nil;
---The LocaleId `Player` property shows the locale id that the local player
---has set for their Roblox account. It holds a string with the two letter
---code (for example, "en-us") for the locale.
---
---This can be used to determine the geographic demographic of your game's
---player base.
---
---This property allows access to the player's locale from the server. It is
---similar to `LocalizationService`'s `LocalizationService/RobloxLocaleId`
---property.
---
Player.LocaleId = nil;
---The maximum value a Player's `Player/SimulationRadius` can grow to.
---Defaults to 1000 and is measured in studs.
---
---#### What is the SimulationRadius?
---
---`Player/SimulationRadius` determines the radius around the
---`Player/Charater` in which physically simulated objects, for whom network
---ownership is set to automatic, are physically simulated by the `Player`.
---In cases where a `BasePart` or assembly is within multiple player's
---SimulationRadiuses, the closest player is chosen.
---
---`Player/SimulationRadius`, measured in studs, starts at 10 and grows at a
---rate of 5% per second until it reaches MaximumSimulationRadius.
---
---Note:
---
---- The `Player/SimulationRadius` can be visualized using
---  `PhysicsSettings/AreRegionsShown`
---- When this property is changed, the `Player/SimulationRadiusChanged`
---  event fires
---- For more information on network ownership, please see [this tutorial][1]
---
---[1]: https://developer.roblox.com/articles/Network-Ownership
---
Player.MaximumSimulationRadius = nil;
---The MembershipType `Player` property can be used to determine the
---membership type of the player. It holds a `Enum/MembershipType` enum of
---the account's membership type.
---
---This property can only be read from to determine membership (it cannot be
---set to another membership type). The property can only be changed via
---`CoreScript`s using `Player/SetMembershipType` - which are not accessible.
---
Player.MembershipType = nil;
---The NameDisplayDistance `StarterPlayer` property sets the distance in
---studs at which this player will see other `Humanoid`'s names. If the
---property is set to 0, names are hidden. This property is set to
---`StarterPlayer/NameDisplayDistance` by default.
---
---#### Note
---
---If a Humanoid's health bar is visible, you can set the display type using
---`Humanoid/DisplayDistanceType`.
---
Player.NameDisplayDistance = nil;
---The Neutral property determines whether the player is on a specific team.
---
---- When _true_, the player is not on a specific team. This also means that
---  the `Player/Team` property will be nil and the `Player/TeamColor` will
---  be white.
---- When _false_, the player is on a specific team. The `Player/Team`
---  property will correspond to the `Team` that the player is on, as will
---  the `Player/TeamColor`.
---
Player.Neutral = nil;
---
Player.OsPlatform = nil;
---
Player.PlatformName = nil;
---The ReplicationFocus `Player` property sets the part to focus replication
---around a Player. Different Roblox systems that communicate over the
---network (such as physics, streaming, etc) replicate at different rates
---depending on how close objects are to the replication focus.
---
---When this property is nil, it reverts to its default behavior which is to
---treat the local player's character's `Model/PrimaryPart|PrimaryPart` as
---the replication focus.
---
---This property should only be set on the server with a `Script`, not a
---`LocalScript`. Note that this property does not change or update network
---ownership of parts.
---
Player.ReplicationFocus = nil;
---If set, the player will respawn at the given `SpawnLocation`. This
---property can only be set through Lua and must contain a reference to a
---valid `SpawnLocation`, which must meet the following criteria:
---
---- Descendant of `Workspace`
---- `SpawnLocation/TeamColor|SpawnLocation.TeamColor` is set to the
---  `Player/TeamColor|Player.TeamColor` or
---  `SpawnLocation/Neutral|SpawnLocation.Neutral` is set to true
---
---If RespawnLocation is not set to a valid `SpawnLocation` then the default
---spawning logic will apply. For more information on this see the page for
---`SpawnLocation`.
---
---#### Alternatives to RespawnLocation
---
---- A `Player` will spawn from `SpawnLocation|SpawnLocations` belonging to
---  their team. In some cases it may be simpler to change the
---  `Player|Player's` `Player/Team` instead. This method also allows the
---  `Player` to respawn from multiple `SpawnLocation|SpawnLocations`.
---- Developers may wish to implement their own custom spawn logic, using
---  `Model/SetPrimaryPartCFrame` to move the `Player/Character` manually.
---
Player.RespawnLocation = nil;
---SimulationRadius determines the radius around the `Player/Character` in
---which physically simulated objects, for whom network ownership is set to
---automatic, are physically simulated by the `Player`. In cases where a
---`BasePart` or assembly is within multiple player's SimulationRadiuses, the
---closest player is chosen.
---
---SimulationRadius, measured in studs, starts at 10 and grows at a rate of
---5% per second until it reaches `Player/MaximumSimulationRadius`.
---
---Note:
---
---- The `Player/SimulationRadius` can be visualized using
---  `PhysicsSettings/AreRegionsShown`
---- When this property is changed, the `Player/SimulationRadiusChanged`
---  event fires
---- For more information on network ownership, please see [this tutorial][1]
---
---[1]: https://developer.roblox.com/articles/Network-Ownership
---
Player.SimulationRadius = nil;
---The Team property is a reference to a `Team` object within the `Teams`
---service. It determines the team the player is on; if the `Player` isn't on
---a team or has an invalid `Player/TeamColor`, this property is nil. When
---this property is set, the player has joined the `Team` and the
---`Team/PlayerAdded` event fires on the associated team. Similarly,
---`Team/PlayerRemoved` fires when the property is unset from a certain
---`Team`.
---
Player.Team = nil;
---The TeamColor property determines which team a Player is associated with
---according to that Team's `Team/TeamColor`. Changing this property will
---change `Player/Team` according to whichever team has the same
---`DataType/BrickColor` for their `Team/TeamColor`. If no Team object has
---the associated TeamColor, the player will not be associated with a team.
---
---It's often a better idea to set `Player/Team` to the respective `Team`
---instead of using this property. Setting this property often leads to
---repetition of the same BrickColor value for a certain teams across many
---scripts; this is something you want to avoid when adhering to the
---[don't-repeat-yourself][1] principle.
---
---[1]: https://en.wikipedia.org/wiki/Don%27t_repeat_yourself
---
Player.TeamColor = nil;
---
Player.Teleported = nil;
---
Player.TeleportedIn = nil;
---The UserId is a `Player` property that contains a read-only integer that
---**uniquely and consistently** identifies every user account on Roblox.
---Unlike the `Instance/Name` of a Player, which may change according the
---user's present username, this value will never change for the same
---account.
---
---This property is essential when saving/loading player data using
---`GlobalDataStore|GlobalDataStores`. Use a player's UserId as the data
---store key so that each player has a unique key.
---
Player.UserId = nil;
---
Player.VRDevice = nil;
---
Player.userId = nil;
---@param message string
---@return void
---The Kick `Player` method allows a game to gracefully disconnect a client
---from the game and optionally provide a message to the disconnected player.
---This is useful for moderating abusive players. When used in conjunction
---with a `DataStore`, it is possible to create ban lists with expiration
---dates. Only allow specific whitelisted users whom you trust to trigger
---this method on other players.
---
---When used from a `LocalScript`, only the local player's client can be
---kicked.
---
---##Example When calling this method on a Player with no arguments, they
---will be disconnected from the server and receive the default message: This
---game has shut down.
---
---![Getting kicked without a message.][1]
---
---Calling this method on a player but providing a string as the first
---argument will replace this message with the contents of the string.
---
---![Getting kicked with a message.][2]
---
---[1]: /assets/blta0f9570676ca14ef/GettingKickedCropped.png
---[2]: /assets/blt20acf098fdbd2b30/KickedWithANoteCropped.png
---
Player.Kick = function(self, message) end;
---@param groupId int64
---@return string
---The GetRoleInGroup `Player` function returns the player's role in the
---group as a string, or _Guest_ if the player isn't part of the group.
---
---#### Note
---
---Using this in a `Script`, as opposed to a `LocalScript`, will not get you
---the most up-to-date information. If a player leaves a group while they are
---in the game, GetRoleInGroup will still think they're in that group until
---they leave. However, this does not happen when used with a LocalScript.
---
---This is because the method caches results, so multiple calls of
---GetRoleInGroup on the same player with the same group ID will yield the
---same result as when the method was first called with the given group ID.
---The caching behavior is on a per-peer basis: a server does not share the
---same cache as a client.
---
Player.GetRoleInGroup = function(self, groupId) end;
---@param groupId int64
---@return int
---The GetRankInGroup `Player` function returns the player's rank in the
---group as an integer between 0 and 255, where 0 is a non-member and 255 is
---the group's owner.
---
---#### Note
---
---Using this in a `Script`, as opposed to a `LocalScript`, will not get you
---the most up-to-date information. If a player leaves a group while they are
---in the game, GetRankInGroup will still think they're in that group until
---they leave. However, this does not happen when used with a LocalScript.
---
---This is because the method caches results, so multiple calls of
---GetRankInGroup on the same player with the same group ID will yield the
---same result as when the method was first called with the given group ID.
---The caching behavior is on a per-peer basis: a server does not share the
---same cache as a client.
---
Player.GetRankInGroup = function(self, groupId) end;
---@param jsonBlob string
---@return void
Player.SetCharacterAppearanceJson = function(self, jsonBlob) end;
---@param key string
---@return bool
---This function returns a boolean value that was previously saved to the
---player with `Player/SaveBoolean` with the same key. Returns false if the
---key doesn't exist, not nil.
---
Player.LoadBoolean = function(self, key) end;
---@param userId int64
---@return bool
---This function sends a request to the Roblox website asking whether a
---player is a friend of another user, given the `Player/UserId` of that
---user. This function caches results so multiple calls of the function on
---the same player with the same `userId` may not yield the most up-to-date
---result. This does not happen when used in a `LocalScript`.
---
Player.IsFriendsWith = function(self, userId) end;
---@param membershipType MembershipType
---@return void
Player.SetMembershipType = function(self, membershipType) end;
---@param userIds Array
---@return void
Player.AddToBlockList = function(self, userIds) end;
---@return void
---The LoadCharacter `Player` function creates a new character for the
---player, removing the old one. It also clears the player's `Backpack` and
---`PlayerGui`.
---
---This is useful in cases where you want to reload the character without
---killing the player, such as when you want to load a new character
---appearance after changing the player's `Player/CharacterAppearance`.
---
---Note: The function is similar to `Player/LoadCharacterBlocking`, but the
---request is processed asynchronously instead of synchronously. This means
---other tasks will be able to continue while the character is being loaded,
---including the rendering of the game and any other tasks. Also, this
---function can be used in script, while LoadCharacterBlocking cannot.
---
---After calling LoadCharacter for an individual player, it is not
---recommended to call it again for the same player until after that player's
---`Player/CharacterAppearanceLoaded` event has fired.
---
---#### Character Loading Event order
---
---Calling the `Player:LoadCharacter()` with an R15 Avatar fires events in
---the following order (Note: R6 ordering is different):
---
---1.  Player.Character sets
---2.  Player.CharacterAdded fires
---3.  Player.Changed fires with a value of "Character"
---4.  Character appearance initializes
---5.  Player.CharacterAppearanceLoaded fires
---6.  Character.Parent sets to the DataModel
---7.  The Character rig builds, and the Character scales
---8.  Character moves to the spawn location
---9.  LoadCharacter returns
---
Player.LoadCharacter = function(self) end;
---@param value bool
---@return void
---The SetSuperSafeChat `Player` function sets whether or not the player sees
---chat filtered by `TextService`'s `TextService/FilterStringAsync` rather
---than normal chats.
---
---SuperSafeChat is a chat mode where player's cannot see unfiltered
---messages.
---
---For example, entering the following command in the command prompt would
---enabled SuperSafeChat for the player named polarpanda16, as long as that
---player is in the game:
---
---![Command prompt example enabling SuperSafeChat.][1]
---
---#### Note
---
---Regardless of whether a player has SuperSafeChat enabled, all chat should
---be filtered by TextService when broadcasted to other players or on the
---player's own screen. `TextService/FilterStringAsync` returns a
---`TextFilterResult` object that can be filtered differently according to
---the message's intended use.
---
---[1]: /assets/blte98afa1dbb206581/Screen_Shot_2018-07-28_at_9.46.09_PM.png
---
Player.SetSuperSafeChat = function(self, value) end;
---@return void
---This function was used by an ancient data persistence method to load the
---user's Data Persistence.
---
Player.LoadData = function(self) end;
---@return void
---The ClearCharacterAppearance function removes all `Accessory`, `Shirt`,
---`Pants`, `CharacterMesh`, and `BodyColors` from the given player's
---`Player/Character`. In addition, it also removes the T-Shirt `Decal` on
---the player's torso. The character's body part colors and face will remain
---unchanged. This method does nothing if the player does not have a
---Character.
---
---#### Note
---
---It does not remove `ShirtGraphic|t-shirts`, head meshes, or faces.
---
Player.ClearCharacterAppearance = function(self) end;
---@param humanoidDescription HumanoidDescription
---@return void
---This function spawns an avatar so it has everything equipped in the passed
---in `HumanoidDescription`.
---
---After calling LoadCharacterWithHumanoidDescription for an individual
---player, it is not recommended to call the function again for the same
---player until after that player's `Player/CharacterAppearanceLoaded` event
---has fired.
---
---See also:
---
---- [HumanoidDescription System](/avatar/characters/character-customization#humanoiddescription),
---  an article which explains the humanoid description system in greater
---  detail and provides several scripting examples
---
Player.LoadCharacterWithHumanoidDescription = function(self, humanoidDescription) end;
---@param key string
---@return Instance
---This function returns an instance that was previously saved to the player
---with `Player/SaveInstance` with the same key. Returns nil if the key
---doesn't exist.
---
Player.LoadInstance = function(self, key) end;
---@param value bool
---@return void
Player.SetUnder13 = function(self, value) end;
---@return bool
Player.waitForDataReady = function(self) end;
---@param userId int64
---@return bool
Player.isFriendsWith = function(self, userId) end;
---@param key string
---@return double
---This function was once used by an ancient data persistence method to
---return a number value that was previously saved to the player with
---`Player/SaveNumber` with the same key. Returns 0 if the key doesn't exist,
---not nil.
---
Player.LoadNumber = function(self, key) end;
---@param userId int64
---@param blocked bool
---@return void
Player.UpdatePlayerBlocked = function(self, userId, blocked) end;
---@param position Vector3
---@param timeOut double
---@return void
---For games where `Workspace/StreamingEnabled|StreamingEnabled` is set to
---**true**, requests that the server stream to the player regions (parts and
---terrain) around the specified **X**, **Y**, **Z** location in the game
---world. It is useful if the game knows that the player's `datatype/CFrame`
---will be set to the specified location in the near future. Without
---providing the location with this call, the player may not have streamed in
---content for the destination, resulting in a streaming pause or other
---undesirable behavior.
---
---The effect of this call will be temporary and there are no guarantees of
---what will be streamed in around the specified location. Client memory
---limits and network conditions may impact what will be available on the
---client.
---
---##### Usage Precaution
---
---Requesting streaming around an area is **not a guarantee** that the
---content will be present when the request completes, as streaming is
---affected by the client's network bandwidth, memory limitations, and other
---factors.
---
Player.RequestStreamAroundAsync = function(self, position, timeOut) end;
---@return void
---The LoadCharacterBlocking `Player` function is similar to
---`Player/LoadCharacter`, but the request is processed synchronously instead
---of asynchronously.
---
---This means that no other task will be able to continue until after the
---character has been loaded, including the rendering of the game and any
---other tasks.
---
---Like LoadCharacter, this function creates a new character for the player,
---removing the old one. It also clears the player's `Backpack` and
---`PlayerGui`. This is useful in cases where you want to reload the
---character without killing the player, such as when you want to load a new
---character appearance after changing the player's
---`Player.CharacterAppearance`.
---
---Note:
---
---- This function is used by Roblox's backend server when rendering avatar
---  thumbnails.
---
Player.LoadCharacterBlocking = function(self) end;
---@param key string
---@return string
---This function returns a string value that was previously saved to the
---player with `Player/SaveString` with the same key. Returns an empty string
---("") if the key doesn't exist, not nil..
---
Player.LoadString = function(self, key) end;
---@param player Player
---@return FriendStatus
Player.GetFriendStatus = function(self, player) end;
---@param groupId int64
---@return bool
---The IsInGroup `Player` function sends a request to the Roblox website
---asking whether a player is a member of a group, given the ID of that
---group.
---
---#### Note
---
---Using this in a `Script`, as opposed to a `LocalScript`, will not get you
---the most up-to-date information. If a player leaves a group while they are
---in the game, IsInGroup will still think they're in that group until they
---leave. However, this does not happen when used with a LocalScript.
---
---This is because the method caches results, so multiple calls of IsInGroup
---on the same player with the same group ID will yield the same result as
---when the method was first called with the given group ID. The caching
---behavior is on a per-peer basis: a server does not share the same cache as
---a client.
---
Player.IsInGroup = function(self, groupId) end;
---@param walkDirection Vector3
---@param relativeToCamera bool
---@return void
---The Move `Player` function causes the player's character to walk in the
---given direction until stopped, or interrupted by the player (by using
---their controls).
---
---This is useful when scripting NPC `Humanoid`s that move around a map - but
---are not controlled by an actual player's input.
---
---Note that the function's second argument indicates whether the provided
---`DataType/Vector3` should move the player relative to world coordinates
---(_false_) or the player's `Camera` (_true_).
---
Player.Move = function(self, walkDirection, relativeToCamera) end;
---@param userId int64
---@return bool
---This function was once used to return whether a player is best friends
---with the specified user, but the best friend feature has since been
---removed.
---
Player.IsBestFriendsWith = function(self, userId) end;
---@param key string
---@return bool
Player.loadBoolean = function(self, key) end;
---@return void
---The RemoveCharacter `Player` function removes the player's character. It
---also clears the player's `Backpack` and `PlayerGui`. This is useful when
---you would like to temporarily remove a player's character.
---
---To reload a players character after using this function, simply use the
---`Player/LoadCharacter` function.
---
---#### Note
---
---- This function does not remove a player from the game. It only removes
---  their character. To remove a player from the game, you can use the
---  `Player/Kick` function.
---
Player.RemoveCharacter = function(self) end;
---@return bool
---This function is used to pause the script until the player's data is
---available to manipulate, or until a certain amount of time has elapsed
---without fetching the player's data
---
Player.WaitForDataReady = function(self) end;
---@return string
Player.GetGameSessionID = function(self) end;
---@param key string
---@param value double
---@return void
Player.saveNumber = function(self, key, value) end;
---@return void
---This function was used by an ancient data persistence method to save the
---user's data.
---
Player.SaveData = function(self) end;
---@param key string
---@return double
Player.loadNumber = function(self, key) end;
---@return Dictionary
---This function returns a dictionary containing information on how the
---`Player` joined the game.
---
---The dictionary contains the fields below. Please note, whether these
---fields exists depends on the circumstances under which the `Player` joined
---the game.
---
---<table>
---  <thead>
---    <tr>
---      <th> Key </th>
---      <th> Value Type </th>
---      <th> Description </th>
---    </tr>
---  </thead>
---  <tbody>
---    <tr>              
---      <th> SourceGameId </th>  
---      <td> int64 </td>
---      <td> The <code>DataModel/GameId</code> of the game the <code>Player</code> was teleported from. </td>
---    </tr>
---    <tr>              
---      <th> SourcePlaceId </th>  
---      <td> int64 </td>
---      <td> The <code>DataModel/PlaceId</code> of the place the <code>Player</code> was teleported from. Only present if the player was teleported to the current place. </td>
---    </tr>
---    <tr>       
---      <th> Members </th>      
---      <td> array </td>
---      <td> An array containing the <code>Player/UserId|UserIds</code> teleported alongside the <code>Player</code>. Only present if the player was teleported in using <code>TeleportService/TeleportPartyAsync</code>. </td>
---    </tr>
---    <tr>   
---      <th> TeleportData </th>
---      <td> variant </td>
---      <td> Reflects the `teleportData` parameter specified in the original teleport function. This is useful in order to share information when teleporting a player from one place to another. It is only present if `teleportData` was specified and the teleport function was called from the server.</td>
---    </tr>
---  </tbody>
---</table>
---
---#### GetJoinData and TeleportData
---
---If the teleport the `Player` arrived in the current place due to was
---initiated on a server (as opposed to a client) the `Player|Player's`
---_teleportData_ is included in the dictionary returned by this function.
---
---This function can only be used to fetch _teleportData_ on the server, to
---retrieve it on the client use
---`TeleportService/GetLocalPlayerTeleportData`.
---
---In contrast to `TeleportService/GetLocalPlayerTeleportData`, this function
---provides a number of security checks to the _teleportData_:
---
---- It is guaranteed to have been sent by a Roblox server in the last 48
---  hours
---- It is guaranteed to have been sent with this `Player`
---- The SourcePlaceId returned is guaranteed to be the place the data was
---  sent from. This means you can verify the TeleportData came from an
---  approved place
---
---However, as this data is transmitted by the client, it not 100% secure.
---Although the user cannot modify this data it is possible for them to view
---it or insert data from a previous teleport.
---
---Despite this, it is still appropriate for the secure transmission of
---[immutable data][1] (data that can not be changed). For example, if the
---user has completed a level that cannot be uncompleted. Such data can be
---securely transmitted using this function avoiding the need to use up and
---wait for `GlobalDataStore|DataStore` requests when teleporting.
---
---You should not use this function for data that can be changed. For
---example, the amount of in-game currency the user currently has. This is
---because GetJoinData cannot guarantee a malicious user is not transmitting
---data from a previous session. For data like this, you should rely on
---`GlobalDataStore|GlobalDataStores`.
---
---As with all cases, you should implement proper server validation to ensure
---your game is secure.
---
---[1]: https://en.wikipedia.org/wiki/Immutable_object"
---
Player.GetJoinData = function(self) end;
---@param key string
---@param value Instance
---@return void
---This function was once used by an ancient data persistence method to save
---an instance which can be loaded again at a later time using
---`Player/LoadInstance`..
---
Player.SaveInstance = function(self, key, value) end;
---@param key string
---@return string
Player.loadString = function(self, key) end;
---@param player Player
---@return void
Player.RequestFriendship = function(self, player) end;
---@return Mouse
---The GetMouse `Player` function returns the `Mouse` being used by the
---client. The player's mouse instance can be used to track user mouse input
---including left and right mouse button clicks and movement and location.
---
---The `UserInputService` service provides additional functions and events to
---track user input - especially for devices that do not use a mouse.
---
---Note:
---
---- This item **must** be used in a `LocalScript` to work as expected
---  online.
---- Following an update in July 2014, the mouse's icon can now be set with
---  this method.
---
Player.GetMouse = function(self) end;
---@param key string
---@param value bool
---@return void
Player.saveBoolean = function(self, key, value) end;
---@param player Player
---@return void
Player.RevokeFriendship = function(self, player) end;
---@param key string
---@param value double
---@return void
---This function was once used by an ancient data persistence method to save
---a number value that can be loaded again at a later time using
---`Player/LoadNumber`.
---
Player.SaveNumber = function(self, key, value) end;
---@return float
---**GetNetworkPing** returns the engine-calculated latency of the `Player`
---in seconds. "Ping" is a measurement of the time taken for data to be sent
---from the client to the server, then back again. For client-side
---`LocalScript`s, this function may only be called on the
---`Players/LocalPlayer|LocalPlayer`. This function is useful in identifying
---and debugging issues that occur in high-latency scenarios. It can also be
---used in masking latency, such as adjusting the speed of throwing
---animations for projectiles.
---
Player.GetNetworkPing = function(self) end;
---@param key string
---@param value bool
---@return void
---This function is used to save a boolean value that can be loaded again at
---a later time using `Player/LoadBoolean`.
---
Player.SaveBoolean = function(self, key, value) end;
---@param key string
---@param value Instance
---@return void
Player.saveInstance = function(self, key, value) end;
---@return bool
Player.GetUnder13 = function(self) end;
---@param key string
---@return Instance
Player.loadInstance = function(self, key) end;
---@param key string
---@param value string
---@return void
---This function was once used by an ancient data persistence method to save
---a string value that can be loaded again at a later time using
---`Player/LoadString`.
---
Player.SaveString = function(self, key, value) end;
---@param key string
---@param value string
---@return void
Player.saveString = function(self, key, value) end;
---@return bool
---The HasAppearanceLoaded `Player` function returns whether or not the
---appearance of the player's `Player/Character` has loaded.
---
---A player's appearance includes items such as the player's `Shirt`,
---`Pants`, and `Accessory|Accessories`.
---
---This is useful when determining whether a player's appearance has loaded
---after they first join the game, which can be tracked using the
---`Players/PlayerAdded` event.
---
Player.HasAppearanceLoaded = function(self) end;
---@param point Vector3
---@return float
---The DistanceFromCharacter `Player` function returns the distance between
---the character's head and the given `DataType/Vector3` point. It returns 0
---if the player has no `Player/Character`.
---
---This is useful when determining the distance between a player and another
---object or location in game.
---
---#### Note
---
---If you would like to determine the distance between two non-player
---instances or positions, you can use the following:
---
---```lua
---local distance = (position1 - position2).magnitude
---```
---
Player.DistanceFromCharacter = function(self, point) end;
---@param maxFriends int
---@return Array
---This function returns a dictionary array of online friends, limited by the
---`maxFriends` value.
---
---In the returned array, some fields are only present for certain location
---types. For example, **PlaceId** won't be present when **LocationType** is
---0 (Mobile Website).
---
---<table>
---    <thead>
---        <tr>
---            <th>Name</th>
---            <th>Type</th>
---            <th>Description</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td><b>VisitorId</b></td>
---            <td>number</td>
---            <td>The <code>Player/UserId</code> of the friend.</td>
---        </tr>
---        <tr>
---            <td><b>UserName</b></td>
---            <td>string</td>
---            <td>The username of the friend.</td>
---        </tr>
---        <tr>
---            <td><b>DisplayName</b></td>
---            <td>string</td>
---            <td>The <a href='/reference/engine/classes/Player#DisplayName'>display name</a> of the friend.</td>
---        </tr>
---        <tr>
---            <td><b>LastOnline</b></td>
---            <td>string</td>
---            <td>When the friend was last online.</td>
---        </tr>
---        <tr>
---            <td><b>IsOnline</b></td>
---            <td>boolean</td>
---            <td>If the friend is currently online.</td>
---        </tr>
---        <tr>
---            <td><b>LastLocation</b></td>
---            <td>string</td>
---            <td>The name of the friend's current location.</td>
---        </tr>
---        <tr>
---            <td><b>PlaceId</b></td>
---            <td>number</td>
---            <td>The place ID of the friend's last location.</td>
---        </tr>
---        <tr>
---            <td><b>GameId</b></td>
---            <td>string</td>
---            <td>The <code>DataModel/JobId</code> of the friend's last location.</td>
---        </tr>
---        <tr>
---            <td><b>LocationType</b></td>
---            <td>number</td>
---<td>
---The location type of the friend's last location:
---<table>
---    <tbody>
---        <tr>
---            <td width="20%"><b>0</b></td>
---            <td>Mobile Website</td>
---        </tr>
---        <tr>
---            <td><b>1</b></td>
---            <td>Mobile InGame</td>
---        </tr>
---        <tr>
---            <td><b>2</b></td>
---            <td>Webpage</td>
---        </tr>
---        <tr>
---            <td><b>3</b></td>
---            <td>Studio</td>
---        </tr>
---        <tr>
---            <td><b>4</b></td>
---            <td>InGame</td>
---        </tr>
---        <tr>
---            <td><b>5</b></td>
---            <td>Xbox</td>
---        </tr>
---        <tr>
---            <td><b>6</b></td>
---            <td>Team Create</td>
---        </tr>
---    </tbody>
---</table>
---</td>
---        </tr>
---    </tbody>
---</table>
---
Player.GetFriendsOnline = function(self, maxFriends) end;
---@return bool
---This function returns true if the user is available for Roblox
---experiments. The purpose of this function is currently unknown.
---
Player.IsUserAvailableForExperiment = function(self) end;
---@param accountAge int
---@return void
---The SetAccountAge function sets the `Player/AccountAge` of the player in
---days.
---
---It is used to set the `Player` property that describes how long ago a
---player's account was registered in days.
---
---This does not set the age of the player on the account, but the age of the
---account itself relative to when it was first created.
---
Player.SetAccountAge = function(self, accountAge) end;
---@param assetInstance Instance
---@return void
---The LoadCharacterAppearance `Player` function places the given instance
---either in the player's `Player/Character`, head, or `StarterGear` based on
---the instance's class.
---
---This is useful when giving a player's character an asset from the Roblox
---catalog, such as a hat or piece of gear.
---
---It is similar to `Player/LoadCharacter`, except it does not reload the
---entire character instance, StarterGear, or `PlayerGui`.
---
---Note:
---
---- `Accessory|Accessories`, `Shirt`s, `ShirtGraphic`s, `CharacterMesh`es,
---  `BodyColor`s, and `Accoutrement`s are parented to the player's
---  character.
---- `Decal`s, `FileMesh`es, `SpecialMesh`es, `BlockMesh`es,
---  `CylinderMesh`es, and `Texture`s are parented to the character's head.
---- `Tool`s and `HopperBin`s are parented to the player's StarterGear.
---- All other classes are ignored.
---
Player.LoadCharacterAppearance = function(self, assetInstance) end;
---@class RBXScriptSignal.CharacterAdded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.CharacterAdded, callback: fun(character: Model)): RBXScriptConnection
---The **CharacterAdded** event fires when a player's character spawns (or
---respawns). This event fires soon after setting `Player/Character` to a
---non-`nil` value or calling `Player/LoadCharacter`, which is before the
---character is parented to the `Workspace`.
---
---This can be used alongside the `Player/CharacterRemoving` event, which
---fires right before a player's character is about to be removed, typically
---after death. As such, both of these events can potentially fire many times
---as players die then respawn in a place. If you want to detect when a
---player joins or leaves the game, use the `Players/PlayerAdded` and
---`Players/PlayerRemoving` events instead.
---
---Note that the `Humanoid` and its default body parts (head, torso, and
---limbs) will exist when this event fires, but clothing items like
---`Hat|Hats` and `Shirt|Shirts`, and `Pants` may take a few seconds to be
---added to the character. Connect `Instance/ChildAdded` on the added
---character to detect these, or wait for the
---`Player/CharacterAppearanceLoaded` event to be sure the character has
---everything equipped.
---
Player.CharacterAdded = nil;
---@class RBXScriptSignal.CharacterAppearanceLoaded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.CharacterAppearanceLoaded, callback: fun(character: Model)): RBXScriptConnection
---This event fires when the the full appearance of a `Player`'s
---`Player/Character` has been inserted.
---
---`Player/Character`'s generally have a range of objects modifying their
---appearance including `Accoutrement|Accoutrements`, `Shirt|Shirts`, `Pants`
---and `CharacterMesh|CharacterMeshes`. This event will fire when all such
---objects have been inserted into the `Player/Character`.
---
---One use for this event, is to remove and save aspects of a
---`Player/Character|Characters` appearance to be used later. See below for
---an example of this.
---
Player.CharacterAppearanceLoaded = nil;
---@class RBXScriptSignal.CharacterRemoving : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.CharacterRemoving, callback: fun(character: Model)): RBXScriptConnection
---The CharacterRemoving event fires right before a player's character is
---removed, such as when the player is respawning.
---
---This event can be used alongside the `Player/CharacterAdded` event, which
---fires when a player's character spawns or respawns. For instance, if you
---would like print a message every time a player spawns and dies:
---
---```lua
---local Players = game:GetService("Players")
---
---local function onCharacterSpawned(player)
---	print(player.Name .. " is spawning")
---end
---
---local function onCharacterDespawned(player)
---	print(player.Name .. " is despawning")
---end
---
---local function onPlayerAdded(player)
---	player.CharacterAdded:Connect(function ()
---		onCharacterDespawned(player)
---	end)
---	player.CharacterRemoving:Connect(function ()
---		onCharacterDespawned(player)
---	end)
---end
---
---Players.PlayerAdded:Connect(onPlayerAdded)
---```
---
---This event is only concerned with the `Player/Character|Character` of a
---`Player`. If you instead need to track when a player joins/leaves the
---game, use the events `Players/PlayerAdded` and `Players/PlayerRemoving`.
---
Player.CharacterRemoving = nil;
---@class RBXScriptSignal.Chatted : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Chatted, callback: fun(message: string, recipient: Player)): RBXScriptConnection
---The Chatted event fires when a `Player` types a message and presses enter
---in Roblox's provided chat bar. This is done using some Lua bindings by the
---default chat script. You can prevent players from chatting by using
---`StarterGui/SetCoreGuiEnabled` and disabling the Chat `Enum/CoreGuiType`.
---
---#### Chat Commands
---
---Using this event and some string manipulation functions like `string.sub`
---and `string.lower`, it is possible to create chat commands, even with
---arguments like player names. Usually, commands are prefixed such as
---`heal PlayerName`. To check for a prefix in a string, use `string.sub` on
---the message to check a substring of the message:
---`string.sub(message, 1, 6) == "/heal "` (note the inclusion of the space)
---. Then, extract the rest of the command using `string.sub` again:
---`string.sub(message, 7)` will be equal to the player name. Check if that
---player exists, and if so, perform the command's action (in this example,
---healing them). Check the code samples for examples of chat commands.
---
---#### Filtering
---
---The message text fired with this event is **unfiltered**. If you are
---displaying player input like chat to other players in any form, it must be
---filtered using `Chat/FilterStringAsync`. Keep this in mind when creating
---your own chat systems; if your game does not properly filter chat it may
---have moderation action taken against it.
---
Player.Chatted = nil;
---@class RBXScriptSignal.FriendStatusChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.FriendStatusChanged, callback: fun(player: Player, friendStatus: FriendStatus)): RBXScriptConnection
---
Player.FriendStatusChanged = nil;
---@class RBXScriptSignal.Idled : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Idled, callback: fun(time: double)): RBXScriptConnection
---This event is usually fired two minutes after the game engine classifies
---the `Player|player` as idle. Time is the amount of seconds since this
---point.
---
---This can be used to track when a player has been idled for approximately
---two minutes - which can be useful for implementing away from keyboard
---(AFK) features into a game.
---
---When the game engine classifies a player as idle, this event is called
---after two minutes. After every check, if the player is still idled, the
---event will continue to fire until the check reveals the player is no
---longer idle.
---
---This event is used by Roblox to automatically disconnect players that have
---been idle for at least 20 minutes. If you would like to track when this
---disconnect occurs, considering using `Players/PlayerRemoving` alongside
---this event.
---
Player.Idled = nil;
---@class RBXScriptSignal.OnTeleport : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnTeleport, callback: fun(teleportState: TeleportState, placeId: int64, spawnName: string)): RBXScriptConnection
---Fired when the TeleportState of a player changes. This event is useful for
---detecting whether a teleportation was successful.
---
---#### What is the TeleportState?
---
---When a teleportation request is made using `TeleportService`, there are a
---series of stages before the `Player` is teleported. The current stage is
---represented by the `Enum/TeleportState` value which is given by
---OnTeleport. See below for a practical example of this.
---
Player.OnTeleport = nil;
---@class RBXScriptSignal.SimulationRadiusChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.SimulationRadiusChanged, callback: fun(radius: float)): RBXScriptConnection
---Fired when the `Player`'s `Player/SimulationRadius` is changed.
---
---#### What is the SimulationRadius?
---
---`Player/SimulationRadius` determines the radius around the
---`Player/Character` in which physically simulated objects, for whom network
---ownership is set to automatic, are physically simulated by the `Player`.
---In cases where a `BasePart` or assembly is within multiple player's
---SimulationRadiuses, the closest player is chosen.
---
---`Player/SimulationRadius`, measured in studs, starts at 10 and grows at a
---rate of 5% per second until it reaches `Player/MaximumSimulationRadius`.
---
---Note:
---
---- The `Player/SimulationRadius` can be visualized using
---  `PhysicsSettings/AreRegionsShown`
---- For more information on network ownership, please see [this tutorial][1]
---
---[1]: https://developer.roblox.com/articles/Network-Ownership
---
Player.SimulationRadiusChanged = nil;
---@class PlayerEmulatorService : Instance
---@field public CustomPoliciesEnabled bool
---@field public EmulatedCountryCode string
---@field public EmulatedGameLocale string
---@field public PlayerEmulationEnabled bool
---@field public SerializedEmulatedPolicyInfo BinaryString
local PlayerEmulatorService;
---
PlayerEmulatorService.CustomPoliciesEnabled = nil;
---
PlayerEmulatorService.EmulatedCountryCode = nil;
---
PlayerEmulatorService.EmulatedGameLocale = nil;
---
PlayerEmulatorService.PlayerEmulationEnabled = nil;
---
PlayerEmulatorService.SerializedEmulatedPolicyInfo = nil;
---@param emulatedPolicyInfo Dictionary
---@return void
PlayerEmulatorService.SetEmulatedPolicyInfo = function(self, emulatedPolicyInfo) end;
---@param regionCode string
---@return bool
PlayerEmulatorService.RegionCodeWillHaveAutomaticNonCustomPolicies = function(self, regionCode) end;
---@return Dictionary
PlayerEmulatorService.GetEmulatedPolicyInfo = function(self) end;
---@class PlayerGui : BasePlayerGui, Instance
---@field public CurrentScreenOrientation ScreenOrientation
---@field public ScreenOrientation ScreenOrientation
---@field public SelectionImageObject GuiObject
---@field public TopbarTransparencyChangedSignal RBXScriptSignal.TopbarTransparencyChangedSignal
---The PlayerGui object is a container that holds a `Player`'s user GUI. If a
---`ScreenGui` is a descendant of a PlayerGui, then any `GuiObject` inside of the
---ScreenGui will be drawn to the player's screen. Any `LocalScript` will run as
---soon as it is inserted into a PlayerGui.
---
---When a player first joins a game, their PlayerGui is automatically inserted
---into their `Player` object. When the player's `Player/Character` spawns for
---the first time all of the contents of `StarterGui` are automatically copied
---into the player's PlayerGui. Note that if `Players/CharacterAutoLoads` is set
---to false the character will not spawn and StarterGui contents will not be
---copied until `Player/LoadCharacter` is called. If
---`StarterGui/ResetPlayerGuiOnSpawn` is set to true then every time the player's
---character respawns all of the contents of that player's PlayerGui is cleared
---and replaced with the contents of StarterGui.
---
---```lua
----- Accessing PlayerGui from a LocalScript:
---game:GetService('Players').LocalPlayer:WaitForChild('PlayerGui')
---```
---
local PlayerGui;
---Describes the user's current screen orientation.
---
PlayerGui.CurrentScreenOrientation = nil;
---Sets the preferred screen orientation mode for this user, if the user is
---on a mobile device.
---
PlayerGui.ScreenOrientation = nil;
---Overrides the default selection adornment (used for gamepads). For best
---results, this should point to a GuiObject.
---
PlayerGui.SelectionImageObject = nil;
---@param transparency float
---@return void
---SetTopbarTransparency sets the transparency of the Topbar CoreGui. A value
---of 0 is completely opaque, and a value of 1 is completely transparent.
---Values outside of the range [0, 1] are clamped. The default transparency
---of the topbar is 0.5. The current transparency can be retrieved using the
---similarly-named `PlayerGui/GetTopbarTransparency|GetTopbarTransparency`
---function.
---
---#### Comparison of Values
---
---The screenshots below show the topbar at 1.0, 0.5 and 0.0 transparency.
---<img src="/assets/bltb3d5158183e86b86/Topbar_Transparency_1.0.png" alt="The TopBar with a transparency of 1.0 (completely hidden)]"  />
---<img src="/assets/blt3d2716062cdd8606/Topbar_Transparency_0.5.png" alt="The TopBar with a transparency of 0.5 (50% transparency)]"  />
---<img src="/assets/bltc0dd5d97e6bbebae/Topbar_Transparency_0.png" alt="The TopBar with a transparency of 0.0 (completely opaque)"  />
---
---#### Usage
---
---This method is often used when re-styling the topbar to match the visual
---aesthetic of a game. By hiding the topbar, you can create your own custom
---topbar. See the code samples for an example.
---
---#### Alternative
---
---Using the `StarterGui/SetCore` method with the `TopbarEnabled` option
---allows you to enable/disable the entire topbar and all of its features
---(player list, health, etc). By contrast, this method only affects how the
---topbar is displayed.
---
PlayerGui.SetTopbarTransparency = function(self, transparency) end;
---@return float
---Returns the transparency of the Topbar.
---
PlayerGui.GetTopbarTransparency = function(self) end;
---@class RBXScriptSignal.TopbarTransparencyChangedSignal : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.TopbarTransparencyChangedSignal, callback: fun(transparency: float)): RBXScriptConnection
---Fires when the transparency of the Topbar CoreGui changes.
---
PlayerGui.TopbarTransparencyChangedSignal = nil;
---@class PlayerMouse : Mouse, Instance
---The PlayerMouse behaves identically to the `Mouse` object that is obtained
---using `Tool/Equipped`. It can be accessed from `LocalScript`s using the local
---player's `Player/GetMouse` method.
---
---The only difference between the PlayerMouse and the `Mouse` object is the
---PlayerMouse can be obtained using the `Player/GetMouse` method.
---
---In most cases developers are advised to use the new `UserInputService`.
---However the PlayerMouse and Mouse objects remain supported for a number of
---reasons.
---
---For more information on how to use the mouse object, see the `Mouse` page.
---
local PlayerMouse;
---@class PlayerScripts : Instance
---@field public ComputerCameraMovementModeRegistered RBXScriptSignal.ComputerCameraMovementModeRegistered
---@field public ComputerMovementModeRegistered RBXScriptSignal.ComputerMovementModeRegistered
---@field public TouchCameraMovementModeRegistered RBXScriptSignal.TouchCameraMovementModeRegistered
---@field public TouchMovementModeRegistered RBXScriptSignal.TouchMovementModeRegistered
---`PlayerScripts` is a container object located inside `Player` objects within
---the `Players` game service. It is created automatically when a player joins
---the game. Its main purpose is to contain `LocalScript`s copied from the
---`StarterPlayerScripts` container within the `StarterPlayer` game service,
---which happens once upon creation. Descendant `LocalScripts` of `PlayerScripts`
---will run code on the client of the `Player`.
---
---Unlike the `Backpack` and `PlayerGui` containers, the `PlayerScripts`
---container is not accessible to the server. Server `Script` objects will not
---run when parented to `PlayerScripts`.
---
local PlayerScripts;
---@return void
---Unregisters all ComputerMovementMode enums from the game settings menu.
---
PlayerScripts.ClearComputerMovementModes = function(self) end;
---@return Array
PlayerScripts.GetRegisteredTouchMovementModes = function(self) end;
---@param cameraMovementMode TouchCameraMovementMode
---@return void
---Registers that a touch camera movement mode is available to be selected
---from the game menu.
---
PlayerScripts.RegisterTouchCameraMovementMode = function(self, cameraMovementMode) end;
---@return void
---Unregisters all TouchMovementMode enums from the game settings menu.
---
PlayerScripts.ClearTouchMovementModes = function(self) end;
---@param cameraMovementMode ComputerCameraMovementMode
---@return void
---Registers that a computer camera movement mode is available to be selected
---from the game menu.
---
PlayerScripts.RegisterComputerCameraMovementMode = function(self, cameraMovementMode) end;
---@param movementMode ComputerMovementMode
---@return void
---Registers that a computer movement mode is available to be selected from
---the game menu.
---
PlayerScripts.RegisterComputerMovementMode = function(self, movementMode) end;
---@return Array
PlayerScripts.GetRegisteredComputerCameraMovementModes = function(self) end;
---@param movementMode TouchMovementMode
---@return void
---Registers that a touch movement mode is available to be selected from the
---game menu.
---
PlayerScripts.RegisterTouchMovementMode = function(self, movementMode) end;
---@return void
---Unregisters all TouchCameraMovementMode enums from the game settings menu.
---
PlayerScripts.ClearTouchCameraMovementModes = function(self) end;
---@return void
---Unregisters all ComputerCameraMovementMode enums from the game settings
---menu.
---
PlayerScripts.ClearComputerCameraMovementModes = function(self) end;
---@return Array
PlayerScripts.GetRegisteredComputerMovementModes = function(self) end;
---@return Array
PlayerScripts.GetRegisteredTouchCameraMovementModes = function(self) end;
---@class RBXScriptSignal.ComputerCameraMovementModeRegistered : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ComputerCameraMovementModeRegistered, callback: fun()): RBXScriptConnection
---
PlayerScripts.ComputerCameraMovementModeRegistered = nil;
---@class RBXScriptSignal.ComputerMovementModeRegistered : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ComputerMovementModeRegistered, callback: fun()): RBXScriptConnection
---
PlayerScripts.ComputerMovementModeRegistered = nil;
---@class RBXScriptSignal.TouchCameraMovementModeRegistered : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.TouchCameraMovementModeRegistered, callback: fun()): RBXScriptConnection
---
PlayerScripts.TouchCameraMovementModeRegistered = nil;
---@class RBXScriptSignal.TouchMovementModeRegistered : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.TouchMovementModeRegistered, callback: fun()): RBXScriptConnection
---
PlayerScripts.TouchMovementModeRegistered = nil;
---@class Players : Instance
---@field public BubbleChat bool
---@field public CharacterAutoLoads bool
---@field public ClassicChat bool
---@field public LocalPlayer Player
---@field public MaxPlayers int
---@field public MaxPlayersInternal int
---@field public NumPlayers int
---@field public PreferredPlayers int
---@field public PreferredPlayersInternal int
---@field public RespawnTime float
---@field public localPlayer Player
---@field public numPlayers int
---@field public FriendRequestEvent RBXScriptSignal.FriendRequestEvent
---@field public GameAnnounce RBXScriptSignal.GameAnnounce
---@field public PlayerAdded RBXScriptSignal.PlayerAdded
---@field public PlayerChatted RBXScriptSignal.PlayerChatted
---@field public PlayerConnecting RBXScriptSignal.PlayerConnecting
---@field public PlayerDisconnecting RBXScriptSignal.PlayerDisconnecting
---@field public PlayerMembershipChanged RBXScriptSignal.PlayerMembershipChanged
---@field public PlayerRejoining RBXScriptSignal.PlayerRejoining
---@field public PlayerRemoving RBXScriptSignal.PlayerRemoving
---The Players game service contains only `Player` objects for presently
---connected clients to a Roblox game server. It also contains information about
---a place's configuration (such as bubble chat or classic chat). It can fetch
---information about players not connected to the server, such as character
---appearances, friends and avatar thumbnail.
---
local Players;
---The BubbleChat `Players` property indicates whether or not bubble chat is
---enabled. It is set with the `Players/SetChatStyle` method using the
---`Enum/ChatStyle` enum.
---
---When this chat mode is enabled, the game displays chats in the chat user
---interface at the top-left corner of the screen.
---
---There are two other chat modes, `Players/ClassicChat` and a chat mode
---where both classic and bubble chat are enabled.
---
Players.BubbleChat = nil;
---The CharacterAutoLoads `Players` property indicates whether `Character`s
---will respawn automatically. The default value is _true_.
---
---If this property is disabled (_false_), players `Characters` will not
---spawn until the `Player/LoadCharacter` function is called for each
---`Player` - including when players join the game.
---
---This can be useful in games where players have finite lives, such as
---competitive games in which players do not respawn until a game round ends.
---
Players.CharacterAutoLoads = nil;
---Indicates whether or not classic chat is enabled. This property is set by
---the `Players/SetChatStyle` method using the `Enum/ChatStyle` enum.
---
---When this chat mode is enabled, the game displays chats in a bubble above
---the sender's head.
---
---There are two other chat modes, `Players/BubbleChat` and a chat mode where
---both classic and bubble chat are enabled.
---
Players.ClassicChat = nil;
---**LocalPlayer** is a read-only property which refers to the `Player` whose
---client is running the game.
---
---This property is only defined for `LocalScript`s (and `ModuleScript`s
---required by them), as they run on the client. For the server (on which
---`Script` objects run their code), this property is nil.
---
---This property is useful in `LocalScript`s which display information about
---the player viewing a GUI. Using For example, if there were `IntValue`
---parented to a `Player` named "Coins" which represented how much money that
---player has, you could use the following to display this value for them:
---
---```lua
----- This code is appropriate for a LocalScript in StarterGui,
----- for example: game.StarterGui.ScreenGui.TextLabel.LocalScript
---
---local player = game:GetService("Players").LocalPlayer
----- Wait for a value we're expecting for the server to have created
---local vCoins = player:WaitForChild("Coins")
---
---local textLabel = script.Parent
---local function update()
---    textLabel.Text = "Coins: " .. vCoins.Value
---end
---
----- Update once, then every time the value changes
---update()
---vCoins.Changed:Connect(update)
---```
---
---#### Loading GUIs
---
---When creating loading GUIs using `ReplicatedFirst`, sometimes a
---`LocalScript` can run before the LocalPlayer is available. In this case,
---you should yield until it becomes available by using
---`Instance/GetPropertyChangedSignal`
---
---```lua
---local Players = game:GetService("Players")
----- Below: access Players.LocalPlayer; if it is nil, we'll wait for it using GetPropertyChangedSignal.
---local player = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):wait()
---```
---
---Doing this isn't for a `LocalScript` within `StarterGui`,
---`StarterPlayerScripts` or `StarterCharacterScripts`: these scripts can
---only run after a `Player` object is already available, and LocalPlayer
---will have been set by then.
---
Players.LocalPlayer = nil;
---The MaxPlayers `Players` property determines the maximum amount of players
---that can be in this server.
---
---While this property cannot be set through `Script`s or `LocalScript`s
---in-game, it can be set from the place settings' _Access_ tab on the site.
---
---You can change this value depending on the number of player's you would
---like to limit in a single server. The number of players in a server
---affects the feel of your game and it's performance.
---
Players.MaxPlayers = nil;
---The MaxPlayersInternal `Players` property is the internal variant of
---`Players/MaxPlayers` and determines the maximum amount of players that can
---be in this server.
---
---While this property cannot be set through `Script`s or `LocalScript`s
---in-game, it can be set from the place settings' _Access_ tab on the site.
---
---You can change this value depending on the number of player's you would
---like to limit in a single server. The number of players in a server
---affects the feel of your game and it's performance.
---
Players.MaxPlayersInternal = nil;
---This property indicates the number of people in the server at the current
---time. It is read only. Meaning it cannot be written to, only read.
---
Players.NumPlayers = nil;
---The PreferredPlayers property determines the number of players to which
---Roblox's matchmaker will fill servers. This is number should be less than
---the maximum number of players supported by the game in order to leave some
---spaces for additional players (such as friends or those following another
---player) to join.
---
---This property can be set from the place settings' _Access_ tab on the
---site. It cannot be set through `Script`s or `LocalScript`s in-game.
---
---When a player press the Play button to join a game server, Roblox attempts
---to match that player to a server such that the player count will try not
---to exceed PreferredPlayers. If a friend (or friends) of the player are in
---a server that is not full, Roblox prioritizes that server instead.
---
---#### Example
---
---There are 8 players in a server where the `Player/MaximumPlayers` is 10
---and the PreferredPlayers is 8. A player presses the play button:
---
---- If the player has **at least one friend** in the server, Roblox selects
---  the already-existing server so the player can play with their friend.
---- If the player has **no friends** in the server, a new server is started
---  since the existing server has met the number of PreferredPlayers (the
---  player could still join the server by manually selecting it or following
---  another user).
---
Players.PreferredPlayers = nil;
---The PreferredPlayersInternal `Players` property is the internal variant of
---`Players/PreferredPlayersInternal`, which controls the preferred amount of
---players for this server.
---
---When someone press the Play-button, Roblox will try to fill all servers up
---to the amount of given players. If there is a server that has friends on
---you in it, Roblox will send you to that server instead. (Unless the server
---is completely full)
---
---This system allows developers to have servers more friends-friendly.
---Normally, when PreferredPlayers ~= MaxPlayers, a server would never fill
---up, unless a player follows another player, or a player pressing the Play
---button has one or more friends in that server.
---
---While this property cannot be set through `Script`s or `LocalScript`s
---in-game, it can be set from the place settings' _Access_ tab on the site.
---
---##Example Given a server with 8 players where the `Player/MaximumPlayers`
---is 10 and the PreferredPlayers is 8, 2 things can happen whenever a player
---press the Play-button:
---
---- The player has friends in the server, which makes Roblox send them to
---  that server
---- The player has no friends in it, and will start a new server, as the
---  server is already "filled" up to PreferredPlayers amount.
---
Players.PreferredPlayersInternal = nil;
---The RespawnTime property controls the time, in seconds, it takes for a
---player to respawn when `Players/CharacterAutoLoads` is _true_. It defaults
---to 5.0 seconds.
---
---![RespawnTime property in Studio Explorer Window][1]
---
---This is useful when you want to change how long it takes to respawn based
---on the type of your game but don't want to handle spawning players
---individually. Social games may want to decrease the respawn time whereas
---action games may want to increase it.
---
---Although this can be set from within a `Script`, you will likely set the
---property from within Studio via the Players service property window.
---
---```lua
---local Players = game:GetService(“Players”)
---Players.RespawnTime = 10.0
---```
---
---See also:
---
---- `Player/SpawnLocation`, if set, the player will respawn at the given
---  `SpawnLocation`
---
---[1]: /assets/blt18cb6ff9dcd06eef/RespawnTimeInExplorer.png
---
Players.RespawnTime = nil;
---
Players.localPlayer = nil;
---This property indicates the number of people in the server at the current
---time. It is read only. Meaning it cannot be written to, only read.
---
Players.numPlayers = nil;
---@param userName string
---@return int64
---This function will send a query to the Roblox website asking what the
---`Player/UserId` is of the account with the given `Player` name.
---
---This method errors if no account exists with the given username. If you
---aren't certain such an account exists, it's recommended to wrap calls to
---this function with `pcall`. In addition, you can manually cache results to
---quickly make future calls with the same username. See the code samples to
---learn how to do this.
---
Players.GetUserIdFromNameAsync = function(self, userName) end;
---@param userId int64
---@return Model
---Returns a character Model set-up with everything equipped to match the
---avatar of the user specified by the passed in userId. This includes
---whether that character is currently R6 or R15.
---
Players.CreateHumanoidModelFromUserId = function(self, userId) end;
---@param message string
---@return void
---This function makes the `Players/LocalPlayer` chat the given message,
---which will only be viewable by users on the same team. Since this item is
---protected, attempting to use it in a `Script` or `LocalScript` will cause
---an error.
---
---This function is used internally when the `Players/LocalPlayer` sends a
---message to their team.
---
---If you would like to create a custom chat system where you can define
---custom functions such as these, take a look at the tutorial [here][1].
---
---[1]: https://developer.roblox.com/articles/Lua-Chat-System
---
Players.TeamChat = function(self, message) end;
---@param userId int64
---@return Model
---This function returns a `Model` containing the assets which the player is
---wearing, excluding gear.
---
---If you prefer a Lua table of information about these assets instead of a
---model, use `Players/GetCharacterAppearanceInfoAsync`.
---
---This method behaves similar to `InsertService/LoadAsset`, and is like
---using `InsertService/LoadAsset|LoadAsset` on the asset information
---returned by `Players/GetCharacterAppearanceInfoAsync` except faster.
---
Players.GetCharacterAppearanceAsync = function(self, userId) end;
---@param player Player
---@param reason string
---@param optionalMessage string
---@return void
---This function attempts to report the given `Player|player` for the given
---reason. Since this item is protected, attempting to use it in a `Script`
---or `LocalScript` will cause an error.
---
---The game uses this function internally when a player interact's with the
---game's default report system. Players should use this system to report
---players for offensive or inappropriate behavior that does not abide by
---Roblox's [Terms of Service Agreement][1] and [Community Rules][2].
---
---[1]:
---  https://en.help.roblox.com/hc/en-ushttps://developer.roblox.com/articles/115004647846-Roblox-Terms-of-Use
---[2]:
---  https://en.help.roblox.com/hc/en-ushttps://developer.roblox.com/articles/203313410
---
Players.ReportAbuse = function(self, player, reason, optionalMessage) end;
---@param message string
---@param player Instance
---@return void
---This`function delivers the given message to a recipient without anyone else seeing. Since this item is protected, attempting to use it in a`Script`or`LocalScript`
---will cause an error.
---
---This function is used internally when the `Players/LocalPlayer` sends
---whispers another player.
---
---If you would like to create a custom chat system where you can define
---custom functions such as these, take a look at the tutorial [here][1].
---
---[1]: https://developer.roblox.com/articles/Lua-Chat-System
---
Players.WhisperChat = function(self, message, player) end;
---@param userId int64
---@return Dictionary
---This function returns information about a player's avatar (ignoring gear)
---on the Roblox website in the form of a dictionary. It is not to be
---confused with
---`Players/GetCharacterAppearanceAsync|GetCharacterAppearanceAsync`, which
---actually loads the assets described by this method. You can use
---`InsertService/LoadAsset` to load the assets that are used in the player's
---avatar. The structure of the returned dictionary is as follows:
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Description</th>
---		</tr>
---	</thead>
---	<tr>
---    <td><code>bodyColors</code></td>
---    <td>table (see below)</td>
---    <td>Describes the BrickColor values for each limb</td>
---  </tr>
---	<tr>
---    <td><code>assets</code></td>
---    <td>table (see below)</td>
---    <td>Describes the equipped assets (hats, body parts, etc)</td>
---  </tr>
---	<tr>
---    <td><code>defaultPantsApplied</code></td>
---    <td>bool</td>
---    <td>Describes whether default pants are applied</td>
---  </tr>
---	<tr>
---    <td><code>defaultShirtApplied</code></td>
---    <td>bool</td>
---    <td>Describes whether default shirt is applied</td>
---  </tr>
---	<tr>
---    <td><code>playerAvatarType</code></td>
---    <td>string</td>
---    <td>Either "R15" or "R6"</td>
---  </tr>
---	<tr>
---    <td><code>scales</code></td>
---    <td>table (see below)</td>
---    <td>Describes various body scaling factors</td>
---  </tr>
---</table>
---
---#### Assets sub-table
---
---The assets table is an array of tables containing the following keys that
---describe the assets currently equipped by the player:
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Description</th>
---		</tr>
---	</thead>
---	<tr>
---    <td><code>id</code></td>
---    <td>number</td>
---    <td>The asset ID of the equipped asset</td>
---  </tr>
---	<tr>
---    <td><code>assetType</code></td>
---    <td>table</td>
---    <td>A table with <code>name</code> and <code>id</code> fields, each describing the kind of asset equipped ("Hat", "Face", etc.)</td>
---  </tr>
---	<tr>
---    <td><code>name</code></td>
---    <td>string</td>
---    <td>The name of the equipped asset</td>
---  </tr>
---</table>
---
---#### Scales sub-table
---
---The scales table has the following keys, each a number corresponding to
---one `Humanoid` scaling property: `bodyType`, `head`, `height`,
---`proportion`, `depth`, `width`.``
---
---#### Body Colors sub-table
---
---The body colors table has the following keys, each a number corresponding
---to a `DataType/BrickColor` ID number which can be used with
---`BrickColor.new(id)`: `leftArmColorId`, `torsoColorId`, `rightArmColorId`,
---`headColorId`, `leftLegColorId`, `rightLegColorId`.
---
Players.GetCharacterAppearanceInfoAsync = function(self, userId) end;
---@param userId int64
---@return FriendPages
---The GetFriends `Players` function returns a `FriendPages` object which
---contains information for all of the given `Player|Player's` friends. The
---items within the FriendPages object are tables with the following fields:
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Description</th>
---		</tr>
---	</thead>
---	<tr>
---		<td>Id</td>
---		<td>int64</td>
---		<td>The friend's UserId</td>
---	</tr>
---	<tr>
---		<td>Username</td>
---		<td>string</td>
---		<td>The friend's username</td>
---	</tr>
---    <tr>
---      <td>DisplayName</td>
---      <td>string</td>
---      <td>The <a href='/reference/engine/classes/Player#DisplayName'>display name</a> of the friend.</td>
---    </tr>
---	<tr>
---		<td>IsOnline</td>
---		<td>bool</td>
---		<td>If the friend is currently online</td>
---	</tr>
---</table>
---
---See the code samples for an easy way to iterate over all a player's
---friends.
---
Players.GetFriendsAsync = function(self, userId) end;
---@return Objects
Players.getPlayers = function(self) end;
---@param style ChatStyle
---@return void
---This function sets whether BubbleChat and ClassicChat are being used, and
---tells TeamChat and Chat what to do using the `ChatStyle` enum. Since this
---item is protected, attempting to use it in a `Script` or `LocalScript`
---will cause an error.
---
---This function is used internally when the chat mode is set by the game.
---
Players.SetChatStyle = function(self, style) end;
---@param userId int64
---@param thumbnailType ThumbnailType
---@param thumbnailSize ThumbnailSize
---@return Tuple
---This function fetches a content URL of an image of a player's avatar given
---their `Player/UserId|UserId`, the image size (as an enum) and type (also
---an enum: avatar, bust, headshot). It also returns a bool describing if the
---image is ready to be used.
---
---Most often, this method is used with `ImageLabel/Image` to display player
---pictures next to their username in-game. It is also appropriate for
---`Decal/Texture` as well.
---
---#### Available Sizes
---
---`Enum.ThumbnailSize`: `Size48x48`, `Size60x60`, `Size100x100`,
---`Size150x150`, `Size180x180`, `Size353x353`, `Size420x420`.
---
---#### Types of User Thumbnails
---
---<table>
---	<thead>
---		<tr>
---			<th>Enum.ThumbnailType</th>
---			<th>Description</th>
---			<th>Example (60px)</th>
---		</tr>
---	</thead>
---	<tr>
---    <td><code>AvatarBust</code></td>
---  <td>Upper chest and head</td>
---  <td><img src="https://www.roblox.com/bust-thumbnail/image?userId=269323&width=60&height=60&format=png" alt="" /></td>
---  </tr>
---	<tr>
---    <td><code>AvatarThumbnail</code></td>
---  <td>Entire avatar</td>
---  <td><img src="https://www.roblox.com/avatar-thumbnail/image?userId=269323&width=60&height=60&format=png" alt="" /></td>
---  </tr>
---	<tr>
---    <td><code>HeadShot</code></td>
---  <td>Just the head and face</td>
---  <td><img src="https://www.roblox.com/headshot-thumbnail/image?userId=269323&width=60&height=60&format=png" alt="" /></td>
---  </tr>
---</table>
---
Players.GetUserThumbnailAsync = function(self, userId, thumbnailType, thumbnailSize) end;
---@param message string
---@return void
---This function makes the local player chat the given message. Since this
---item is protected, attempting to use it in a `Script` or `LocalScript`
---will cause an error.
---
---Instead, when creating a custom chat system, or a system that needs access
---to the chat, you can use the `Chat` service's `Chat/Chat` function
---instead.
---
Players.Chat = function(self, message) end;
---@return Objects
---This function was once used to return a list of players in a game, but has
---since been deprecated in favor of `Players/GetPlayers`
---
Players.players = function(self) end;
---@param userId int64
---@return Player
---This function searches each `Player|player` in `Players` for one whose
---`Player/UserId` matches the given UserId. If such a player does not exist,
---it simply returns `nil`. It is equivalent to the following function:
---
---```lua
---local Players = game:GetService("Players")
---local function getPlayerByUserId(userId)
---	for _, player in pairs(Players:GetPlayers()) do
---		if player.UserId == userId then
---			return player
---		end
---	end
---end
---```
---
---This method is useful in finding the purchaser of a developer product
---using `MarketplaceService/ProcessReceipt`, which provides a table that
---includes the purchaser's UserId and not a reference to the Player object
---itself. Most games will require a reference to the player in order to
---grant products.
---
Players.GetPlayerByUserId = function(self, userId) end;
---@param userId int64
---@return string
---The GetNameFromUserIdAsync `Players` function will send a query to the
---Roblox website asking what the username is of the account with the given
---`Player/UserId|UserId`.
---
---This method errors if no account exists with the given UserId. If you
---aren't certain such an account exists, it's recommended to wrap calls to
---this function with `pcall`. In addition, you can manually cache results to
---make future calls with the same UserId fast. See the code samples to learn
---how to do this.
---
Players.GetNameFromUserIdAsync = function(self, userId) end;
---@param description HumanoidDescription
---@param rigType HumanoidRigType
---@param assetTypeVerification AssetTypeVerification
---@return Model
---Returns a character Model equipped with everything specified in the passed
---in HumanoidDescription, and is R6 or R15 as specified by the rigType.
---
Players.CreateHumanoidModelFromDescription = function(self, description, rigType, assetTypeVerification) end;
---@param userId int64
---@param userName string
---@param displayName string
---@param membershipType MembershipType
---@param isUnder13 bool
---@return void
Players.SetLocalPlayerInfo = function(self, userId, userName, displayName, membershipType, isUnder13) end;
---@param userId int64
---@return HumanoidDescription
---Returns a HumanoidDescription which specifies everything equipped for the
---avatar of the user specified by the passed in userId. Also includes scales
---and body colors.
---
Players.GetHumanoidDescriptionFromUserId = function(self, userId) end;
---@return Player
---The LocalPlayer will be set automatically when a client connects to the
---game, so uses for this method are extremely limited. This function is
---protected, attempting to use it in a `Script` or `LocalScript` will cause
---an error.
---
---Although you cannot create the LocalPlayer, you can reference the
---LocalPlayer created by a game using the following code in a LocalScript:
---
---```lua
---	local player = game.Players.LocalPlayer
---```
---
Players.CreateLocalPlayer = function(self) end;
---@param outfitId int64
---@return HumanoidDescription
---Returns the HumanoidDescription for a specified outfitId, which will be
---set with the parts/colors/Animations etc of the outfit. An outfit can be
---one created by a user, or it can be the outfit for a bundle created by
---Roblox.
---
Players.GetHumanoidDescriptionFromOutfitId = function(self, outfitId) end;
---@param character Model
---@return Player
---This function returns the `Player` associated with the given
---`Player/Character`, or `nil` if one cannot be found. It is equivalent to
---the following function:
---
---```lua
---local function getPlayerFromCharacter(character)
---	for _, player in pairs(game:GetService("Players"):GetPlayers()) do
---		if player.Character == character then
---			return player
---		end
---	end
---end
---```
---
---This method is often used when some event in player's character fires
---(such as their `Humanoid` `Humanoid/Died|dying`). Such an event might not
---directly reference the Player object, but this method provides easy
---access. The inverse of this function can be described as getting the
---Character of a Player. To do this, simply access the Character property.
---
Players.GetPlayerFromCharacter = function(self, character) end;
---@return Objects
---This method returns a table of all presently connected `Player`. It
---functions the same way `Instance/GetChildren` would except that it only
---returns Player objects. It functions similarly to `Instance/GetChildren`
---when called on `Players`. 0 When used in conjunction with a for-loop, it
---is useful for iterating over all players in a game.
---
---```lua
---Players = game:GetService("Players")
---for i, player in pairs(Players:GetPlayers()) do
---    print(player.Name)
---end
---```
---
---Scripts that connect to `Players/PlayerAdded` are often trying to process
---every Player that connects to the game. This method is useful for
---iterating over already-connected players that wouldn't fire
---`Players/PlayerAdded|PlayerAdded`. Using this method ensures that no
---player is missed!
---
---```lua
---local Players = game:GetService("Players")
---
---local function onPlayerAdded(player)
---	print("Player: " .. player.Name)
---end
---
---for _, player in pairs(Players:GetPlayers()) do
---	onPlayerAdded(player)
---end
---Players.PlayerAdded:Connect(onPlayerAdded)
---```
---
Players.GetPlayers = function(self) end;
---@param character Model
---@return Player
Players.playerFromCharacter = function(self, character) end;
---@class RBXScriptSignal.FriendRequestEvent : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.FriendRequestEvent, callback: fun(player: Player, player: Player, friendRequestEvent: FriendRequestEvent)): RBXScriptConnection
---
Players.FriendRequestEvent = nil;
---@class RBXScriptSignal.GameAnnounce : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.GameAnnounce, callback: fun(message: string)): RBXScriptConnection
---
Players.GameAnnounce = nil;
---@class RBXScriptSignal.PlayerAdded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PlayerAdded, callback: fun(player: Player)): RBXScriptConnection
---The PlayerAdded event fires when a player enters the game. This is used to
---fire an event when a player joins a game, such as loading the player's
---saved `GlobalDataStore` data.
---
---This can be used alongside the `Players/PlayerRemoving` event, which fires
---when a player is about to leave the game. For instance, if you would like
---print a message every time a new player joins or leaves the game:
---
---```lua
---local Players = game:GetService("Players")
---
---Players.PlayerAdded:Connect(function(player)
---	print(player.Name .. " joined the game!")
---end)
---
---Players.PlayerRemoving:Connect(function(player)
---	print(player.Name .. " left the game!")
---end)
---```
---
---If you want to track when a player's character is added or removed from
---the game, such as when a player respawns or dies, you can use the
---`Player/CharacterAdded` and `Player/CharacterRemoving` functions.
---
---- Up until recently, this event didn't work on the client (in
---  `Localscript`s), but this has been changed
---
---- This event does not work as expected in _solo mode_, because the player
---  is created before scripts that connect to PlayerAdded run. To handle
---  this case, as well as cases in which the script is added into the game
---  after a player enters, create an OnPlayerAdded function that you can
---  call to handle a player's entrance.
---
Players.PlayerAdded = nil;
---@class RBXScriptSignal.PlayerChatted : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PlayerChatted, callback: fun(chatType: PlayerChatType, player: Player, message: string, targetPlayer: Player)): RBXScriptConnection
---The PlayerChatted `Players` event fires when a player chats.
---
---The value of the `Enum/PlayerChatType` determines the type of chat sent.
---There are three types of chat: table removed due to improper markdown by api reference
---
---Note that this event is not intended for wide use and will not work in
---`Script`s or `LocalScript`s.
---
Players.PlayerChatted = nil;
---@class RBXScriptSignal.PlayerConnecting : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PlayerConnecting, callback: fun(player: Player)): RBXScriptConnection
---The PlayerConnecting `Players` event fires when a player is connecting to
---the game. It indicates the `Player` instance connecting.
---
---This event is not intended for wide use and will not work in `Script`s or
---`LocalScript`s. Instead, you can use the `Player/PlayersAdded` and
---`Players/PlayerRemoving` events.
---
---Similarly, if you want to track when a player's character is added or
---removed from the game, such as when a player respawns or dies, you can use
---the `Player/CharacterAdded` and `Player/CharacterRemoving` functions.
---
Players.PlayerConnecting = nil;
---@class RBXScriptSignal.PlayerDisconnecting : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PlayerDisconnecting, callback: fun(player: Player)): RBXScriptConnection
---The PlayerDisconnecting `Players` event fires when a player is
---disconnecting from the game. It indicates the `Player` instance
---disconnecting.
---
---This event is not intended for wide use and will not work in `Script`s or
---`LocalScript`s. Instead, you can use the `Player/PlayersAdded` and
---`Players/PlayerRemoving` events.
---
---Similarly, if you want to track when a player's character is added or
---removed from the game, such as when a player respawns or dies, you can use
---the `Player/CharacterAdded` and `Player/CharacterRemoving` functions.
---
Players.PlayerDisconnecting = nil;
---@class RBXScriptSignal.PlayerMembershipChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PlayerMembershipChanged, callback: fun(player: Player)): RBXScriptConnection
---This event fires when the game server recognizes that a player's
---membership has changed. Note, however, that the server will only attempt
---to check and update the membership **after** the Premium modal has been
---closed. Thus, to account for cases where the user purchases Premium
---**outside** of the game while playing, you must still prompt them to
---purchase Premium; this will then show a message telling them they're
---already upgraded and, once they close the modal, the game server will
---update their membership and trigger this event.
---
---To learn more about and incorporating Premium into your game, and
---monetizing your game with the Premium Payouts system, take a look at
---[this][1] article.
---
---See also:
---
---- `MarketplaceService/PromptPremiumPurchase`, used to prompt a user to
---  purchase Premium
---- `MarketplaceService/PromptPremiumPurchaseFinished`, fires when the
---  Premium purchase UI closes
---
---[1]: /production/monetization/premium-payouts
---
Players.PlayerMembershipChanged = nil;
---@class RBXScriptSignal.PlayerRejoining : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PlayerRejoining, callback: fun(player: Player)): RBXScriptConnection
---The PlayerRejoining `Players` event fires when a player rejoins a game
---session after having disconnected prior. It indicates the `Player`
---instance rejoining.
---
---This event is not intended for wide use and will not work in `Script`s or
---`LocalScript`s. Instead, you can use the `Player/PlayersAdded` and
---`Players/PlayerRemoving` events.
---
---Similarly, if you want to track when a player's character is added or
---removed from the game, such as when a player respawns or dies, you can use
---the `Player/CharacterAdded` and `Player/CharacterRemoving` functions.
---
Players.PlayerRejoining = nil;
---@class RBXScriptSignal.PlayerRemoving : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PlayerRemoving, callback: fun(player: Player)): RBXScriptConnection
---The PlayerRemoving event fires right before a `Player` leaves the game.
---This event fires before `Instance/ChildRemoved|ChildRemoved` does on
---`Players`, and behaves somewhat similarly to
---`Instance/DescendantRemoving`. Since it fires before the actual removal of
---a `Player`, this event is useful for storing player data using a
---`GlobalDataStore`.
---
---This can be used alongside the `Player/PlayerAdded` event, which fires
---when a player joins the game. For instance, to print a message every time
---a new player joins or leaves the game:
---
---```lua
---local Players = game:GetService("Players")
---
---Players.PlayerAdded:Connect(function(player)
---  print(player.Name .. " joined the game!")
---end)
---
---Players.PlayerRemoving:Connect(function(player)
---  print(player.Name .. " left the game!")
---end)
---```
---
---If you want to track when a player's character is added or removed from
---the game, such as when a player respawns or dies, you can use the
---`Player/CharacterAdded` and `Player/CharacterRemoving` functions.
---
Players.PlayerRemoving = nil;
---@class Plugin : Instance
---@field public CollisionEnabled bool
---@field public GridSize float
---@field public HostDataModelType StudioDataModelType
---@field public HostDataModelTypeIsCurrent bool
---@field public MultipleDocumentInterfaceInstance MultipleDocumentInterfaceInstance
---@field public UsesAssetInsertionDrag bool
---@field public Deactivation RBXScriptSignal.Deactivation
---@field public Ready RBXScriptSignal.Ready
---@field public Unloading RBXScriptSignal.Unloading
---Plugin is the main object responsible for creating basic studio widgets. It is
---a custom add-on to Studio which adds new behavior and features that are not
---normally included.
---
---Both the [Animation Editor](/building-and-visuals/animation/animation-editor)
---and [Terrain Editor](/studio/terrain-editor) were originally developed as
---plugins. There are also many plugins made by the Roblox community that you can
---use to help make games and experiences.
---
local Plugin;
---Returns whether the user enabled `Collisions` in studio under the Model
---tab.
---
Plugin.CollisionEnabled = nil;
---Returns the grid size the user has set in studio under the Model tab. This
---can be 1, 0.2 or 0.01, but has rounding errors. The 1/5th option should
---return 0.2, but could return 0.20000000298023 instead. This code can be
---used to get the real gridsize:
---
---```lua
---local gridsize = plugin.GridSize
---if math.abs(gridsize-0.2) &lt; 0.005 then -- Check if the gridsize is between 0.195 and 0.205
---	gridsize = 0.2
---elseif math.abs(gridsize-0.01) &lt; 0.005 then -- Between 0.005 and 0.015
---	gridsize = 0.01
---else -- Assume it's 1
---	gridsize = 1
---end
---```
---
Plugin.GridSize = nil;
---
Plugin.HostDataModelType = nil;
---
Plugin.HostDataModelTypeIsCurrent = nil;
---
Plugin.MultipleDocumentInterfaceInstance = nil;
---
Plugin.UsesAssetInsertionDrag = nil;
---@return bool
---This function returns true if this plugin is currently active with an
---exclusive mouse, after having been activated via the `Plugin/Activate`
---function. If this returns true, a `PluginMouse` can be retrieved via
---`Plugin/GetMouse`.
---
---See also:
---
---- `Plugin/Deactivation`, fires when the plugin is deactivated
---- `Plugin/Unloading`, fires immediately before the plugin is unloaded or
---  reloaded via uninstallation, deactivation, or updating
---
Plugin.IsActivatedWithExclusiveMouse = function(self) end;
---@return void
---Opens an upload window for the user's current selection.
---
Plugin.SaveSelectedToRoblox = function(self) end;
---@param objects Objects
---@return Objects
---Negates the given parts and returns the resulting NegateOperations.
---
Plugin.Negate = function(self, objects) end;
---@param tool RibbonTool
---@param position UDim2
---@return void
---Activates the specified Roblox Studio tool. If the tool opens a window,
---the position parameter specifies where it should be shown on the screen.
---
---Note:
---
---- An object must be selected in order for this to work correctly.
---- Altering the scale fields of the `position` property will not affect the
---  dialog popups.
---
Plugin.SelectRibbonTool = function(self, tool, position) end;
---@param key string
---@param callback Function
---@return Instance
Plugin.OnInvoke = function(self, key, callback) end;
---@param isR15 bool
---@return Instance
---Prompts the user to open a .fbx file, uploads the individual components of
---the model as meshes, and generates a character rig for use in animation,
---which is loaded into the `Workspace`.
---
Plugin.ImportFbxRig = function(self, isR15) end;
---@param objects Objects
---@return Objects
---Separates the given UnionOperations and returns the resulting parts.
---
Plugin.Separate = function(self, objects) end;
---@param key string
---@param value Variant
---@return void
Plugin.SetItem = function(self, key, value) end;
---@param assetType string
---@return int64
---Opens a window in Roblox Studio, which prompts the user to select an asset
---based on the `assetType` specified. Returns what assetId was selected, or
----1 if the window was closed.
---
Plugin.PromptForExistingAssetId = function(self, assetType) end;
---@return void
---Deactivates the plugin. This will disengage the associated `PluginMouse`
---if it has been activated
---
---See also:
---
---- `Plugin/Activate`, sets the state of the calling plugin to activated
---- `Plugin/Deactivation`, fires when the plugin is deactivated
---- `Plugin/Unloading`, fires immediately before the plugin is unloaded or
---  reloaded via uninstallation, deactivation, or updating
---
Plugin.Deactivate = function(self) end;
---@param key string
---@param defaultValue Variant
---@return Variant
Plugin.GetItem = function(self, key, defaultValue) end;
---@return void
Plugin.SetReady = function(self) end;
---@param suggestedFileName string
---@return bool
---Prompts the user to save their current selection with the specified file
---name. Returns true if the user did save the file.
---
Plugin.PromptSaveSelection = function(self, suggestedFileName) end;
---@param key string
---@param value Variant
---@return void
---Stores a given value for later use under the given key. The value will
---persist even after studio is closed.
---
Plugin.SetSetting = function(self, key, value) end;
---@param decal Instance
---@return void
Plugin.StartDecalDrag = function(self, decal) end;
---@return JointCreationMode
---Returns the `Enum/JointCreationMode` the user has set in studio under the
---Model tab.
---
Plugin.GetJoinMode = function(self) end;
---@return PluginMouse
---**GetMouse** returns a `PluginMouse` that can be used while the plugin is
---active through `Plugin/Activate`.
---
Plugin.GetMouse = function(self) end;
---@param exclusiveMouse bool
---@return void
---This function sets the state of the calling plugin to activated.
---Activating the plugin allows mouse control through the `Plugin/GetMouse`
---method.
---
---At any given time there are either 0 or 1 Activated Plugins. Activating a
---plugin will deactivate all other plugins (they will receive a
---`Plugin/Deactivation` event).
---
---See also:
---
---- `Plugin/IsActivatedWithExclusiveMouse`, returns true if this plugin is
---  currently active with an exclusive mouse, after having been activated
---  via this function
---- `Plugin/Unloading`, fires immediately before the plugin is unloaded or
---  reloaded via uninstallation, deactivation, or updating
---
Plugin.Activate = function(self, exclusiveMouse) end;
---@return RibbonTool
---GetSelectedRibbonTool return the currently selected `Enum/RibbonTool`. It
---returns an Enum that corresponds to a particular tool. This will return
---whether the tool is selected manually or programmatically via
---`Plugin/SelectRibbonTool`.
---
Plugin.GetSelectedRibbonTool = function(self) end;
---@param url string
---@return void
---Opens the context help window to the wiki page that `url` links to.
---
Plugin.OpenWikiPage = function(self, url) end;
---@return void
Plugin.StopAllSounds = function(self) end;
---@param key string
---@return Variant
---Retrieves a previously stored value with the given key, or nil if the
---given key doesn't exist.
---
Plugin.GetSetting = function(self, key) end;
---@param objects Objects
---@return Instance
---Unions the given parts and returns the resulting UnionOperation.
---
Plugin.Union = function(self, objects) end;
---@param actionId string
---@param text string
---@param statusTip string
---@param iconName string
---@param allowBinding bool
---@return PluginAction
---This function creates a `PluginAction` which is an object that represents
---a generic performable action in Roblox Studio, with no directly associated
---`Toolbar` or `Button`. In Roblox Studio, they can be assigned a keyboard
---shortcut under `File → Advanced → Customize Shortcuts…`, and they can also
---be added to the Quick Access Toolbar.
---
---When an action is triggered, the `PluginAction/Triggered` event is
---signaled.
---
---In order for PluginActions work as expected, they must be created using
---this function.
---
---See also:
---
---- `PluginMenu`, a context menu that can be shown in Studio which displays
---  a list of PluginActions and supports submenus
---- `Plugin/CreatePluginMenu`, creates a PluginMenu
---
Plugin.CreatePluginAction = function(self, actionId, text, statusTip, iconName, allowBinding) end;
---@param sound Instance
---@return void
Plugin.PauseSound = function(self, sound) end;
---@return int64
---Returns the studio user's userId if they're logged in, otherwise
---returns 0.
---
Plugin.GetStudioUserId = function(self) end;
---@param rigModel Instance
---@param isR15 bool
---@return Instance
---This function prompts the user to open a .fbx animation file that can be
---loaded onto the `rigModel`, then proceeds to insert the animation as a
---`KeyframeSequence` in the `Workspace`.
---
Plugin.ImportFbxAnimation = function(self, rigModel, isR15) end;
---@param key string
---@param arguments Tuple
---@return void
Plugin.Invoke = function(self, key, arguments) end;
---@param key string
---@param callback Function
---@return Instance
Plugin.OnSetItem = function(self, key, callback) end;
---@param sound Instance
---@param normalizedTimePosition double
---@return void
Plugin.PlaySound = function(self, sound, normalizedTimePosition) end;
---@param pluginGuiId string
---@param dockWidgetPluginGuiInfo DockWidgetPluginGuiInfo
---@return DockWidgetPluginGui
---**CreateDockWidgetPluginGui** creates a new `DockWidgetPluginGui` from the
---given `DataType/DockWidgetPluginGuiInfo`. The first parameter,
---`pluginGuiId`, should be a unique and consistent string. It is used to
---save the state of the widget's dock state and other internal details.
---
Plugin.CreateDockWidgetPluginGui = function(self, pluginGuiId, dockWidgetPluginGuiInfo) end;
---@param script LuaSourceContainer
---@param lineNumber int
---@return void
---Used to open the given script instance in an editor window, in Roblox
---studio, at the given line. If no line is given as an argument it will
---default to 0.
---
Plugin.OpenScript = function(self, script, lineNumber) end;
---@param dragData Dictionary
---@return void
---**StartDrag** initiates a drag action using a dictionary of parameters.
---The parameters are as follows:
---
---<table>
---    <thead>
---        <tr>
---            <th>Name</th>
---            <th>Type</th>
---            <th>Default</th>
---            <th>Description</th>
---        </tr>
---    </thead>
---    <tbody>
---      <tr>
---        <td>Sender</td>
---        <td>string</td>
---        <td><code>""</code></td>
---        <td>
---            Identifies the source of the drag action to the drop target
---        </td>
---        </tr>
---        <tr>
---        <td>MimeType</td>
---        <td>string</td>
---        <td><code>""</code></td>
---        <td>
---            The <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank">MIME type</a> of Data.
---        </td>
---        </tr>
---        <tr>
---        <td>Data</td>
---        <td>string</td>
---        <td><code>""</code></td>
---        <td>
---            Information about the drag action (eg. what is being dragged). Should be used by the drop target.
---        </td>
---        </tr>
---        <tr>
---        <td>MouseIcon</td>
---        <td>Content</td>
---        <td><code>""</code></td>
---        <td>
---            The icon to use for the mouse cursor during the drag. If empty, uses the default cursor.
---        </td>
---        </tr>
---        <tr>
---        <td>DragIcon</td>
---        <td>Content</td>
---        <td><code>""</code></td>
---        <td>
---        	An image to render under the mouse cursor during the drag. This should represent the item being dragged.
---        </td>
---        </tr>
---        <tr>
---        <td>HotSpot</td>
---        <td>Vector2</td>
---        <td><code>Vector2.new(0, 0)</code></td>
---        <td>
---        	The pixel offset from the top-left where the cursor should "hold" the DragIcon.
---        </td>
---        </tr>
---    </tbody>
---</table>
---
---See also:
---
---- `PluginGui/PluginDragEntered`
---- `PluginGui/PluginDragMoved`
---- `PluginGui/PluginDragDropped`
---- `PluginGui/PluginDragLeft`
---
Plugin.StartDrag = function(self, dragData) end;
---@param pluginGuiId string
---@param pluginGuiOptions Dictionary
---@return QWidgetPluginGui
Plugin.CreateQWidgetPluginGui = function(self, pluginGuiId, pluginGuiOptions) end;
---@return bool
---This function returns true if this plugin is currently active, after
---having been activated via the `Plugin/Activate` function.
---
Plugin.IsActivated = function(self) end;
---@param name string
---@return PluginToolbar
---The **CreateToolbar** function creates a new `PluginToolbar` with the
---given name. The tooblar can then be used to create plugin buttons.
---
---<img src="/assets/blt8a9224a9e7eef525/PluginToolbar-light.png" />
---
Plugin.CreateToolbar = function(self, name) end;
---@param sound Instance
---@return void
Plugin.ResumeSound = function(self, sound) end;
---@param id string
---@param title string
---@param icon string
---@return PluginMenu
---This function creates a new `PluginMenu`, which is a context menu that can
---be shown in Studio that displays a list of `PluginAction|PluginActions`
---and supports submenus.
---
---In order for PluginMenus to work as expected, they must be created using
---this function.
---
---See also:
---
---- `PluginAction`, an object that represents a generic performable action
---  in Roblox Studio, with no directly associated `Toolbar` or `Button`.
---- `Plugin/CreatePluginAction`, creates a PluginAction
---- `PluginMenu/Title`, the text to be displayed when used as a sub menu
---- `PluginMenu/Icon`, the icon to be displayed when used as a sub menu
---- `PluginMenu/AddAction`, adds the given action to the menu
---- `PluginMenu/AddNewAction`, creates a temporary action that is hidden
---  from Studio's customize shortcuts window
---- `PluginMenu/AddMenu`, adds the given menu as a separator
---- `PluginMenu/AddSeparator`, adds a separator between items in the menu
---- `PluginMenu/Clear`, clears the menu
---- `PluginMenu/ShowAsync`, shows the menu at the mouse cursor. Yields until
---  either an item is selected or the menu is closed. The selected action
---  fires its Triggered event
---
Plugin.CreatePluginMenu = function(self, id, title, icon) end;
---@class RBXScriptSignal.Deactivation : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Deactivation, callback: fun()): RBXScriptConnection
---Fired when the `Plugin` is deactivated. This occurs when either the plugin
---code calls `Plugin/Deactivate`, or because some other plugin called
---`Plugin/Activate`, which forces all other plugins to lose their active
---state.
---
---See also:
---
---- `Plugin/Unloading`, fires immediately before the plugin is unloaded or
---  reloaded via uninstallation, deactivation, or updating
---
Plugin.Deactivation = nil;
---@class RBXScriptSignal.Ready : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Ready, callback: fun()): RBXScriptConnection
---
Plugin.Ready = nil;
---@class RBXScriptSignal.Unloading : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Unloading, callback: fun()): RBXScriptConnection
---This event fires immediately before the `Plugin` stops running. Plugins
---are unloaded when disabled, uninstalled, about to be updated, or when the
---place is closing.
---
---It enables a plugin to clean up after itself before its scripts stop
---running, e.g. to remove unnecessary instances from the `DataModel`. If a
---plugin does not clean up properly, the old copies will remain. When this
---occurs, users may be forced to close and reopen the place which is a bad
---user experience.
---
---Plugin-related instances such as
---`PluginToolbarButton|PluginToolbarButtons`,
---`DockWidgetPluginGui|DockWidgetPluginGuis`, and `PluginGui|PluginGuis` are
---automatically cleaned up when the plugin is unloaded so there is no need
---to remove them.
---
Plugin.Unloading = nil;
---@class PluginAction : Instance
---@field public ActionId string
---@field public AllowBinding bool
---@field public Checked bool
---@field public DefaultShortcut string
---@field public Enabled bool
---@field public StatusTip string
---@field public Text string
---@field public Triggered RBXScriptSignal.Triggered
---PluginAction is an object that represents a generic performable action in
---Roblox Studio, with no directly associated `Toolbar` or `Button`. In Roblox
---Studio, they can be assigned a keyboard shortcut under
---`File → Advanced → Customize Shortcuts...`, and they can also be added to the
---Quick Access Toolbar.
---
---PluginActions must be created using the `Plugin/CreatePluginAction` function
---in order to work as expected.
---
local PluginAction;
---A string that uniquely identifies this action. This string is the key used
---when saving and loading the action's state in Roblox Studio.
---
PluginAction.ActionId = nil;
---This property determines whether the `PluginAction` will be hidden from
---Studio's shortcuts view. Useful for contextual actions. It defaults to
---true.
---
---See also:
---
---- `Plugin/CreationPluginAction`, creates a PluginAction
---
PluginAction.AllowBinding = nil;
---
PluginAction.Checked = nil;
---
PluginAction.DefaultShortcut = nil;
---
PluginAction.Enabled = nil;
---The description of the action, when viewing it from the keyboard shortcuts
---window in Roblox Studio.
---
PluginAction.StatusTip = nil;
---The text that is displayed when viewing this action in Roblox Studio.
---
PluginAction.Text = nil;
---@class RBXScriptSignal.Triggered : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Triggered, callback: fun()): RBXScriptConnection
---Fires when the action is triggered. This can be done by either activating
---the action from the Quick Access Toolbar, or by using the keyboard
---shortcut that was bound to it.
---
PluginAction.Triggered = nil;
---@class PluginDebugService : Instance
local PluginDebugService;
---@class PluginDragEvent : Instance
---@field public Data string
---@field public MimeType string
---@field public Position Vector2
---@field public Sender string
local PluginDragEvent;
---
PluginDragEvent.Data = nil;
---
PluginDragEvent.MimeType = nil;
---
PluginDragEvent.Position = nil;
---
PluginDragEvent.Sender = nil;
---@class PluginGui : LayerCollector, GuiBase2d, GuiBase, Instance
---@field public Title string
---@field public PluginDragDropped RBXScriptSignal.PluginDragDropped
---@field public PluginDragEntered RBXScriptSignal.PluginDragEntered
---@field public PluginDragLeft RBXScriptSignal.PluginDragLeft
---@field public PluginDragMoved RBXScriptSignal.PluginDragMoved
---@field public WindowFocusReleased RBXScriptSignal.WindowFocusReleased
---@field public WindowFocused RBXScriptSignal.WindowFocused
---PluginGui is an abstract class for GUIs that allow the display of
---`GuiObject|GuiObjects` in various Roblox Studio widgets. As of right now, the
---only available PluginGui type is `DockWidgetPluginGui`, but there may be more
---in the future!
---
local PluginGui;
---The title that is displayed above the contents of the `PluginGui`.
---Defaults to empty string.
---
PluginGui.Title = nil;
---@return Vector2
---GetRelativeMousePosition returns the position of the mouse relative to the
---top-left corner of the `PluginGui`. The returned value changes only if a
---mouse input began on the PluginGui, or if the mouse is presently hovering
---over the window.
---
---![An animation of the return value of Plugin:GetRelativeMousePosition][2]
---
---The animation above displays the value returned by this function (the left
---mouse button is pressed in the animation). Notice how the X-value is
---negative when the mouse is on the left of the window.
---
---[2]: /assets/blt2bbcc6b4d96ba800/PluginGui.GetRelativeMousePosition.gif
---
PluginGui.GetRelativeMousePosition = function(self) end;
---@param kw_function Function
---@return void
---This function binds a function to the `PluginGui|PluginGui's` close
---button, overriding the default behavior.
---
---By default, when the user clicks the 'x' button in the top right corner of
---the `PluginGui` the `LayerCollector/Enabled|Enabled` property is set to
---_false_, closing the window. When a custom function is bound using
---BindToClose this behavior is overwritten, allowing you to check if the
---user really wants to close the window or give them an opportunity to save
---their work.
---
---As the default closing behavior is overwritten by this function, you'll
---need to configure the `PluginGui` to close manually by setting
---`LayerCollector/Enabled|PluginGui.Enabled` to _false_. For example, in the
---below snippet users are required to click a confirm button to close the
---GUI:
---
---```lua
---local closing = false
---pluginGui:BindToClose(function()
---	-- make sure we haven't already made a button
---	if closing then
---		return
---	end
---	closing = true
---
---	-- create confirm button
---	local confirmButton = Instance.new("TextButton")
---	confirmButton.AnchorPoint = Vector2.new(0.5, 0.5)
---	confirmButton.Size = UDim2.new(0.5, 0, 0.5, 0)
---	confirmButton.Position = UDim2.new(0.5, 0, 0.5, 0)
---	confirmButton.BackgroundColor3 = Color3.new(1, 0, 0)
---	confirmButton.Text = "Close?"
---	confirmButton.Parent = pluginGui
---
---	-- listen for click
---	confirmButton.Activated:Connect(function()
---		-- close the gui
---		pluginGui.Enabled = false
---
---		-- remove confirm button
---		confirmButton:Destroy()
---	end)
---end)
---```
---
---You can call BindToClose with no argument to 'unbind' and revert to the
---default behavior described above. For example:
---
---```lua
---pluginGui:BindToClose()
---```
---
---See also:
---
---- `Plugin/CreateDockWidgetPluginGui` to create a `PluginGui`
---- `DataModel/BindToClose`, which can be used to bind a function to the
---  game ending and should not be confused with this function
---
PluginGui.BindToClose = function(self, kw_function) end;
---@class RBXScriptSignal.PluginDragDropped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PluginDragDropped, callback: fun(dragData: Dictionary)): RBXScriptConnection
---**PluginDragDropped** fires when the user releases their mouse over a
---`PluginGui` during a drag operation started by `Plugin/StartDrag`.
---
---See also:
---
---- `PluginGui/PluginDragEntered`
---- `PluginGui/PluginDragLeft`
---- `PluginGui/PluginDragMoved`
---
PluginGui.PluginDragDropped = nil;
---@class RBXScriptSignal.PluginDragEntered : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PluginDragEntered, callback: fun(dragData: Dictionary)): RBXScriptConnection
---**PluginDragEntered** fires when the user's mouse enters the `PluginGui`
---during a drag operation started by `Plugin/StartDrag`.
---
---This event is useful for displaying a "Drop Here" UI on PluginGuis where a
---drag operation can be dropped. Such a UI should be hidden when either
---`PluginGui/PluginDragLeft|PluginDragLeft` or
---`PluginGui/PluginDragDropped|PluginDragDropped` fire.
---
---See also:
---
---- `PluginGui/PluginDragLeft`
---- `PluginGui/PluginDragMoved`
---- `PluginGui/PluginDragDropped`
---
PluginGui.PluginDragEntered = nil;
---@class RBXScriptSignal.PluginDragLeft : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PluginDragLeft, callback: fun(dragData: Dictionary)): RBXScriptConnection
---**PluginDragLeft** fires when the user's mouse leaves a `PluginGui` during
---a drag operation started by `Plugin/StartDrag`.
---
---This event and `PluginGui/PluginDragDropped|PluginDragDropped` are useful
---for hiding a "Drop Here" UI on PluginGuis where a drag operation can be
---dropped. Such a UI should be shown when either
---`PluginGui/PluginDragEntered|PluginDragEntered` fires.
---
---See also:
---
---- `PluginGui/PluginDragEntered`
---- `PluginGui/PluginDragMoved`
---- `PluginGui/PluginDragDropped`
---
PluginGui.PluginDragLeft = nil;
---@class RBXScriptSignal.PluginDragMoved : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PluginDragMoved, callback: fun(dragData: Dictionary)): RBXScriptConnection
---**PluginDragMoved** fires when the user's mouse moves within a `PluginGui`
---during a drag operation started by `Plugin/StartDrag`.
---
---See also:
---
---- `PluginGui/PluginDragEntered`
---- `PluginGui/PluginDragLeft`
---- `PluginGui/PluginDragDropped`
---
PluginGui.PluginDragMoved = nil;
---@class RBXScriptSignal.WindowFocusReleased : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.WindowFocusReleased, callback: fun()): RBXScriptConnection
---**WindowFocusReleased** fires immediately when the user stops interacting
---with the PluginGui's window, usually by clicking on on something not in
---the window. This functions works similarly to the similarly-named
---`UserInputService/WindowFocusReleased` event.
---
---If focus is moving to another `PluginGui` while the user had this
---PluginGui in focus, then this event fires before the other's
---`PluginGui/WindowFocused|WindowFocused` event. However, if the main game
---window is being put in focus, this event fires **after**
---`UserInputService/WindowFocused`.
---
PluginGui.WindowFocusReleased = nil;
---@class RBXScriptSignal.WindowFocused : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.WindowFocused, callback: fun()): RBXScriptConnection
---**WindowFocused** fires immediately when the user starts interacting with
---the PluginGui's window, usually by clicking on it. This functions works
---similarly to the similarly-named `UserInputService/WindowFocused` event.
---It fires before any `GuiObject/InputBegan` events related to mouse
---buttons.
---
---If another `PluginGui` is in focus and the user focuses this PluginGui,
---then this event fires after the other's
---`PluginGui/WindowFocusReleased|WindowFocusReleased` event. However, if the
---main game window was in focus, this event fires **after**
---`UserInputService/WindowFocusReleased`.
---
PluginGui.WindowFocused = nil;
---@class PluginGuiService : Instance
---PluginGuiService is a service that stores `PluginGui` objects to be displayed
---in Roblox Studio. It only allows PluginGuis to be direct children of the
---service, and PluginGuis are not allowed to be parented anywhere besides the
---service.
---
local PluginGuiService;
---@class PluginManager : Instance
---A singleton class used to create `Plugin|Plugins`. Has been superseded by the
---<a href="https://developer.roblox.com/articles/Intro-to-Plugins">official
---plugins feature</a>, but can be used to create plugins with the command bar.
---
---The PluginManager object can be retrieved using the deprecated
---`PluginManager()` function.
---
local PluginManager;
---@param filePath string
---@return void
---ExportPlace will export all geometry in the place to an .OBJ file. The
---file is saved to the path chosen by the user in a file save dialogue (the
---`filePath` argument is ignored). This function does the same thing as the
---**File &gt; Advanced &gt; Export as Obj** menu option.
---
---#### History
---
---Previously, this function would save the generated .OBJ file to the given
---file path, so long as Roblox Studio had write access. This was changed for
---security reasons on
---[Release 379](/resources/release-note/Release-Notes-for-379) in
---April 2019.
---
PluginManager.ExportPlace = function(self, filePath) end;
---@param filePath string
---@return void
---ExportSelection will export all geometry in the current `Selection` to an
---.OBJ file. The file is saved to the path chosen by the user in a file save
---dialogue (the `filePath` argument is ignored). This function does the same
---thing as the **Export Selection...** right-click menu option in the
---Explorer.
---
---#### History
---
---Previously, this function would save the generated .OBJ file to the given
---file path, so long as Roblox Studio had write access. This was changed for
---security reasons on
---[Release 379](/resources/release-note/Release-Notes-for-379) in
---April 2019.
---
PluginManager.ExportSelection = function(self, filePath) end;
---@return Instance
PluginManager.CreatePlugin = function(self) end;
---@class PluginManagerInterface : Instance
local PluginManagerInterface;
---@return Instance
PluginManagerInterface.CreatePlugin = function(self) end;
---@param filePath string
---@return void
PluginManagerInterface.ExportPlace = function(self, filePath) end;
---@param filePath string
---@return void
PluginManagerInterface.ExportSelection = function(self, filePath) end;
---@class PluginMenu : Instance
---@field public Icon string
---@field public Title string
---A context menu that can be shown in Studio. It displays a list of
---PluginActions and supports submenus.
---
---PluginMenus must be created using the `Plugin/CreatePluginMenu` function in
---order to work as expected.
---
---See also:
---
---- `PluginAction`, an object that represents a generic performable action in
---  Roblox Studio, with no directly associated `Toolbar` or `Button`.
---- `Plugin.CreatePluginAction`, creates a PluginAction.
---- `PluginMenu.Title`, the text to be displayed when used as a sub menu.
---- `PluginMenu.Icon`, the icon to be displayed when used as a sub menu.
---- `PluginMenu.AddAction`, adds the given action to the menu.
---- `PluginMenu.AddNewAction`, creates a temporary action that is hidden from
---  Studio's customize shortcuts window.
---- `PluginMenu.AddMenu`, adds the given menu as a separator.
---- `PluginMenu.AddSeparator`, adds a separator between items in the menu
---- `PluginMenu.Clear`, clears the menu.
---- `PluginMenu.ShowAsync`, shows the menu at the mouse cursor. Yields until
---  either an item is selected or the menu is closed. The selected action fires
---  its Triggered event.
---
local PluginMenu;
---This property determines the icon to be displayed when used as a sub menu.
---It defaults to an empty string `””`.
---
PluginMenu.Icon = nil;
---This property determines the text to be displayed when a `PluginMenu` is
---used as a sub menu. It defaults to an empty string `””`.
---
PluginMenu.Title = nil;
---@param action Instance
---@return void
---Adds the given action to the menu.
---
PluginMenu.AddAction = function(self, action) end;
---@return Instance
---Shows the menu at the mouse cursor. It yields until either an item is
---selected or the menu is closed. The selected action fires its
---`PluginAction/Triggered` event.
---
PluginMenu.ShowAsync = function(self) end;
---@return void
---Adds a separator between items in the menu.
---
PluginMenu.AddSeparator = function(self) end;
---@param menu Instance
---@return void
---Adds the given menu as a separator.
---
PluginMenu.AddMenu = function(self, menu) end;
---@return void
---Clears the menu.
---
PluginMenu.Clear = function(self) end;
---@param actionId string
---@param text string
---@param icon string
---@return Instance
---Creates a temporary action that is hidden from Studio's customize
---shortcuts window.
---
PluginMenu.AddNewAction = function(self, actionId, text, icon) end;
---@class PluginMouse : Mouse, Instance
---@field public DragEnter RBXScriptSignal.DragEnter
---The PluginMouse object gives `Plugin`s access to the mouse. It works like the
---`Mouse` object and can be obtained using the plugin `Plugin/GetMouse` method.
---
---Note the PluginMouse can only be used when the plugin has been activated using
---`Plugin/Activate`.
---
---In addition to the functions from the `Mouse` object, the PluginMouse includes
---the `PluginMouse/DragEnter` function which keeps track of items being selected
---whilst the mouse is dragging.
---
---For more information on how to use mouse objects, see the `Mouse` page.
---
local PluginMouse;
---@class RBXScriptSignal.DragEnter : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.DragEnter, callback: fun(instances: Objects)): RBXScriptConnection
---Fired when Instances are being selected while the mouse is dragging.
---
PluginMouse.DragEnter = nil;
---@class PluginPolicyService : Instance
local PluginPolicyService;
---@param pluginName string
---@return Dictionary
PluginPolicyService.GetPluginPolicy = function(self, pluginName) end;
---@class PluginToolbar : Instance
---A PluginToolbar is an object created by using the `Plugin/CreateToolbar`
---method. It is used to create `PluginToolbarButton`s using the
---`PluginToolbar/CreateButton|CreateButton` function. In general, it is good
---practice for a plugin to use **one and only one** uniquely named toolbar for
---all of its buttons. In Roblox Studio, toolbars are rendered under the Plugins
---tab.
---
---![A screenshot of Roblox Studio's Plugins tab, rendering several PluginToolbars][1]
---
---Pictured above are three PluginToolbars in Roblox Studio: Animations, Three
---Wise Monkeys and Localization. The center toolbar is a custom toolbar created
---by a plugin; the other toolbars are created by built-in Roblox Studio plugins.
---
---## Example
---
---The following code sample creates a basic toolbar with one button. It should
---be run as a Roblox Studio plugin, and not run as a `Script`.
---
---```
---local toolbar = plugin:CreateToolbar("Three Wise Monkeys")
---local button = toolbar:CreateButton("Mizaru", "See No Evil", "rbxassetid://2778270261")
---```
---
---[1]: /assets/blt8a9224a9e7eef525/PluginToolbar-light.png
---
local PluginToolbar;
---@param buttonId string
---@param tooltip string
---@param iconname string
---@param text string
---@return Instance
---Creates ` PluginToolbarButton` that allows the user to initiate a single,
---one-off action in Roblox Studio through the
---`PluginToolbarButton/Click|Click` event.
---
PluginToolbar.CreateButton = function(self, buttonId, tooltip, iconname, text) end;
---@class PluginToolbarButton : Instance
---@field public ClickableWhenViewportHidden bool
---@field public Enabled bool
---@field public Icon Content
---@field public Click RBXScriptSignal.Click
---A PluginToolbarButton is an object created by the `PluginToolbar/CreateButton`
---function. It allows the user to initiate a single, one-off action in Roblox
---Studio through the `PluginToolbarButton/Click|Click` event. Pictured below are
---three PluginToolbarButtons. From left to right: the default, hover and pressed
---states. The hovered button in the center shows tooltip text, which is the 2nd
---argument passed to `PluginToolbar/CreateButton`.
---
---![Three PluginToolbarButtons rendered on a PluginToolbar titled "Three Wise Monkeys"][1]
---
---## Behavior
---
---When pressed, the `PluginToolbarButton/Click|Click` event fires. A button will
---also remain in the pressed state, which may be set manually using
---`PluginToolbarButton/SetActive|SetActive`. Upon plugin activation
---(`Plugin/Activate`), buttons in all other `PluginToolbar`s will be toggled
---off. If all buttons in a toolbar are off, the toolbar's plugin is deactivated
---(`Plugin/Deactivate`).
---
---When the game viewport is not visible, buttons will be disabled as if their
---`PluginToolbarButton/Enabled|Enabled` property were false. Disabled buttons
---are desaturated and do not respond to user clicks. By setting
---`PluginToolbarButton/ClickableWhenViewportHidden|ClickableWhenViewportHidden`
---to true, you can allow plugin buttons to remain clickable (such as during
---script editing).
---
---## History
---
---- Prior to an update released in January 2019, this class was simply known as
---  "Button". This was changed to reduce confusion with similarly named in-game
---  UI element classes, such as `TextButton`.
---
---  [1]: /assets/blt3d234c03ebdc6750/PluginToolbarButton-light.png
---
local PluginToolbarButton;
---**ClickableWhenViewportHIdden** determines whether a PluginToolbarButton
---may be clicked while the game viewport is hidden, such as when a `Script`
---is being edited in another tab. In the image below, various plugin toolbar
---buttons are visible. Some are enabled as a result of this property being
---true, such as the Localization Tools button.
---
---<img src="/assets/blt15abc50a70cd30be/PluginToolbarButton.ClickableWhenViewportHidden.jpg" alt="Various plugin toolbar buttons visible while a Script is being edited, causing the game viewport to be hidden. Some of the buttons are enabled due to this property being true." width="509" height="184" />
---
---Typically, this property is good to enable if an action triggered by a
---plugin button's `PluginToolbarButton/Click|Click` event doesn't occur in
---the game world (Workspace). For example, a button that opens a widget
---should have this property be true, as showing a widget is visible to the
---user even if the game view isn't visible.
---
PluginToolbarButton.ClickableWhenViewportHidden = nil;
---**Enabled** determines whether a button is clickable in general. When this
---property is false, the button will be greyed out and unclickable,
---preventing the user from firing the `PluginToolbarButton/Click|Click`
---event. Buttons are enabled by default.
---
---Plugins should disable their buttons when the button action isn't relevant
---in the current context. For example, a plugin button that assigns random
---colors to selected should not be enabled when the selection contains no
---parts. See the code samples for more information.
---
---See also:
---
---- `PluginToolbarButton/ClickableWhenViewportHidden|ClickableWhenViewportHidden`,
---  which determines whether a button is clickable when the game view is
---  hidden (and not just in general)
---
PluginToolbarButton.Enabled = nil;
---
PluginToolbarButton.Icon = nil;
---@param active bool
---@return void
PluginToolbarButton.SetActive = function(self, active) end;
---@class RBXScriptSignal.Click : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Click, callback: fun()): RBXScriptConnection
---**Click** fires when the PluginToolbarButton is pressed and released by
---the user.
---
---Clicking a PluginToolbarButton causes the state of the button to toggle.
---Call `PluginToolbarButton/SetActive|SetActive` to manually set the state
---of the button.
---
PluginToolbarButton.Click = nil;
---@class PointLight : Light, Instance
---@field public Range float
---A PointLight is a light source that emits illumination from a single point.
---Light is emitted spherically based on the `PointLight/Range` of the
---PointLight.
---
---In order for a PointLight to provide illumination, it must be the direct child
---of a `BasePart` or `Attachment` (the part or attachment itself must be a
---descendant of the `Workspace`).
---
---If a PointLight is parented to a part, then the light will emanate from the
---part's `BasePart/Position`. If a PointLight is parented to an attachment, then
---the light will emanate from the attachment's `Attachment/WorldPosition`.
---
---For more light types, see the **see also** section.
---
---## See Also
---
---- `SurfaceLight`
---- `SpotLight`
---
local PointLight;
---The size of the area that the PointLight will illuminate.
---
PointLight.Range = nil;
---@class PointsService : Instance
---@field public PointsAwarded RBXScriptSignal.PointsAwarded
---The PointsService class controls points.
---
---Points are an award system used to showcase a player's achievements and
---participation throughout Roblox. How points are awarded through this service
---is at the discretion of the game's developer.
---
local PointsService;
---@param userId int64
---@return int
---This function returns the total number of points a player has in the
---current game.
---
PointsService.GetGamePointBalance = function(self, userId) end;
---@param userId int64
---@return int
---This function returns the total number of points the given player has
---across **_all_** games.
---
PointsService.GetPointBalance = function(self, userId) end;
---@return int
---This function returns the number of points the current game has available
---to award to players.
---
PointsService.GetAwardablePoints = function(self) end;
---@param userId int64
---@param amount int
---@return Tuple
---This function attempts to award the user with the specified
---`Player/UserId` the specified number of points.
---
---If successful, this function will return the UserId of the user the points
---were awarded to, the number of points awarded, the new total number of
---points the user has in the game and another value which appears to always
---be 0.
---
---This function will cause an error if the specified UserId is not positive
---or if the number of points specified is 0.
---
---The function can be used to award a negative number of points to a user
---however.
---
---```lua
---local userId, amount, total = game:GetService("PointsService"):AwardPoints(1, 5)
---print("The user was awarded " ..amount.. " points. They have now have a total of " ..total.. " points in this game.")
---```
---
PointsService.AwardPoints = function(self, userId, amount) end;
---@class RBXScriptSignal.PointsAwarded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PointsAwarded, callback: fun(userId: int64, pointsAwarded: int, userBalanceInGame: int, userTotalBalance: int)): RBXScriptConnection
---This event fires when points have been successfully awarded to a player,
---whilst also passing along the updated balance of points the player has in
---the current game and all games.
---
---When a player is awarded points successfully the below example would print
---the userId and their new point balance. If, for example, the Roblox
---account was awarded thirty points (and had none to begin with)
---
---> User: 1 has now earned 30 (+30) points in the current game, now making
---> their total balance
---
---would be printed.
---
---```lua
---local function pointsAwarded(userId, pointsAwarded, userBalanceInGame, userTotalBalance)
---	print("User: " .. userId .. " has now earned " .. userBalanceInGame .. " (+" .. pointsAwarded ..") points in the current game, now making their total balance " .. userTotalBalance)
---end
---
---game:GetService("PointsService").PointsAwarded:Connect(pointsAwarded)
---```
---
PointsService.PointsAwarded = nil;
---@class PolicyService : Instance
---@field public IsLuobuServer TriStateBoolean
---@field public LuobuWhitelisted TriStateBoolean
---Important for getting your game to all audiences, `PolicyService` helps you
---build gameplay components that can be made compliant with various national
---regulations for multiple countries. This service is used to query information
---regarding policy compliance for players around the world based on age range,
---location, and platform type.
---
local PolicyService;
---
PolicyService.IsLuobuServer = nil;
---
PolicyService.LuobuWhitelisted = nil;
---@param player Instance
---@return Dictionary
---Returns policy information about a player which is based on geolocation,
---age group, and platform. The structure of the returned dictionary is as
---follows:
---
---<table>
---<thead>
---<tr>
---<th>Name</th>
---<th>Type</th>
---<th>Required for</th>
---<th>Description</th>
---</tr>
---</thead>
---<tbody>
---<tr>
---<td>ArePaidRandomItemsRestricted</td>
---<td>Boolean</td>
---<td>Any experience that has paid random items</td>
---<td>When true, the player cannot interact with paid (via in-experience currency or Robux) random item generators.</td>
---</tr>
---<tr>
---<td>AllowedExternalLinkReferences</td>
---<td>Array of strings</td>
---<td>Any experience that references external links</td>
---<td>A list of external link references (for example, social media links, handles, or iconography) a player is permitted to see. Possible values include: “Discord”, “Facebook”, “Twitch”, and “YouTube”.</td>
---</tr>
---<tr>
---<td>IsPaidItemTradingAllowed</td>
---<td>Boolean</td>
---<td>Any experience that allows users to purchase virtual items that they can trade with other players</td>
---<td>When true, the player can trade virtual items that they purchased with in-experience currency or Robux.</td>
---</tr>
---<tr>
---<td>IsSubjectToChinaPolicies</td>
---<td>Boolean</td>
---<td>Any experience that is available in China</td>
---<td>When true, an experience should enforce compliance changes. See <a href="https://devforum.roblox.com/t/new-programs-available-roblox-china-licensed-to-operate/1023361" target="_new">this developer forum post</a> for more information.</td>
---</tr>
--- 	</tbody>
---</table>
---
---#### Exceptions
---
---Like any async call, this needs to be wrapped in a `pcall` and
---error-handled properly. A full list of possible error messages and their
---reasons is as below:
---
---<table>
---<thead>
---<tr>
---<th>Message</th>
---<th>Reason</th>
---</tr>
---</thead>
---<tbody>
--- <tr>
---<td>Instance was not a player</td>
---<td>Dev's usage - The parameter is not a Player instance</td>
---</tr>
--- <tr>
---<td>Players not found</td>
---  <td>Internal error - Players object missing</td>
---</tr>
--- <tr>
---<td>This method cannot be called on the client for a non-local player</td>
---<td>Dev's usage - This method cannot be called on the client for a non-local player</td>
---</tr>
---<tr>
---<td>GetPolicyInfoForPlayerAsync is called too many times</td>
---<td>Internal error - GetPolicyInfoForPlayerAsync is called more than 100(current setting) times before http response coming back</td>
---</tr>
--- 	</tbody>
---</table>
---
---See also:
---
---- `LocalizationService/GetCountryRegionForPlayerAsync`, returns
---  country/region code string according to player's client IP geolocation
---
PolicyService.GetPolicyInfoForPlayerAsync = function(self, player) end;
---@return Dictionary
PolicyService.GetPolicyInfoForServerRobloxOnlyAsync = function(self) end;
---@class Pose : PoseBase, Instance
---@field public CFrame CFrame
---@field public MaskWeight float
---A Pose holds the `CFrame` applied to the `Motor6D` connected to its associated
---`BasePart`. The part which is controlled depends on the name of the Pose.
---
---Poses are the fundamental building blocks of animations and, with `Keyframes`,
---make up `KeyframeSequences`.
---
---## Poses, joints and hierarchy
---
---Although a Pose is assigned to a `BasePart` by name, the object manipulated
---during animation playback is actually the `Motor6D` connected to this part.
---Animation rigs branch out from the model's root part through such joints.
---
---In a R15 character rig, the root part is the HumanoidRootPart. The LowerTorso
---is connected to the HumanoidRootPart by the a motor named 'Root'. Therefore,
---the `CFrame` of a Pose named 'LowerTorso' in a `Keyframe` would be applied to
---the motor named 'Root', and not the LowerTorso itself.
---
---Poses are arranged in a `Keyframe` based on joint hierarchy. This means, the
---Pose's `CFrame` is applied to the motor connecting the part associated with
---the pose to the part associated with the pose's parent. See below for a visual
---example of the structure of Poses on a R15 character.
---
---![][1]
---
---## Pose CFrame
---
---The Roblox animation system applies `Pose/CFrame` to the corresponding
---`Motor6D` by manipulating the relative transformation of the motor, the
---`Motor6D/Transform` property. The original `JointInstance/C1|C0` and
---`JointInstance/C1|C1` values are not changed.
---
---[1]: /assets/blt2e767397c28fecda/KeyframeSequence_-_Copy.png
---
local Pose;
---This `CFrame` applies to the `Motor6D` corresponding with the `Pose` when
---the `Motor6D\Transform` is changed. The original `Motor6D/C0` and
---`Motor6D/C1` values are not changed.
---
---`Pose` objects are arranged in a `Keyframe` based on joint hierarchy. This
---means, that the `Pose/CFrame` is applied to the motor connecting the part
---associated with the pose to the part associated with the pose's parent.
---
Pose.CFrame = nil;
---
Pose.MaskWeight = nil;
---@param pose Instance
---@return void
---Removes a sub `Pose` from the `Pose` by parenting it to nil. This is
---functionally identical to setting the new pose's `Instance/Parent` to nil.
---
---Note: If an `Instance` other than `Pose` is used as a `Pose` parameter,
---this function removes that `Instance` and does not provide an error.
---
Pose.RemoveSubPose = function(self, pose) end;
---@param pose Instance
---@return void
---Adds a sub `Pose` to the `Pose` by parenting it to it. It is functionally
---identical to setting the new pose's `Instance/Parent` to the pose.
---
---Note, this function will not error when an instance other than a `Pose` is
---given as the pose parameter and will parent it successfully.
---
Pose.AddSubPose = function(self, pose) end;
---@return Objects
---Returns an array containing all sub `Pose`s that have been added to a
---`Pose`. This is functionally the same as using the `Instance/GetChildren`
---function on the `Pose`.
---
---Note: this function returns all children of the `Pose`, including non
---`Pose` `Instance`s if any are present.
---
Pose.GetSubPoses = function(self) end;
---@class PoseBase : Instance
---@field public EasingDirection PoseEasingDirection
---@field public EasingStyle PoseEasingStyle
---@field public Weight float
---Base class of all 'Pose Instance' objects.
---
local PoseBase;
---The easing direction to use to reach the next Pose's value.
---
PoseBase.EasingDirection = nil;
---The easing style to use to reach the next Pose's value.
---
PoseBase.EasingStyle = nil;
---
PoseBase.Weight = nil;
---@class PostEffect : Instance
---@field public Enabled bool
---PostEffect is an abstract base class for post-processing effects, such as
---`BloomEffect` and `ColorCorrectionEffect`. They change how the world looks
---**after** it has been rendered. They do not affect `GuiObject`s. Objects of
---this kind should be parented to the `Lighting` or the
---`Workspace/CurrentCamera` in order to work.
---
---It should also be noted that some post-processing effects will work
---differently or **not at all** when Roblox is set to a low
---`RenderSettings/QualityLevel|QualityLevel` (or
---`RenderSettings/EditQualityLevel|EditQualityLevel` in Studio). On some low-end
---devices, faster rendering algorithms may be used. By default, these quality
---settings are set to Automatic, so if you aren't seeing post-processing effects
---you should check Roblox's settings under the "Rendering" section. It may be
---necessary to override the automatic behavior temporarily in order to preview
---post-processing effects.
---
local PostEffect;
---Toggles whether or not the PostEffect is enabled.
---
PostEffect.Enabled = nil;
---@class PrismaticConstraint : SlidingBallConstraint, Constraint, Instance
---A **PrismaticConstraint** creates a rigid joint between two
---`Attachment|Attachments`, allowing them to slide along one axis but not
---rotate. This constrains the attachments so that their **X** axes are collinear
---but pointing in opposite directions. It also constrains the attachments so
---that their **Y** axes are parallel.
---
---This constraint inherits properties from `SlidingBallConstraint` and can be
---configured to actuate translation, as follows:
---
---- If `SlidingBallConstraint/ActuatorType` is set to `Enum/ActuatorType|Motor`,
---  it will attempt to translate the attachments with the goal of reaching
---  `SlidingBallConstraint/Velocity`. This translation is limited by both
---  `SlidingBallConstraint/MotorMaxAcceleration` and
---  `SlidingBallConstraint/MotorMaxForce`.
---- If `SlidingBallConstraint/ActuatorType` is set to `Enum/ActuatorType|Servo`,
---  it will attempt to translate the attachments to a set separation specified
---  by `SlidingBallConstraint/TargetPosition`.
---
---Note that both actuated and free translation can be limited by setting
---`SlidingBallConstraint/LimitsEnabled` to `true`. Also note that if this
---constraint attaches one part (**A**) to another part (**B**) that is anchored
---or connected to an anchored part (**Z**), part **A** will not be locally
---simulated when interacting with a player.
---
local PrismaticConstraint;
---@class ProcessInstancePhysicsService : Instance
local ProcessInstancePhysicsService;
---@class ProximityPrompt : Instance
---@field public ActionText string
---@field public AutoLocalize bool
---@field public ClickablePrompt bool
---@field public Enabled bool
---@field public Exclusivity ProximityPromptExclusivity
---@field public GamepadKeyCode KeyCode
---@field public HoldDuration float
---@field public KeyboardKeyCode KeyCode
---@field public MaxActivationDistance float
---@field public ObjectText string
---@field public RequiresLineOfSight bool
---@field public RootLocalizationTable LocalizationTable
---@field public Style ProximityPromptStyle
---@field public UIOffset Vector2
---@field public PromptButtonHoldBegan RBXScriptSignal.PromptButtonHoldBegan
---@field public PromptButtonHoldEnded RBXScriptSignal.PromptButtonHoldEnded
---@field public PromptHidden RBXScriptSignal.PromptHidden
---@field public PromptShown RBXScriptSignal.PromptShown
---@field public TriggerEnded RBXScriptSignal.TriggerEnded
---@field public Triggered RBXScriptSignal.Triggered
---The ProximityPrompt is an object that allows developers to prompt users to
---interact with an object in the 3D world, such as opening a door or picking up
---an item.
---
---ProximityPrompts work when parented to a `Part`, `Model`, or `Attachment` in
---the workspace. In order to detect when the user interacts with the object,
---listen for the Triggered event on the ProximityPrompt in either a `Script` or
---`LocalScript`, as in this simple example:
---
---```lua
---workspace.Part.ProximityPrompt.Triggered:Connect(function(player)
---    print("The user interacted with me!")
---end)
---```
---
---When a user is near, a UI will appear to prompt them for input. This works for
---all input types - keyboard, gamepad, and touchscreen.
---
---The provided UI can be swapped out for your own custom UI. See
---`ProximityPrompt/Style` for details.
---
---### Prompt Appearance
---
---Prompts consist of three primary elements, each of which can be controlled by
---the following properties:
---
---<img src="/assets/blt452f8e22e82a11d8/ProximityPrompt-Diagram.png" />
---
---- **ObjectText** &mdash; An optional name for the object being interacted
---  with.
---- **ActionText** &mdash; An optional action name shown to the player.
---- **KeyboardKeyCode** &mdash; The keyboard key which will trigger the prompt.
---- **GamepadKeyCode** &mdash; The gamepad button which will trigger the prompt.
---
---For more information regarding ProximityPrompts, take a look at the Proximity
---Prompts.
---
local ProximityPrompt;
---This property determines the action text shown to the user.
---
ProximityPrompt.ActionText = nil;
---This property determines whether the prompt's `ProximityPrompt/ActionText`
---and `ProximityPrompt/ObjectText` will be localized according to the
---`ProximityPrompt/RootLocalizationTable`. When set to true, localization
---will be applied.
---
ProximityPrompt.AutoLocalize = nil;
---This property determines whether the prompt can be activated by
---clicking/tapping on the prompt's UI. When set to false, the prompt cannot
---be activated by click/tap except on mobile.
---
ProximityPrompt.ClickablePrompt = nil;
---This property indicates whether or this `ProximityPrompt` should be shown.
---
ProximityPrompt.Enabled = nil;
---This property is used to customize which prompts can be shown at the same
---time.
---
ProximityPrompt.Exclusivity = nil;
---This property determines the gamepad button the player should press to
---trigger the `ProximityPrompt|prompt`.
---
ProximityPrompt.GamepadKeyCode = nil;
---This property indicates the duration, in seconds, that the player must
---hold the button/key down to trigger the prompt.
---
ProximityPrompt.HoldDuration = nil;
---This property determines the key the player should press to trigger the
---`ProximityPrompt|prompt`.
---
ProximityPrompt.KeyboardKeyCode = nil;
---This property determines the maximum distance a Player's
---`Player/Character|character` can be from the `ProximityPrompt` for the
---prompt to appear.
---
ProximityPrompt.MaxActivationDistance = nil;
---This optional property determines the optional object name text shown to
---the user.
---
ProximityPrompt.ObjectText = nil;
---This property indicates whether the prompt is hidden if the path between
---the player's `Camera` and object parented to the `ProximityPrompt` is
---obstructed. If true, this prompt will only be shown if there is a clear
---path from the camera to the object.
---
---The parent `Part` or `Model` of the prompt will be excluded from this
---check.
---
ProximityPrompt.RequiresLineOfSight = nil;
---This property serves as a reference to the `LocalizationTable` used to
---apply automated localization to the ProximityPrompt's
---`ProximityPrompt/ActionText` and `ProximityPrompt/ObjectText`. In order
---for this to appy, `ProximityPrompt/AutoLocalize` must be set.
---
---Developers can set this to reference a LocalizationTable anywhere in the
---`DataModel`. It is not required to be a child of `LocalizationService`. If
---there is no translation available in the referenced table it will look for
---a translation in the parent of that table, if it is also a
---LocalizationTable, and so on.
---
ProximityPrompt.RootLocalizationTable = nil;
---This property indicates the `ProximityPrompt|ProximityPrompt's` style.
---When set to Custom, no default UI will be provided.
---
---The provided UI can be swapped out for a custom UI. In order to do this,
---set Style to Custom. Then, listen to the `ProximityPrompt/PromptShown` and
---`ProximityPrompt/PromptHidden` events in a `LocalScript`, where developers
---should create and tear down the UI.
---
---Developers may also use `ProximityPrompt/PromptButtonHoldBegan` and
---`ProximityPrompt/PromptButtonHoldEnded` in order to utilize the
---`ProximityPrompt/HoldDuration` progress animation feature.
---
ProximityPrompt.Style = nil;
---This property indicates the pixel offset applied to the prompt's UI.
---
ProximityPrompt.UIOffset = nil;
---@return void
---This function triggers a signal indicating that the user began pressing
---the `ProximityPrompt` prompt button. It should be used by developers who
---wish to customize the prompt and trigger it from a prompt GUI button
---press.
---
ProximityPrompt.InputHoldBegin = function(self) end;
---@return void
---A counterpoint to `ProximityPrompt/InputHoldBegin`, this signals that the
---user ended pressing the prompt GUI button.
---
ProximityPrompt.InputHoldEnd = function(self) end;
---@class RBXScriptSignal.PromptButtonHoldBegan : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptButtonHoldBegan, callback: fun(playerWhoTriggered: Player)): RBXScriptConnection
---This event triggers when a player begins holding down the
---`ProximityPrompt/KeyboardKeyCode|key`/button on a prompt with a non-zero
---`ProximityPrompt/HoldDuration`. One possible usage includes to animate a
---hold progress bar.
---
ProximityPrompt.PromptButtonHoldBegan = nil;
---@class RBXScriptSignal.PromptButtonHoldEnded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptButtonHoldEnded, callback: fun(playerWhoTriggered: Player)): RBXScriptConnection
---This event triggers when the player ends holding down the button on a
---prompt with a non-zero `ProximityPrompt/HoldDuration`. One possible usage
---includes to animate a hold progress bar.
---
ProximityPrompt.PromptButtonHoldEnded = nil;
---@class RBXScriptSignal.PromptHidden : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptHidden, callback: fun()): RBXScriptConnection
---This event triggers when the `ProximityPrompt|prompt` becomes hidden. This
---event is triggered client-side for `LocalScripts`.
---
ProximityPrompt.PromptHidden = nil;
---@class RBXScriptSignal.PromptShown : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptShown, callback: fun(inputType: ProximityPromptInputType)): RBXScriptConnection
---This event triggers when the `ProximityPrompt|prompt` becomes visible.
---This event is triggered client-side for `LocalScripts`.
---
ProximityPrompt.PromptShown = nil;
---@class RBXScriptSignal.TriggerEnded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.TriggerEnded, callback: fun(playerWhoTriggered: Player)): RBXScriptConnection
---This event is triggered when the
---`ProximityPrompt/KeyboardKeyCode|key`/button is released, for longer
---events where the user is required to hold down the button (e.g. heal
---another player over time.)
---
ProximityPrompt.TriggerEnded = nil;
---@class RBXScriptSignal.Triggered : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Triggered, callback: fun(playerWhoTriggered: Player)): RBXScriptConnection
---This event is triggered when the prompt
---`ProximityPrompt/KeyboardKeyCode|key`/button is pressed, or after a
---specified amount of time holding the button, if
---`ProximityPrompt/HoldDuration` is used.
---
ProximityPrompt.Triggered = nil;
---@class ProximityPromptService : Instance
---@field public Enabled bool
---@field public MaxPromptsVisible int
---@field public PromptButtonHoldBegan RBXScriptSignal.PromptButtonHoldBegan
---@field public PromptButtonHoldEnded RBXScriptSignal.PromptButtonHoldEnded
---@field public PromptHidden RBXScriptSignal.PromptHidden
---@field public PromptShown RBXScriptSignal.PromptShown
---@field public PromptTriggerEnded RBXScriptSignal.PromptTriggerEnded
---@field public PromptTriggered RBXScriptSignal.PromptTriggered
---The ProximityPromptService allows developers to interact with
---`ProximityPrompt` objects in a global way. It may be more convenient to listen
---to events on this service rather than individual ProximityPrompt objects.
---
local ProximityPromptService;
---This property determines whether `ProximityPrompt|ProximityPrompts` are
---enabled, and therefore shown, in-game. When false, no prompts will be
---shown.
---
---For example, in a round based system developers could disable prompts at
---certain points in the game to disable proximity-based interactions.
---
---```lua
----- Server Script 1
---local ProximityPromptService = game:GetService("ProximityPromptService")
---local enablePrompts = workspace.EnablePrompts -- BindableEvent
---
----- Connected to a BindableEvent that is fired by another script controlling game logic
---enablePrompts.OnServerEvent:Connect(function(enabled)
---	ProximityPromptService.Enabled = enabled
---end)
---```
---
---```lua
----- Server Script 2
---local enablePrompts = workspace.EnablePrompts -- BindableEvent
---
----- Some game event
---enablePrompts:FireServer(false) -- Disable
---wait(5)
---enablePrompts:FireServer(true) -- Re-enable
---```
---
ProximityPromptService.Enabled = nil;
---This property indicates the maximum number of
---`ProximityPrompt|ProximityPrompts` that will be shown to the user.
---
---The code block below demonstrates how this limit would be applied:
---
---```lua
---local ProximityPromptService = game:GetService("ProximityPromptService")
---ProximityPromptService.MaxPromptsVisible = 2 -- No more than 2 prompts will be shown to the user at any given time
---```
---
ProximityPromptService.MaxPromptsVisible = nil;
---@class RBXScriptSignal.PromptButtonHoldBegan : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptButtonHoldBegan, callback: fun(prompt: ProximityPrompt, playerWhoTriggered: Player)): RBXScriptConnection
---This event triggers when the player begins holding down the
---`ProximityPrompt/KeyboardKeyCode|key`/button on a prompt with a non-zero
---`ProximityPrompt/HoldDuration`. This can be used to animate a progress
---bar.
---
ProximityPromptService.PromptButtonHoldBegan = nil;
---@class RBXScriptSignal.PromptButtonHoldEnded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptButtonHoldEnded, callback: fun(prompt: ProximityPrompt, playerWhoTriggered: Player)): RBXScriptConnection
---This event triggers when the user stops holding down the
---`ProximityPrompt/KeyboardKeyCode|key`/button on a prompt with a non-zero
---`ProximityPrompt/HoldDuration`. This can be used to animate a progress
---bar.
---
ProximityPromptService.PromptButtonHoldEnded = nil;
---@class RBXScriptSignal.PromptHidden : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptHidden, callback: fun(prompt: ProximityPrompt)): RBXScriptConnection
---This event triggers client-side, in connected `LocalScript|LocalScripts`
---when a prompt becomes hidden.
---
ProximityPromptService.PromptHidden = nil;
---@class RBXScriptSignal.PromptShown : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptShown, callback: fun(prompt: ProximityPrompt, inputType: ProximityPromptInputType)): RBXScriptConnection
---This event triggers client-side, in connected `LocalScript|LocalScripts`,
---when a prompt becomes visible.
---
ProximityPromptService.PromptShown = nil;
---@class RBXScriptSignal.PromptTriggerEnded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptTriggerEnded, callback: fun(prompt: ProximityPrompt, playerWhoTriggered: Player)): RBXScriptConnection
---This event triggers when the player stops holding down the
---`ProximityPrompt/KeyboardKeyCode|key`/button while triggering a prompt.
---This is intended to allow interactions which require the player to hold a
---button while something happens in-game.
---
ProximityPromptService.PromptTriggerEnded = nil;
---@class RBXScriptSignal.PromptTriggered : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptTriggered, callback: fun(prompt: ProximityPrompt, playerWhoTriggered: Player)): RBXScriptConnection
---This event triggers when the player interacts with this prompt.
---
ProximityPromptService.PromptTriggered = nil;
---@class PublishService : Instance
local PublishService;
---@param wrap Instance
---@param cageType CageType
---@return Content
PublishService.PublishCageMeshAsync = function(self, wrap, cageType) end;
---@param instance Instance
---@return bool
PublishService.PublishDescendantAssets = function(self, instance) end;
---@class QWidgetPluginGui : PluginGui, LayerCollector, GuiBase2d, GuiBase, Instance
local QWidgetPluginGui;
---@class RayValue : ValueBase, Instance
---@field public Value Ray
---@field public Changed RBXScriptSignal.Changed
---@field public changed RBXScriptSignal.changed
---A RayValue is an object whose purpose is to store a single Ray. Similar to
---CFrameValue, a RayValue's stored ray cannot be viewed or edited within the
---Properties window within studio. Instead, use the Command bar to get and set
---the value of these objects. For example, you can use a line like the one below
---to create a new RayValue named "Value" within the `Workspace`. It creates a
---ray at (0, 50, 0) and it faces in the positive-X direction.
---
---`Instance.new("RayValue").Value = Ray.new(Vector3.new(0, 50, 0), Vector3.new(10, 0, 0))`
---
---Since there is no trivial way to edit rays within Studio, sometimes it is
---better to use a CFrameValue instead (which can be changed through a part or
---the camera). You can reconstruct a ray from a CFrame using
---`Ray.new(cf.p, cf.lookVector * dist)`, where `cf` is a given CFrame and `dist`
---is the length of the Ray you want to construct.
---
---Like all "-Value" objects, this single value is stored in the Value property.
---The Changed event for this (and other objects like it) will fire with the new
---value being stored in the object, instead of a string representing the
---property being changed.
---
local RayValue;
---The stored Ray.
---
RayValue.Value = nil;
---@class RBXScriptSignal.Changed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Changed, callback: fun(value: Ray)): RBXScriptConnection
---This event fires whenever the `RayValue/Value` property is changed. It
---will run with the new value being stored in the argument object, instead
---of a string representing the property being changed.
---
---This event, like other changed events, can be used to track when an
---RayValue changes and to track the different values that it may change to.
---
---Equivalent changed events exist for similar objects, such as `NumberValue`
---and `StringValue`, depending on what object type best suits the need.
---
RayValue.Changed = nil;
---@class RBXScriptSignal.changed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.changed, callback: fun(value: Ray)): RBXScriptConnection
---
RayValue.changed = nil;
---@class RbxAnalyticsService : Instance
local RbxAnalyticsService;
---@param key string
---@param value string
---@return void
RbxAnalyticsService.AddGlobalPointsTag = function(self, key, value) end;
---@param category string
---@param action string
---@param label string
---@param args Dictionary
---@param value int64
---@return void
RbxAnalyticsService.TrackEventWithArgs = function(self, category, action, label, args, value) end;
---@param target string
---@param eventContext string
---@param eventName string
---@param additionalArgs Dictionary
---@return void
RbxAnalyticsService.SendEventDeferred = function(self, target, eventContext, eventName, additionalArgs) end;
---@param seriesName string
---@param points Dictionary
---@param throttlingPercentage int
---@return void
RbxAnalyticsService.ReportInfluxSeries = function(self, seriesName, points, throttlingPercentage) end;
---@return string
RbxAnalyticsService.GetClientId = function(self) end;
---@return string
RbxAnalyticsService.GetSessionId = function(self) end;
---@param target string
---@return void
RbxAnalyticsService.ReleaseRBXEventStream = function(self, target) end;
---@param target string
---@param eventContext string
---@param eventName string
---@param additionalArgs Dictionary
---@return void
RbxAnalyticsService.SendEventImmediately = function(self, target, eventContext, eventName, additionalArgs) end;
---@param category string
---@param value float
---@return void
RbxAnalyticsService.ReportStats = function(self, category, value) end;
---@param target string
---@param eventContext string
---@param eventName string
---@param additionalArgs Dictionary
---@return void
RbxAnalyticsService.SetRBXEvent = function(self, target, eventContext, eventName, additionalArgs) end;
---@param key string
---@return void
RbxAnalyticsService.RemoveGlobalPointsField = function(self, key) end;
---@param target string
---@param eventContext string
---@param eventName string
---@param additionalArgs Dictionary
---@return void
RbxAnalyticsService.SetRBXEventStream = function(self, target, eventContext, eventName, additionalArgs) end;
---@param key string
---@param value int
---@return void
RbxAnalyticsService.AddGlobalPointsField = function(self, key, value) end;
---@param category string
---@param action string
---@param label string
---@param value int64
---@return void
RbxAnalyticsService.TrackEvent = function(self, category, action, label, value) end;
---@param featureName string
---@param measureName string
---@param seconds double
---@return void
RbxAnalyticsService.ReportToDiagByCountryCode = function(self, featureName, measureName, seconds) end;
---@param counterName string
---@param amount int
---@return void
RbxAnalyticsService.ReportCounter = function(self, counterName, amount) end;
---@param args Dictionary
---@return void
RbxAnalyticsService.UpdateHeartbeatObject = function(self, args) end;
---@param key string
---@return void
RbxAnalyticsService.RemoveGlobalPointsTag = function(self, key) end;
---@class ReflectionMetadata : Instance
---A currently unused object whose functionality was split into
---`ReflectionMetadataClasses` and `ReflectionMetadataEnums`.
---
local ReflectionMetadata;
---@class ReflectionMetadataCallbacks : Instance
---Acts as a `Folder` containing information about callbacks for a
---`ReflectionMetadataClass`, and should be parented to it.
---`ReflectionMetadataMember`s that are parented to this object will be perceived
---as callbacks under the class this is parented to.
---
local ReflectionMetadataCallbacks;
---@class ReflectionMetadataClass : ReflectionMetadataItem, Instance
---@field public ExplorerImageIndex int
---@field public ExplorerOrder int
---@field public Insertable bool
---@field public PreferredParent string
---Registers information about a class, and its members. Should be parented to
---`ReflectionMetadataClasses`
---
local ReflectionMetadataClass;
---A number index, which refers to a specific class icon.
---
ReflectionMetadataClass.ExplorerImageIndex = nil;
---Determines how this class is sorted in the Explorer compared to other
---classes.
---
ReflectionMetadataClass.ExplorerOrder = nil;
---Toggles whether or not this object can be inserted through the Advanced
---Objects menu.
---
ReflectionMetadataClass.Insertable = nil;
---Sets the class that this class would prefer parenting to.
---
ReflectionMetadataClass.PreferredParent = nil;
---@class ReflectionMetadataClasses : Instance
---Acts as a `Folder` for `ReflectionMetadataClass` objects.
---
local ReflectionMetadataClasses;
---@class ReflectionMetadataEnum : ReflectionMetadataItem, Instance
---The ReflectionMetadataEnum is the class that registers information about an
---Enum, and its EnumItems. It should be parented to `ReflectionMetadataEnums`.
---
---Since it is an internal object, it cannot be used by developers.
---
local ReflectionMetadataEnum;
---@class ReflectionMetadataEnumItem : ReflectionMetadataItem, Instance
---The ReflectionMetadataEnumItem is the class containing information about a
---specific EnumItem embedded within an Enum and should be parented to a
---`ReflectionMetadataEnum`.
---
---Since it is an internal object, it cannot be used by developers.
---
local ReflectionMetadataEnumItem;
---@class ReflectionMetadataEnums : Instance
---The ReflectionMetadataEnums is the class that acts as a `Folder` for
---`ReflectionMetadataEnum` objects.
---
---Since it is an internal object, it cannot be used by developers.
---
local ReflectionMetadataEnums;
---@class ReflectionMetadataEvents : Instance
---Acts as a `Folder` containing information about events for a
---`ReflectionMetadataClass`, and should be parented to it.
---`ReflectionMetadataMember`s that are parented to this object will be perceived
---as events under the class this is parented to.
---
local ReflectionMetadataEvents;
---@class ReflectionMetadataFunctions : Instance
---Acts as a `Folder` containing information about functions for a
---`ReflectionMetadataClass`, and should be parented to it.
---`ReflectionMetadataMember`s that are parented to this object will be perceived
---as functions under the class this is parented to.
---
local ReflectionMetadataFunctions;
---@class ReflectionMetadataItem : Instance
---@field public Browsable bool
---@field public ClassCategory string
---@field public ClientOnly bool
---@field public Constraint string
---@field public Deprecated bool
---@field public EditingDisabled bool
---@field public EditorType string
---@field public FFlag string
---@field public IsBackend bool
---@field public PropertyOrder int
---@field public ScriptContext string
---@field public ServerOnly bool
---@field public SliderScaling string
---@field public UIMaximum double
---@field public UIMinimum double
---@field public UINumTicks double
---Acts as abstract properties for generic information about Classes, Members,
---Enums, and EnumItems.
---
local ReflectionMetadataItem;
---When this value is true, it means that this property/class can be seen in
---Studio, e.g. in the explorer.
---
ReflectionMetadataItem.Browsable = nil;
---Describes the category of this class.
---
ReflectionMetadataItem.ClassCategory = nil;
---
ReflectionMetadataItem.ClientOnly = nil;
---Describes a constraint for a single-argument function whose argument type
---is a `Instance/ClassName`. Currently there are two constraints available:
---
---<table>
---<tbody><tr>
---<th>Constraint</th>
---<th>Description</th>
---</tr>
---<tr>
---<td>isScriptCreatable</td>
---<td>The specified class must be creatable with Instance.new</td>
---</tr>
---<tr>
---<td>isService</td>
---<td>The specified class must be a service.</td>
---</tr>
---</tbody></table>
---
ReflectionMetadataItem.Constraint = nil;
---When an object is deprecated, it should not be used anymore for new
---scripts.
---
ReflectionMetadataItem.Deprecated = nil;
---Toggles whether this property can be edited from the Properties window.
---
ReflectionMetadataItem.EditingDisabled = nil;
---
ReflectionMetadataItem.EditorType = nil;
---
ReflectionMetadataItem.FFlag = nil;
---This should determine if a method needs to use stuff on the Roblox main
---servers. This property isn't applied where it should be, though.
---
ReflectionMetadataItem.IsBackend = nil;
---
ReflectionMetadataItem.PropertyOrder = nil;
---Describes the context where this member can be used. If set to
---<a href="/scripting/luau/strings">"Server"</a>, this member will not be
---available to auto fill when editing a `LocalScript`. If set to
---<a href="/scripting/luau/strings">"Client"</a>, this member will not be
---available to auto fill when editing a `Script`.
---
ReflectionMetadataItem.ScriptContext = nil;
---
ReflectionMetadataItem.ServerOnly = nil;
---
ReflectionMetadataItem.SliderScaling = nil;
---The maximum value of this property. Used with
---`ReflectionMetadataItem/UIMinimum` to control the slider bar of this
---property in the `Properties` window.
---
ReflectionMetadataItem.UIMaximum = nil;
---The minimum value of this property. Used with
---`ReflectionMetadataItem/UIMaximum` to control the slider bar of this
---property in the `Properties` window.
---
ReflectionMetadataItem.UIMinimum = nil;
---The number of potential values the property's slider bar can be set to,
---`ReflectionMetadataItem/UIMinimum` and `ReflectionMetadataItem/UIMaximum`.
---
ReflectionMetadataItem.UINumTicks = nil;
---@class ReflectionMetadataMember : ReflectionMetadataItem, Instance
---ReflectionMetadataMember represents either a `Function`, `YieldFunction`, or
---`Property` in Roblox's ReflectionMetadata.
---
local ReflectionMetadataMember;
---@class ReflectionMetadataProperties : Instance
---Acts as a `Folder` containing information about properties for a
---`ReflectionMetadataClass`, and should be parented to it.
---`ReflectionMetadataMember`s that are parented to this object will be perceived
---as properties under the class this is parented to.
---
local ReflectionMetadataProperties;
---@class ReflectionMetadataYieldFunctions : Instance
---Acts as a `Folder` containing information about yielding functions for a
---`ReflectionMetadataClass`, and should be parented to it.
---`ReflectionMetadataMember`s that are parented to this object will be perceived
---as yielding functions under the class this is parented to.
---
local ReflectionMetadataYieldFunctions;
---@class RemoteDebuggerServer : Instance
local RemoteDebuggerServer;
---@class RemoteEvent : Instance
---@field public OnClientEvent RBXScriptSignal.OnClientEvent
---@field public OnServerEvent RBXScriptSignal.OnServerEvent
---A **RemoteEvent** is designed to provide a one-way message between the server
---and clients, allowing `Script|Scripts` to call code in
---`LocalScript|LocalScripts` and vice-versa. This message can be directed from
---one client to the server, from the server to a particular client, or from the
---server to all clients.
---
---In order for both the server and clients to utilize a remote event, the
---RemoteEvent object itself must be in a place where both sides can see it. As
---such, we recommend that you store the RemoteEvent inside of
---`ReplicatedStorage`, although in some cases it's appropriate to store it in
---the workspace or inside a `Tool`.
---
---If you need the result of the call, you should use a `RemoteFunction` instead.
---Otherwise a remote event is recommended since it will minimize network
---traffic/latency and won't yield the script to wait for a response. For more
---information, see
---[Remote Events and Functions](/scripting/networking/remote-events-and-functions).
---
local RemoteEvent;
---@param arguments Tuple
---@return void
---The FireAllClients function fires the `RemoteEvent/OnClientEvent` event
---for each client.
---
---Unlike `RemoteEvent/FireClient`, this event does not take a target player
---as an argument. Instead it will fire to all clients who have the same
---remote event connected to an OnClientEvent event.
---
---Since this function is used to communicate from the server to the client,
---it will only work when used in a `Script`.
---
---The behavior of this function, as well as other `RemoteEvent` and
---`RemoteFunction` events and functions, is well documented in [this][1]
---article.
---
---There are limitations on the kinds of data that can be passed between the
---client and server. For more information, see
---<a href="/scripting/networking/remote-events-and-functions#parameter-limitations">Parameter
---Limitations</a>.
---
---- Data can be passed from server to client through remote events in the
---  same way data is passed from client to server. Any extra information can
---  be passed in as arguments to the `RemoteEvent/FireClient` and
---  FireAllClients functions. Note that the FireClient function still needs
---  to pass the player to send the message to as the first argument.
---
---[1]: /scripting/networking/remote-events-and-functions
---
RemoteEvent.FireAllClients = function(self, arguments) end;
---@param arguments Tuple
---@return void
---The FireServer event fires the `RemoteEvent/OnServerEvent` event on the
---server using the arguments specified with an additional player argument at
---the beginning.
---
---Since this function is used to communicate from the client to the server,
---it will only work when used in a `LocalScript`.
---
---When firing from the client note that nothing has to be passed in by
---default (unlike firing to the client from the server - where the player is
---passed in).
---
---The functionality of this function, as well as other `RemoteEvent` and
---`RemoteFunction` events and functions, is well documented in [this][1]
---article.
---
---There are limitations on the kinds of data that can be passed between the
---client and server. For more information, see
---<a href="/scripting/networking/remote-events-and-functions#parameter-limitations">Parameter
---Limitations</a>.
---
RemoteEvent.FireServer = function(self, arguments) end;
---@param player Player
---@param arguments Tuple
---@return void
---**FireClient** causes `RemoteEvent/OnClientEvent|OnClientEvent` to be
---fired in `LocalScript`s running for the given `Player`. Additional data
---passed to this function is then provided to OnClientEvent; beware of
---[limitations](/scripting/networking/remote-events-and-functions#parameter-limitations)
---on this data.
---
---Since this function is used for communication from server to client, so it
---will only work when used by a server-side `Script`. For client-to-server
---communication (the other direction), use
---`RemoteEvent/FireServer|FireServer`. Direct client-to-client communication
---not possible on Roblox; however, it can be simulated using a `Script` that
---relays information received through some other means, such as
---`RemoteEvent/FireServer|FireServer`.
---
---There are limitations on the kinds of data that can be passed between the
---client and server. For more information, see
---<a href="/scripting/networking/remote-events-and-functions#parameter-limitations">Parameter
---Limitations</a>.
---
---See also:
---
---- `RemoteEvent/FireAllClients|FireAllClients`, which works similarly but
---  for all `Player`
---- [Remote Functions and Events][1], which describes related classes,
---  functions and events and also important limitations on the data that can
---  be sent
---- Sometimes a game will need to send information from one client to
---  another. Roblox does not support direct client to client contact, so any
---  communication must first go through the server. This is typically done
---  using remote events (although functions could be used if desired).
---  First, the sending client would call FireServer. On the server, the
---  function connected to OnServerEvent would hear this firing, and itself
---  would then call FireClient.
---
---[1]: /scripting/networking/remote-events-and-functions
---
RemoteEvent.FireClient = function(self, player, arguments) end;
---@class RBXScriptSignal.OnClientEvent : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnClientEvent, callback: fun(arguments: Tuple)): RBXScriptConnection
---The OnClientEvent event fires listening functions in `LocalScript` when
---either `RemoteEvent/FireClient` or `RemoteEvent/FireAllClients` is fired
---by the server from a `Script`.
---
---This is used to retrieve remote events fired by the server and intended
---for the client. This event is in place to provide a method for
---communicating between the server and client, which is well documented in
---[this][1] article. This event retrieves remote events fired by the server
---to the client.
---
---To fire from the client to the server, you should use
---`RemoteEvent/FireServer` and `RemoteEvent/OnServerEvent`.
---
---[1]: /scripting/networking/remote-events-and-functions
---
RemoteEvent.OnClientEvent = nil;
---@class RBXScriptSignal.OnServerEvent : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnServerEvent, callback: fun(player: Player, arguments: Tuple)): RBXScriptConnection
---Fires listening functions in `Script` when `RemoteEvent/FireServer` is
---called from a `LocalScript`.
---
---This is used to retrieve remote events fired by the client and intended
---for the server. This event is in place to provide a method for
---communicating between the client and server, which is well documented in
---[this][1] article. This event retrieves remote events fired by the client
---to the server.
---
---To fire from the server to the client, you should use
---`RemoteEvent/FireClient` and `RemoteEvent/OnClientEvent`.
---
---[1]: /scripting/networking/remote-events-and-functions
---
RemoteEvent.OnServerEvent = nil;
---@class RemoteFunction : Instance
---A server should rarely invoke a client via
---`RemoteFunction/InvokeClient|InvokeClient()` as it can be potentially game
---breaking. For client-only actions that don't require a callback, like updating
---a GUI, a server-to-client remote event should be used instead. If
---`RemoteFunction/InvokeClient|InvokeClient()` is used, risks include:
---
---- If the client throws an error, the server will throw the error too.
---- If the client disconnects while it's being invoked, the
---  `RemoteFunction/InvokeClient|InvokeClient()` call will error.
---- If the client never returns a value, the server will hang forever.
---
---A **RemoteFunction** is used to create in-game APIs that both the client and
---the server can use to communicate with each other. Like `BindableFunction`, a
---RemoteFunction can be invoked (called) to do a certain action and return the
---results.
---
---If the result is **not** needed, we recommend that you use a `RemoteEvent`
---instead, since its call is asynchronous and doesn't need to wait for a
---response to continue execution. See
---[Remote Functions and Events](/networking/remote-events-and-functions).
---
local RemoteFunction;
---@param player Player
---@param arguments Tuple
---@return Tuple
---Calls the method bound to the RemoteFunction by
---`RemoteFunction/OnClientInvoke` for the given `Player`. Use from a
---`Script`.
---
---If the result is not needed then it is recommended to use a
---`RemoteEvent/FireClient` instead, as its call is asynchronous and doesn't
---need to wait for a response to continue execution.
---
---This is used to bind functions to invoke the client when the remote
---function is invoked by the server. This function is in place to provide a
---method for communicating between the client and server, which is well
---documented in [this][1] article.
---
---To fire from the server to the client, you should use
---`RemoteFunction/InvokeServer` and `RemoteFunction/OnServerInvoke`.
---
---In practice, the server does not often invoke the client. Clients
---typically do not have information the server doesn't have and the actions
---that only a client can take (displaying a GUI for instance), often do not
---require a callback. That said, the server invoking clients is still an
---action that the Roblox engine will support and may be useful in niche
---situations.
---
---#### Warning
---
---If a client disconnects or leaves the game while it is being invoked from
---the server, the InvokeClient function will error. It is therefore
---recommended to wrap this function in a pcall so it doesn't stop the
---execution of other code.
---
---[1]: /scripting/networking/remote-events-and-functions
---
---There are limitations on the kinds of data that can be passed between the
---client and server. For more information, see
---<a href="/scripting/networking/remote-events-and-functions#parameter-limitations">Parameter
---Limitations</a>.
---
RemoteFunction.InvokeClient = function(self, player, arguments) end;
---@param arguments Tuple
---@return Tuple
---Clients invoking the server is often used because the server either has
---access to information the client does not, or the client is requesting a
---game action that only the server can perform. When invoked, this calls the
---method bound to the RemoteFunction by `RemoteFunction/OnServerInvoke`. Use
---from a `LocalScript`.
---
---If the result is not needed then it is recommended to use a
---`RemoteEvent/FireServer` instead, as its call is asynchronous and doesn't
---need to wait for a response to continue execution.
---
---This is used to bind functions to invoke the server when the remote
---function is invoked by a client. This function is in place to provide a
---method for communicating between the client and server, which is well
---documented in [this][1] article.
---
---To fire from the client to the server, you should use
---`RemoteFunction/InvokeClient` and `RemoteFunction/OnClientInvoke`.
---
---When handling the invocation from the client note that nothing has to be
---passed in by default (unlike invoking the server where the player is
---passed in).
---
---There are limitations on the kinds of data that can be passed between the
---client and server. For more information, see
---<a href="/scripting/networking/remote-events-and-functions#parameter-limitations">Parameter
---Limitations</a>.
---
RemoteFunction.InvokeServer = function(self, arguments) end;
---@class RenderSettings : Instance
---@field public AutoFRMLevel int
---@field public EagerBulkExecution bool
---@field public EditQualityLevel QualityLevel
---@field public EnableFRM bool
---@field public ExportMergeByMaterial bool
---@field public FrameRateManager FramerateManagerMode
---@field public GraphicsMode GraphicsMode
---@field public MeshCacheSize int
---@field public MeshPartDetailLevel MeshPartDetailLevel
---@field public QualityLevel QualityLevel
---@field public ReloadAssets bool
---@field public RenderCSGTrianglesDebug bool
---@field public ShowBoundingBoxes bool
---The RenderSettings is a singleton class, which lets developers debug
---components of Roblox's graphics engine.
---
---It can be found under the `Rendering` tab in Roblox Studio's settings menu.
---
local RenderSettings;
---Sets the starting quality level of the framerate manager, when
---`RenderSettings/EnableFRM` is set to true.
---
RenderSettings.AutoFRMLevel = nil;
---When set to true, all scene updates will be given an unlimited budget,
---regardless of how computationally expensive it may be. This ensures each
---frame will look as it should, at the cost of a more unstable frame rate.
---
---This is used when rendering game thumbnails.
---
RenderSettings.EagerBulkExecution = nil;
---Sets the graphics quality level in Roblox Studio, when
---`RenderSettings/EnableFRM` is set to false.
---
RenderSettings.EditQualityLevel = nil;
---Toggles the enabled state of the framerate manager.
---
RenderSettings.EnableFRM = nil;
---Sets whether materials should be generated per part, or per unique
---appearance in Roblox's obj exporter.
---
RenderSettings.ExportMergeByMaterial = nil;
---Specifies the behavior of the framerate manager.
---
RenderSettings.FrameRateManager = nil;
---The graphics API that Roblox will use on startup.
---
RenderSettings.GraphicsMode = nil;
---The size in bytes of the mesh cache. Defaults to 32 MBs.
---
RenderSettings.MeshCacheSize = nil;
---Determines the mode for the selection of detail levels for mesh parts. For
---a good balance between performance and fidelity this should be set to
---`MeshPartDetail.DistanceBased` (default), which is what the client uses.
---
---Note that the `MeshPart.RenderFidelity` needs to be set to
---`RenderFidelity.Automatic` for this to work. If you set it to
---`RenderFidelity.Precise` you will always see the higher resolution version
---and the `MeshPartDetailLevel` will be ignored for that `MeshPart`.
---
RenderSettings.MeshPartDetailLevel = nil;
---If `RenderSettings/EnableFRM` is set to true, this property controls the
---quality level in Roblox Studio.
---
RenderSettings.QualityLevel = nil;
---When set to true, Roblox Studio will automatically reload changes that are
---made to files in Roblox's `content` folder.
---
RenderSettings.ReloadAssets = nil;
---When set to true, a wireframe of polygons will be shown on all
---`PartOperation` objects.
---
RenderSettings.RenderCSGTrianglesDebug = nil;
---If set to true, renders bounding boxes around each individual rendered
---entity in the scene.
---
RenderSettings.ShowBoundingBoxes = nil;
---@return int
---Returns the maximum quality level.
---
RenderSettings.GetMaxQualityLevel = function(self) end;
---@class RenderingTest : Instance
---@field public CFrame CFrame
---@field public ComparisonDiffThreshold int
---@field public ComparisonMethod RenderingTestComparisonMethod
---@field public ComparisonPsnrThreshold float
---@field public Description string
---@field public FieldOfView float
---@field public Orientation Vector3
---@field public Position Vector3
---@field public QualityLevel int
---@field public ShouldSkip bool
---@field public Ticket string
---**RenderingTest** is an internal testing utility for the rendering pipeline.
---It is not intended for external use.
---
local RenderingTest;
---
RenderingTest.CFrame = nil;
---
RenderingTest.ComparisonDiffThreshold = nil;
---
RenderingTest.ComparisonMethod = nil;
---
RenderingTest.ComparisonPsnrThreshold = nil;
---
RenderingTest.Description = nil;
---
RenderingTest.FieldOfView = nil;
---
RenderingTest.Orientation = nil;
---
RenderingTest.Position = nil;
---
RenderingTest.QualityLevel = nil;
---
RenderingTest.ShouldSkip = nil;
---
RenderingTest.Ticket = nil;
---@return void
RenderingTest.RenderdocTriggerCapture = function(self) end;
---@class ReplicatedFirst : Instance
---@field public DefaultLoadingGuiRemoved RBXScriptSignal.DefaultLoadingGuiRemoved
---@field public FinishedReplicating RBXScriptSignal.FinishedReplicating
---@field public RemoveDefaultLoadingGuiSignal RBXScriptSignal.RemoveDefaultLoadingGuiSignal
---A container whose contents are replicated to all clients (but not back to the
---server) first before anything else.
---
---## What is ReplicatedFirst for?
---
---ReplicatedFirst is most commonly used to store `LocalScript`s and other
---objects that are essential for the game's start. As the contents of
---ReplicatedFirst replicate to the client before anything else in the game, it
---is ideal for creating loading GUIs or tutorials.
---
---For objects that do not need to be replicated first, developers should use the
---`ReplicatedStorage` container instead.
---
---## How can I use ReplicatedFirst?
---
---`LocalScript`s placed within ReplicatedFirst will run. This means code for
---custom loading screens or other ReplicatedFirst uses can be ran at the
---earliest possible point.
---
---There a number of key considerations developers need to remember when running
---`LocalScript`s in ReplicatedFirst.
---
---- Its contents replicate before anything else in the game, meaning
---  `LocalScript`s running in ReplicatedFirst will need to wait for any objects
---  they require to replicate using `Instance/WaitForChild`
---- Any objects that are to be used by a `LocalScript` in ReplicatedFirst should
---  also be parented to ReplicatedFirst. Otherwise, they may replicate to the
---  client late, yielding the script and negating the benefit of
---  ReplicatedFirst.
---
---ReplicatedFirst also includes the function
---`ReplicatedFirst/RemoveDefaultLoadingScreen`, which can be used to immediately
---remove the default Roblox loading screen. Note if any object has been placed
---in ReplicatedFirst, the default loading screen will remove after 5 seconds
---regardless if this function has been called or not.
---
local ReplicatedFirst;
---@return void
---Immediately removes the default Roblox loading screen. Note if any object
---has been placed in `ReplicatedFirst`, the default loading screen will
---remove after 5 seconds regardless if this function has been called or not.
---
---Developers should run this function from a `LocalScript` in
---`ReplicatedFirst`, as scripts in `ReplicatedFirst` will execute before
---anything else.
---
---It is advised to not remove the default loading screen unless the
---developer wishes to display their own loading screen as an alternative. If
---the default screen is removed without replacement users will be able to
---see geometry loading in the background.
---
ReplicatedFirst.RemoveDefaultLoadingScreen = function(self) end;
---@return bool
ReplicatedFirst.IsFinishedReplicating = function(self) end;
---@return bool
ReplicatedFirst.IsDefaultLoadingGuiRemoved = function(self) end;
---@return void
ReplicatedFirst.SetDefaultLoadingGuiRemoved = function(self) end;
---@class RBXScriptSignal.DefaultLoadingGuiRemoved : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.DefaultLoadingGuiRemoved, callback: fun()): RBXScriptConnection
---
ReplicatedFirst.DefaultLoadingGuiRemoved = nil;
---@class RBXScriptSignal.FinishedReplicating : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.FinishedReplicating, callback: fun()): RBXScriptConnection
---
ReplicatedFirst.FinishedReplicating = nil;
---@class RBXScriptSignal.RemoveDefaultLoadingGuiSignal : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.RemoveDefaultLoadingGuiSignal, callback: fun()): RBXScriptConnection
---
ReplicatedFirst.RemoveDefaultLoadingGuiSignal = nil;
---@class ReplicatedStorage : Instance
---**ReplicatedStorage** is a general container service for objects that are
---available to both the server and connected game clients. It is ideal for
---`ModuleScript`, `RemoteFunction`, `RemoteEvent` and other objects which are
---useful to both server-side `Script`s and client-side `LocalScript`s. `Script`
---and `LocalScript` objects will not run if they are parented to this service
---even if they are not `BaseScript/Disabled|Disabled`.
---
---If a `ModuleScript` within this service is required by any other script, it
---will run as normal. Such modules will typically house code that is shared by
---the server and client. Server-side `Script` that should run on their own
---should be parented to `ServerScriptService` instead. Client-side `LocalScript`
---have various other locations where they will eventually be run on a `Player`
---client: `StarterPlayerScripts`, `StarterCharacterScripts` or `StarterGui`.
---
---This service behaves similarly to `ServerStorage` except that its contents are
---replicated. If you are storing assets which should not be visible on the
---client or have no use to the client at all, you should use that service
---instead.
---
---Objects parented to this service are fully replicated to clients, and normal
---replication rules apply: any changes that are made on the client persist but
---won't be replicated to the server. Client changes may be overwritten if the
---server does something that overwrites those changes. For instance, a `Part`
---parented to ReplicatedStorage by the server may have a blue
---`BasePart/BrickColor|BrickColor`. A client could change this property to red
---locally, but this change remains only client. Should the server change the
---color to green, this change would be replicated to the client.
---
local ReplicatedStorage;
---@class ReverbSoundEffect : SoundEffect, Instance
---@field public DecayTime float
---@field public Density float
---@field public Diffusion float
---@field public DryLevel float
---@field public WetLevel float
---The ReverbSoundEffect simulates the effect of sounds bouncing off of several
---surfaces (such as walls in a room), which causes several overlapping echoes
---that arrive at the listener at slightly offset times.
---
---Like all other `SoundEffect`, a ChorusSoundEffect can be applied either to a
---`Sound` or `SoundGroup` by being parented to either.
---
local ReverbSoundEffect;
---Range: 0.1 to 20 (default 1.5) Sets how long it takes for the
---reverberating echoes to fade out completely. Larger decay times simulate
---larger (empty) spaces
---
ReverbSoundEffect.DecayTime = nil;
---Range: 0 to 1 (default 1) Controls how many reflections are generated.
---
ReverbSoundEffect.Density = nil;
---Range: 0 to 1 (default 1) Controls how smooth and reflective the simulated
---surfaces are. The lower this value, the more discrete the echoes are. At
---higher levels the echos will blend more.
---
ReverbSoundEffect.Diffusion = nil;
---Range: -80 to 10 (default -6) The output volume of the original sound.
---
ReverbSoundEffect.DryLevel = nil;
---Range: -80 to 10 (default 0) The output volume of the echoed effect.
---
ReverbSoundEffect.WetLevel = nil;
---@class RigidConstraint : Constraint, Instance
---@field public Broken bool
---@field public DestructionEnabled bool
---@field public DestructionForce float
---@field public DestructionTorque float
---**RigidConstraint** connects the `Constraint/Attachment0|Attachment0` and
---`Constraint/Attachment1|Attachment1` with zero offset.
---
---It functions similarly to `WeldConstraint`, which uses two `BasePart`s
---directly. However, this object uses two `Attachments` instead, which makes
---attaching accessories to avatars easy to do without code as you can use
---attachments on the rig.
---
---In Studio, you can create a RigidConstraint in the Constraints section of the
---Model tab.
---
local RigidConstraint;
---Shows if this constraint is broken.
---
RigidConstraint.Broken = nil;
---Enables destruction of the constraint by turning on force computations. If
---the internal reaction force or torque of the constraint exceeds their
---respective thresholds, the constraint breaks.
---
RigidConstraint.DestructionEnabled = nil;
---If the internal reaction force of the constraint exceeds this value, the
---constraint breaks.
---
RigidConstraint.DestructionForce = nil;
---If the internal reaction torque of the constraint exceeds this value, the
---constraint breaks.
---
RigidConstraint.DestructionTorque = nil;
---@class RobloxPluginGuiService : Instance
local RobloxPluginGuiService;
---@class RobloxReplicatedStorage : Instance
---RobloxReplicatedStorage is an internal version of the `ReplicatedStorage`
---service. It is used by Roblox's `CoreScript`s for backend server/client
---interactions, and it cannot be utilized by developers in-game.
---
local RobloxReplicatedStorage;
---@class RocketPropulsion : BodyMover, Instance
---@field public CartoonFactor float
---@field public MaxSpeed float
---@field public MaxThrust float
---@field public MaxTorque Vector3
---@field public Target BasePart
---@field public TargetOffset Vector3
---@field public TargetRadius float
---@field public ThrustD float
---@field public ThrustP float
---@field public TurnD float
---@field public TurnP float
---@field public ReachedTarget RBXScriptSignal.ReachedTarget
---The RocketPropulsion object applies a force on a part so that it both
---**follows** and **faces** a target part. It acts like a hybrid of
---`BodyPosition` and `BodyGyro`. Unlike other `BodyMover`s, a RocketPropulsion
---must be instructed to begin applying a force: call
---`RocketPropulsion/Fire|Fire` to start, or call `RocketPropulsion/Abort|Abort`
---to stop.
---
---You can detect when the part reaches its target using the
---`RocketPropulsion/ReachedTarget|ReachedTarget` event, which fires once the
---part is within the `RocketPropulsion/TargetRadius|TargetRadius` of the
---`RocketPropulsion/Target|Target`.
---
---RocketPropulsion has the most physics-related properties out of all the
---BodyMovers. It is helpful to separate the properties out into categories based
---on what they control:
---
---- **Goal:** `RocketPropulsion/Target|Target`,
---  `RocketPropulsion/TargetOffset|TargetOffset` and
---  `RocketPropulsion/TargetRadius|TargetRadius`
---- **Position (Thrust):** `RocketPropulsion/MaxSpeed|MaxSpeed`,
---  `RocketPropulsion/MaxThrust|MaxThrust`, `RocketPropulsion/ThrustD|ThrustD`
---  and `RocketPropulsion/ThrustP|ThrustP`
---- **Rotation (Turn):** - `RocketPropulsion/CartoonFactor|CartoonFactor`,
---  `RocketPropulsion/MaxTorque|MaxTorque`, `RocketPropulsion/TurnD|TurnD` and
---  `RocketPropulsion/TurnP|TurnP`
---
---Remember, you don't need to use both the translational and rotational force
---features of a RocketPropulsion: by setting
---`RocketPropulsion/MaxThrust|MaxThrust` to 0, you can make a part just face the
---target **without** having it follow the target around (consider also using a
---`BodyPosition` in addition). Similarly, by setting
---`RocketPropulsion/MaxTorque|MaxTorque` to `(0, 0, 0)`, you can have a part
---simply follow another object without facing it (use a `BodyGyro` if you want
---the object to maintain a specific orientation).
---
local RocketPropulsion;
---The CartoonFactor property determines the tendency of the part to face the
---`RocketPropulsion/Target|Target`. By default, this property is set to
---`0.7`. If set to `0`, the part will make no effort to face the target.
---
RocketPropulsion.CartoonFactor = nil;
---The MaxSpeed property determines the upper limit of the velocity at which
---the part will move toward the `RocketPropulsion/Target|Target`. A
---`RocketPropulsion` will apply a force to decelerate a part if it exceeds
---this speed limit.
---
RocketPropulsion.MaxSpeed = nil;
---The MaxThrust property determines the upper limit of the thrust that may
---be exerted to move the part. Parts or assemblies that have high
---`BasePart/GetMass|mass` will require more thrust in order to to remain
---airborne, and thus track the `RocketPropulsion/Target|Target`.
---
RocketPropulsion.MaxThrust = nil;
---The MaxTorque property determines the upper limit on the amount of torque
---that may be exerted in order to rotate the part towards the
---`RocketPropulsion/Target|Target`. It functions similarly to
---`BodyGyro/MaxTorque`.
---
RocketPropulsion.MaxTorque = nil;
---The Target property determines the object towards which the
---`RocketPropulsion` will exert force/torque. If set to `nil`, the the
---`RocketPropulsion/TargetOffset|TargetOffset` will be used instead.
---
RocketPropulsion.Target = nil;
---The TargetOffset property determines the world offset from the
---`RocketPropulsion/Target|Target`. Basically, it makes the
---`RocketPropulsion` behave as if the target were really offset by this
---property. It is especially useful when Target is set to nil, since this
---property then acts as the target position.
---
RocketPropulsion.TargetOffset = nil;
---The TargetRadius property determines the maximum distance from the
---`RocketPropulsion/Target` the part must be in order for the
---`RocketPropulsion/ReachedTarget` event to be fired. It does not affect the
---exerted forces in any way.
---
RocketPropulsion.TargetRadius = nil;
---The D property is used to dampen the velocity of the part in order to
---prevent it from overshooting the `RocketPropulsion/Target|Target` and
---causing a **rubber-banding** effect. It behaves similarly to
---`BodyPosition/D`.
---
RocketPropulsion.ThrustD = nil;
---The P property determines how much
---[power](<https://en.wikipedia.org/wiki/Power_(physics)>) is used while
---applying force in order to reach the `RocketPropulsion/Target|Target`
---position. The higher this value, the more power will be used and the
---faster it will be used. This property works similarly to `BodyPosition/P`.
---
RocketPropulsion.ThrustP = nil;
---The D property is how much **dampening** will be applied to the torque
---used to face the `RocketPropulsion/Target|Target`. When the part
---approaches the goal orientation it needs to decelerate, otherwise it will
---rotate past the goal and have to stop and re-accelerate back toward the
---goal. This is often creates undesirable **rubber-banding** effect, so
---applying dampening using this property is how that effect is avoided. The
---higher this value is set, the greater the dampening curve becomes, or the
---slower the part will approach the goal orientation.
---
RocketPropulsion.TurnD = nil;
---The P property determines how much
---[power](<https://en.wikipedia.org/wiki/Power_(physics)>) is used while
---applying torque in order to face the `RocketPropulsion/Target|Target`. The
---higher this value, the more power will be used and the faster it will be
---used.
---
RocketPropulsion.TurnP = nil;
---@return void
RocketPropulsion.fire = function(self) end;
---@return void
---Causes the rocket to fly towards Target.
---
RocketPropulsion.Fire = function(self) end;
---@return void
---Causes the Rocket to stop moving towards its target, making it fall.
---
RocketPropulsion.Abort = function(self) end;
---@class RBXScriptSignal.ReachedTarget : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ReachedTarget, callback: fun()): RBXScriptConnection
---Fired when the Rocket comes within TargetRadius of the Target. This is
---used to make the rocket work, such as make an explosion when it flies near
---the Target.
---
RocketPropulsion.ReachedTarget = nil;
---@class RodConstraint : Constraint, Instance
---@field public CurrentDistance float
---@field public Length float
---@field public LimitAngle0 float
---@field public LimitAngle1 float
---@field public LimitsEnabled bool
---@field public Thickness float
---A **RodConstraint** constrains two `Attachment|Attachments` to remain
---separated by the value specified by `RodConstraint/Length`. While the
---attachments remain at a set distance from one another, they can both rotate
---freely.
---
---By default, RodConstraints do not have angle constraints and allow each part
---to rotate without angular constraint. However, setting
---`RodConstraint/LimitsEnabled|LimitsEnabled` reveal the
---`RodConstraint/LimitAngle0|LimitAngle0` and
---`RodConstraint/LimitAngle1|LimitAngle1` properties, which control the maximum
---angle that either end of the rod may have against the respective attachment.
---In the image below, the two parts are joined by a RodConstraint with 45 degree
---limits on each end. The red part is not `BasePart/Anchored|Anchored`.
---
---<img src="https://images.contentstack.io/v3/assets/bltc2ad39afa86662c8/blt76b53a8b2f394e59/60feee1161f38746a5779267/Screenshot_7.png" height="257" width="298" />
---
---Note that if this constraint attaches one part (**A**) to another part (**B**)
---that is anchored or connected to an anchored part (**Z**), part **A** will not
---be locally simulated when interacting with a player.
---
local RodConstraint;
---The current distance between the `RodConstraint`'s two `Attachment`.
---
RodConstraint.CurrentDistance = nil;
---The distance apart the `RodConstraint` attempts to keep its `Attachment`
---at. Measured in studs.
---
RodConstraint.Length = nil;
---**LimitAngle0** determines the maximum angle between the rod and
---`Constraint/Attachment0|Attachment0` when
---`RodConstraint/LimitsEnabled|LimitsEnabled` is true. Otherwise, this
---property is hidden in the Properties window and does nothing.
---
---In the image below, the two parts are joined by a RodConstraint with 45
---degree limits on each end. The red part is not
---`BasePart/Anchored|Anchored`.
---
---<img src="https://images.contentstack.io/v3/assets/bltc2ad39afa86662c8/blt76b53a8b2f394e59/60feee1161f38746a5779267/Screenshot_7.png" height="257" width="298" />
---
---See also:
---
---- `RodConstraint/LimitsEnabled`, which determines if this property is
---  visible and functional.
---- `RodConstraint/LimitAngle1`, which works for the other attachment.
---- `Constriant/Attachment0`, the attachment that is affected by this
---  property.
---
RodConstraint.LimitAngle0 = nil;
---**LimitAngle1** determines the maximum angle between the rod and
---`Constraint/Attachment1|Attachment1` when
---`RodConstraint/LimitsEnabled|LimitsEnabled` is true. Otherwise, this
---property is hidden in the Properties window and does nothing.
---
---In the image below, the two parts are joined by a RodConstraint with 45
---degree limits on each end. The red part is not
---`BasePart/Anchored|Anchored`.
---
---<img src="https://images.contentstack.io/v3/assets/bltc2ad39afa86662c8/blt76b53a8b2f394e59/60feee1161f38746a5779267/Screenshot_7.png" height="257" width="298" />
---
---See also:
---
---- `RodConstraint/LimitsEnabled`, which determines if this property is
---  visible and functional
---- `RodConstraint/LimitAngle0`, which works for the other attachment
---- `Constriant/Attachment1`, the attachment that is affected by this
---  property
---
RodConstraint.LimitAngle1 = nil;
---**LimitsEnabled** determines whether the
---`RodConstraint/LimitAngle0|LimitAngle0` and
---`RodConstraint/LimitAngle1|LimitAngle1` properties control the angles
---between the rod and the respective attachments, as well as whether those
---properties are visible in the Properties window in Studio.
---
---In the image below, the two parts are joined by a RodConstraint with 45
---degree limits on each end. The red part is not
---`BasePart/Anchored|Anchored`.
---
---<img src="https://images.contentstack.io/v3/assets/bltc2ad39afa86662c8/blt76b53a8b2f394e59/60feee1161f38746a5779267/Screenshot_7.png" height="257" width="298" />
---
---See also:
---
---- `RodConstraint/LimitAngle0|LimitAngle0` and
---  `RodConstraint/LimitAngle1|LimitAngle1`
---- `Constraint/Attachment0|Attachment0` and
---  `Constraint/Attachment1|Attachment1`
---
RodConstraint.LimitsEnabled = nil;
---The visualized thickness of the RodConstraint.
---
RodConstraint.Thickness = nil;
---@class RopeConstraint : Constraint, Instance
---@field public CurrentDistance float
---@field public Length float
---@field public Restitution float
---@field public Thickness float
---@field public WinchEnabled bool
---@field public WinchForce float
---@field public WinchResponsiveness float
---@field public WinchSpeed float
---@field public WinchTarget float
---A RopeConstraint constrains two `Attachment` to separate no further than the
---length specified by `RopeConstraint/Length`. The attachments can move closer
---together than this length and can both freely rotate.
---
local RopeConstraint;
---The current distance between the RopeConstraint's two `Attachment`.
---
RopeConstraint.CurrentDistance = nil;
---The maximum distance two `Attachment` can be when connected with a
---`RopeConstraint`. Measured in studs.
---
RopeConstraint.Length = nil;
---Restitution controls how _elastic_ an `Attachment` connected by a
---`RopeConstraint` will be when reaching the end of the rope
---`RopeConstraint/Length`. The value of this property is constrained between
---0 and 1.
---
---A RopeConstraint with a Restitution of 0 will not bounce when its
---Attachments reach their maximum separation.
---
---![Restitution of 0][1]
---
---A RopeConstraint with a Restitution of 1 will be almost completely elastic
---when its Attachments reach their maximum separation.
---
---![Restitution of 1][2]
---
---[1]: /assets/blt918fb17dcde0ebf9/RopeConstraintRestitution0.gif
---[2]: /assets/blt75107360c23831ee/RopeConstraintRestitution1.gif
---
RopeConstraint.Restitution = nil;
---The visualized thickness of the RopeConstraint.
---
RopeConstraint.Thickness = nil;
---Enables the winch motor, which has the effect or reeling in or out the
---length of the rope to `RopeConstraint/WinchTarget`.
---
RopeConstraint.WinchEnabled = nil;
---The maximum force that the winch motor can apply.
---
RopeConstraint.WinchForce = nil;
---The sharpness of the winch motor in reaching the
---`RopeConstraint/WinchTarget`.
---
RopeConstraint.WinchResponsiveness = nil;
---A positive desired velocity at which the winch motor changes the rope
---length.
---
RopeConstraint.WinchSpeed = nil;
---The target length for the winch motor.
---
RopeConstraint.WinchTarget = nil;
---@class Rotate : JointInstance, Instance
---The Rotate object is used to allow rotation between two parts. Most commonly
---created through the Hinge SurfaceType on a `BasePart`. If created like this,
---the rotation will be about the normal vector from the face of the part the
---hinge is placed on. If created through a script the axis and point of rotation
---can be defined arbitrarily.
---
local Rotate;
---@class RotateP : DynamicRotate, JointInstance, Instance
---A RotateP object joins two parts together and allows rotation about a set
---axis. The joint will attempt to rotate the two parts until a desired
---rotational position is reached. This object is most commonly created by the
---SteppingMotor `Enum/SurfaceType`. If created through a script, a RotateP's
---behavoir is still governed by the SurfaceInput of `JointInstance/Part0`.
---
---The three inputs of note are as follows:
---
---- NoInput: The joint will not rotate under its own power. It can still be
---  rotated by external forces (such as from a character pushing one of the
---  parts).
---- Constant: The joint will rotate based on the ParamB property of
---  `JointInstance/Part0`. This rotation is measured in radians per physics
---  frame (which is approximately 1/60th of a second).
---- Sin: The joint will rotate based on the ParamA and ParamB properties of
---  `JointInstance/Part0`. The rotation measured in radians per physics frame is
---  calculated by the function: RotationRate = ParamA _ sin(distributedGameTime
---  _ ParamB). distributedGameTime is the current time of the game measured in
---  seconds.
---
local RotateP;
