---@class RotateV : DynamicRotate, JointInstance, Instance
---A RotateV object joins two parts together and allows rotation about a set
---axis. This object is most commonly created by the Motor `Enum/SurfaceType`. If
---created through a script, a RotateV's behavior is still governed by the
---SurfaceInput of `JointInstance/Part0`.
---
---The three inputs of note are as follows:
---
---- NoInput: The joint will not rotate under its own power. It can still be
---  rotated by external forces (such as from a character pushing one of the
---  parts).
---- Constant: The joint will rotate based on the ParamB property of
---  `JointInstance/Part0`. This rotation is measured in radians per physics
---  frame (which is approximately 1/60th of a second).
---- Sin: The joint will rotate based on the ParamA and ParamB properties of
---  `JointInstance/Part0`. The rotation measured in radians per physics frame is
---  calculated by the function: RotationRate = ParamA _ sin(distributedGameTime
---  _ ParamB). distributedGameTime is the current time of the game measured in
---  seconds.
---
local RotateV;
---@class RotationCurve : Instance
---@field public Length int
---This class holds a sorted list of `RotationCurveKey`s that represent a
---sequence of rotations. The shape of the interpolation curve between two
---RotationCurveKeys is determined by the RotationCurveKey interpolation type.
---RotationCurve provides a sampling method `GetValueAtTime` returning its result
---as the rotation component of a CFrame.
---
local RotationCurve;
---Number of rotation keys in this curve.
---
RotationCurve.Length = nil;
---@param index int
---@return RotationCurveKey
---Returns a copy of a key at a given index.
---
RotationCurve.GetKeyAtIndex = function(self, index) end;
---@param keys Array
---@return int
---Resets this curve keys using the RotationCurveKey array passed as
---argument. Keys in the keysArray are sorted in ascending time order before
---insertion. Keys at duplicated times are removed in a stable manner.
---Returns the number of keys actually inserted. Keys previously stored in
---this curve are removed before the keys passed as arguments are added.
---
RotationCurve.SetKeys = function(self, keys) end;
---@param time float
---@return CoordinateFrame?
---Samples the RotationCurve at a given time and returns the corresponding
---rotation as a CFrame. Empty RotationCurves are evaluated as identity.
---
RotationCurve.GetValueAtTime = function(self, time) end;
---@return Array
---Returns a copy of all the keys in the RotationCurve as a Lua array of
---RotationCurveKey.
---
RotationCurve.GetKeys = function(self) end;
---@param time float
---@return Array
---The first returned value is the index of the last key with
---`key.time <= time` (or `min(1,length`) if no key was found). The second
---returned value is the index of the first key with `key.time >= time` (or
---the length of the curve if no key was found satisfying the inequality).
---
RotationCurve.GetKeyIndicesAtTime = function(self, time) end;
---@param startingIndex int
---@param count int
---@return int
---Removes a given number of Keys starting from a given index. Returns the
---number of keys that were removed.
---
RotationCurve.RemoveKeyAtIndex = function(self, startingIndex, count) end;
---@param key RotationCurveKey
---@return Array
---Adds the key passed as argument to this curve. If a key at the same time
---is found it will be replaced. First return value is true if a key was
---added, false if a previous key was replaced. Second return value is the
---index at which the marker was added.
---
RotationCurve.InsertKey = function(self, key) end;
---@class RunService : Instance
---@field public ClientGitHash string
---@field public Heartbeat RBXScriptSignal.Heartbeat
---@field public PostSimulation RBXScriptSignal.PostSimulation
---@field public PreAnimation RBXScriptSignal.PreAnimation
---@field public PreRender RBXScriptSignal.PreRender
---@field public PreSimulation RBXScriptSignal.PreSimulation
---@field public RenderStepped RBXScriptSignal.RenderStepped
---@field public Stepped RBXScriptSignal.Stepped
---**RunService** contains methods and events for time-management as well as for
---managing the context in which a game or script is running. Methods like
---`RunService/IsClient|IsClient`, `RunService/IsServer|IsServer`,
---`RunService/IsStudio|IsStudio`, can help you determine under what context code
---is running. These methods are useful for ModuleScripts that may be required by
---both client and server scripts. Furthermore, `RunService/IsStudio|IsStudio`
---can be used to add special behaviors for in-studio testing.
---
---RunService also houses events that allow your code to adhere to Roblox's
---frame-by-frame loop, such as `RunService/Stepped|Stepped`,
---`RunService/Heartbeat|Heartbeat` and `RunService/RenderStepped|RenderStepped`.
---Selecting the proper event to use for any case is important, so you should
---read Task Scheduler to make an informed decision.
---
local RunService;
---
RunService.ClientGitHash = nil;
---@return void
---The Reset function resets the current game to a waypoint set when Run was
---called. This method should only be used after Run was called.
---
RunService.Reset = function(self) end;
---@return void
---This function runs the game's simulation, running physics and scripts.
---
---When the simulation is running, `RunService/IsRunning` will return _true_.
---However, `RunService/IsRunMode` will only return _true_ if the simulation
---was started using the 'Run' button in Roblox Studio. This means when this
---function is used to start the simulation, IsRunMode will return _false_
---even though the simulation is running.
---
---The simulation can be paused using `RunService/Pause` or the 'Pause'
---button in Roblox Studio. It can also be ended using `RunService/Stop`.
---
---Running the simulation can be used to assist with debugging in Roblox
---Studio. Currently it is not possible to restore the game to the state it
---was in prior to running the simulation if the simulation was started using
---this function. If this is a problem, instead use the 'Run' button in
---Roblox Studio.
---
---See also:
---
---- `RunService/IsRunning`
---- `RunService/Pause`
---- `RunService/Stop`
---
RunService.Run = function(self) end;
---@param name string
---@param priority int
---@param kw_function Function
---@return void
---The `BindToRenderStep` function binds a custom function to be called at a
---specific time during the render step. There are three main arguments for
---BindToRenderStep: `name`, `priority`, and `what function to call`.
---
---As it is linked to the client's rendering process, BindToRenderStep can
---only be called on the client.
---
---#### Name
---
---The `name` parameter is a label for the binding, and can be used with
---`RunService/UnbindFromRenderStep` if the binding is no longer needed.
---
---```lua
---local RunService = game:GetService("RunService")
---
---local function functionToBind() end
---
----- Bind the function above to the binding named "tempBinding"
---RunService:BindToRenderStep("tempBinding", 1, functionToBind)
----- Unbind the function bound to "tempBinding"
---RunService:UnbindFromRenderStep("tempBinding")
---```
---
---#### Priority
---
---The `priority` of the binding is an integer, and determines when during
---the render step to call the custom function. The lower this number, the
---sooner the custom function will be called. If two bindings have the same
---priority the Roblox engine will randomly pick one to run first. The
---default Roblox control scripts run with these specific priorities:
---
---- Player Input: 100
---- Camera Controls: 200 For convenience, the `Enum/RenderPriority` enum can
---  be used to determine the integer value to set a binding. For example, to
---  make a binding right before the default camera update, simply subtract 1
---  from the camera priority level.
---
---When using Enum.RenderPriority, remember to use **_InlineCode.Value_** at
---the end of the desired enum. BindToRenderStep will not work if just the
---enum on its own is used.
---
---```lua
---local RunService = game:GetService("RunService")
---
---local function beforeCamera(delta)
---	-- Code in here will run before the default Roblox camera script
---end
---
---RunService:BindToRenderStep("Before camera", Enum.RenderPriority.Camera.Value - 1, beforeCamera)
---```
---
---#### Custom Function and Delta Time
---
---The last argument of BindToRenderStep is the `custom function` to call.
---This function will be passed one parameter called deltaTime.
---**_DeltaTime_** shows how much time passed between the beginning of the
---previous render step and the beginning of the current render step.
---
---All rendering updates will wait until the code in the render step
---finishes. Make sure that any code called by BindToRenderStep runs quickly
---and efficiently. If code in BindToRenderStep takes too long, then the game
---visuals will be choppy.
---
RunService.BindToRenderStep = function(self, name, priority, kw_function) end;
---@param enable bool
---@return void
RunService.Set3dRenderingEnabled = function(self, enable) end;
---@return bool
---This function returns whether the current environment is running on the
---client.
---
---If the code that invoked this method is running in a client context (in a
---`LocalScript` or a `ModuleScript` required by a `LocalScript`) then this
---method will return _true_. In all other cases, this function will return
---_false_.
---
---If this function returns true, then the current environment can access
---client-only features like `RunService/RenderStepped` or
---`Players/LocalPlayer`.
---
---#### RunService test function results
---
---<table>
---  <thead>
---    <tr>
---      <th>Environment</th>
---      <th>IsStudio</th>
---      <th>IsClient</th>
---      <th>IsServer</th>
---      <th>IsEdit</th>
---      <th>IsRunning</th>
---      <th>IsRunMode</th>
---    </tr>
---  </thead>
---<tbody>
---    <tr>
---      <td>Live Player</td>
---      <td>false</td>
---      <td>true</td>
---      <td>false</td>
---    </tr>
---    <tr>
---      <td>Live Server</td>
---      <td>false</td>
---      <td>false</td>
---      <td>true</td>
---    </tr>
---    <tr>
---      <td>Edit Mode</td>
---      <td>true</td>
---      <td>true</td>
---      <td>true</td>
---      <td>true</td>
---      <td>false</td>
---      <td>false</td>
---    </tr>
---    <tr>
---      <td>Edit Mode (Team Create)</td>
---      <td>true</td>
---      <td>true</td>
---      <td>false</td>
---      <td>true</td>
---      <td>false</td>
---      <td>false</td>
---    </tr>
---    <tr>
---      <td>Run Mode</td>
---      <td>true</td>
---      <td>true</td>
---      <td>true</td>
---      <td>false</td>
---      <td>true</td>
---      <td>true</td>
---    </tr>
---    <tr>
---      <td>Play Mode (Client)</td>
---      <td>true</td>
---      <td>true</td>
---      <td>false</td>
---      <td>false</td>
---      <td>true</td>
---      <td>false</td>
---    </tr>
---    <tr>
---      <td>Play Mode (Server)</td>
---      <td>true</td>
---      <td>false</td>
---      <td>true</td>
---      <td>false</td>
---      <td>true</td>
---      <td>true</td>
---    </tr>
---    <tr>
---      <td>Team Test Player</td>
---      <td>true</td>
---      <td>true</td>
---      <td>false</td>
---      <td>false</td>
---      <td>true</td>
---      <td>false</td>
---    </tr>
---    <tr>
---      <td>Legacy Play Mode &dagger;</td>
---      <td>true</td>
---      <td>true</td>
---      <td>true</td>
---      <td>false</td>
---      <td>true</td>
---      <td>false</td>
---    </tr>
---  </tbody>
---</table>
---&dagger; 'Legacy Play Mode' refers to Play Mode with Accurate Play Solo
---disabled
---
---See also:
---
---- `RunService/IsServer`
---- `RunService/IsStudio`
---- `RunService/IsEdit`
---- `RunService/IsRunning`
---- `RunService/IsRunMode`
---
RunService.IsClient = function(self) end;
---@param focus bool
---@return void
RunService.SetRobloxGuiFocused = function(self, focus) end;
---@return bool
---This function returns whether the current environment is in 'Edit' mode.
---For example, Roblox Studio is in 'Edit Mode' when the game is not running.
---
---IsEdit will return the inverse of `RunService/IsRunning` with one
---exception, if the simulation has been 'paused' then both IsEdit and
---`RunService/IsRunning` will return false.
---
---See also:
---
---- `RunService/IsClient`
---- `RunService/IsServer`
---- `RunService/IsStudio`
---- `RunService/IsRunning`
---- `RunService/IsRunMode`
---
RunService.IsEdit = function(self) end;
---@return bool
---This function returns whether the 'Run' button has been pressed to run the
---simulation in Roblox Studio.
---
---If the user has pressed 'Run', then this function will return _true_. This
---function will continue to return _true_ if the simulation has been paused
---using the 'Pause' button. However, once it has been stopped using the
---'Stop' button it will revert to returning _false_.
---
---Roblox Studio only enters run mode when the 'Run' button is pressed, not
---the 'Play' button. This function will also return false if the simulation
---was started using `RunService/Run` rather than the 'Run' button.
---
---#### RunService test function results
---
---See also:
---
---- `RunService/IsClient`
---- `RunService/IsServer`
---- `RunService/IsStudio`
---- `RunService/IsRunning`
---- `RunService/IsEdit`
---
RunService.IsRunMode = function(self) end;
---@return bool
---Returns whether the game is currently running
---
---The game is considered running when it is not in edit mode in Roblox
---Studio. This means, if the simulation has been run using the 'Run' or
---'Play' buttons the game is running.
---
---IsRunning will always return the inverse of `RunService/IsEdit` with one
---exception, if the simulation has been 'paused' then both
---`RunService/IsEdit` and IsRunning will return false.
---
---#### RunService test function results
---
---See also:
---
---- `RunService/IsClient`
---- `RunService/IsServer`
---- `RunService/IsStudio`
---- `RunService/IsEdit`
---- `RunService/IsRunMode`
---
RunService.IsRunning = function(self) end;
---@return string
RunService.GetRobloxVersion = function(self) end;
---@param name string
---@return void
---Given a name of a function sent to
---`RunService/BindToRenderStep|BindToRenderStep`, this method will unbind
---the function from being called during RenderStepped. This is used to
---unbind bound functions once they are no longer needed, or when they no
---longer need to fire every _step_.
---
---If there is no bound function by the given name, this method raises an
---error. You can prevent such an error from being raised by using `pcall`.
---For example, if you bind a function named `drawImage` using
---`RunService/BindToRenderStep|BindToRenderStep`, the following code would
---unbind the function, suppressing errors if there wasn't already a function
---with the name `drawImage` bound.
---
---````lua
---local RunService = game:GetService("RunService")
---
---local success, message = pcall(function() RunService:UnbindFromRenderStep("drawImage") end)
---if success then
---	print("Success: Function unbound!")
---else
---	print("An error occurred: "..message)
---end
---```"
---````
---
RunService.UnbindFromRenderStep = function(self, name) end;
---@return bool
---This function returns whether the current environment is running in Roblox
---Studio.
---
---This function will only return _true_ when using Roblox Studio and can be
---used to add code to test your game within Studio.
---
---See also:
---
---- `RunService/IsClient`
---- `RunService/IsServer`
---- `RunService/IsStudio`
---- `RunService/IsEdit`
---- `RunService/IsRunMode`
---
RunService.IsStudio = function(self) end;
---@return string
RunService.GetCoreScriptVersion = function(self) end;
---@param enable bool
---@return void
RunService.setThrottleFramerateEnabled = function(self, enable) end;
---@return void
---This function pauses the games' simulation if it is running, suspending
---physics and scripts.
---
---The simulation can be started using `RunService/Run` or the 'Run' button
---in Roblox Studio. When the simulation is paused, `RunService/IsRunning`
---will return _false_.
---
---Pausing the simulation can be used to assist with debugging in Roblox
---Studio, it cannot be used in real game sessions.
---
---See also:
---
---- `RunService/IsRunning`
---- `RunService/Run`
---- `RunService/Stop`
---
RunService.Pause = function(self) end;
---@return void
---This function ends the game's simulation if it is running.
---
---The simulation can be started using `RunService/Run` or the 'Run' button
---in Roblox Studio. When the simulation is stopped, `RunService/IsRunning`
---will return _false_ and `RunService/IsEdit` will return _true_.
---
---In contrast to the 'Stop' button in Roblox Studio, calling this function
---will not restore the game to the state it was in prior to the simulation
---being run. This means any changes made to the game by the physics
---simulation and scripts will persist after the simulation has ended.
---
---See also:
---
---- `RunService/IsRunning`
---- `RunService/Run`
---- `RunService/Pause`
---
RunService.Stop = function(self) end;
---@return bool
---This function returns whether the current environment is running on the
---server.
---
---If the code that invoked this method is running in a server context (in a
---`Script` or a `ModuleScript` required by a `Script`) then this method will
---return _true_. In all other cases, this function will return _false_.
---
---If this function returns true, then the current environment can access
---server-only features like `ServerStorage` or `ServerScriptService`.
---
---See also:
---
---- `RunService/IsClient`
---- `RunService/IsStudio`
---- `RunService/IsEdit`
---- `RunService/IsRunning`
---- `RunService/IsRunMode`
---
RunService.IsServer = function(self) end;
---@class RBXScriptSignal.Heartbeat : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Heartbeat, callback: fun(deltaTime: double)): RBXScriptConnection
---The Heartbeat event fires every _frame_, after the physics simulation has
---completed. The _step_ argument indicates the time that has elapsed since
---the previous frame.
---
---As Heartbeat fires every frame, it runs on a **variable frequency**. This
---means the rate will vary depending on the performance of the machine. If
---the game is running at 40 FPS, then Heartbeat will fire 40 times per
---second and the _step_ argument will be roughly 1/40th of a second.
---
---The _step_ argument can be used to account for the variable frequency of
---this event, for example:
---
---```lua
---local RunService = game:GetService("RunService")
---
---local RATE_PER_SECOND = 2
---
---RunService.Heartbeat:Connect(function(step)
---	local increment = RATE_PER_SECOND * step
---end)
---```
---
---There is no guarantee that functions connected to this event will fire at
---the exact same time, or in any specific order. For an alternative where
---the priority can be specified, see `RunService/BindToRenderStep`.
---
RunService.Heartbeat = nil;
---@class RBXScriptSignal.PostSimulation : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PostSimulation, callback: fun(deltaTime: double)): RBXScriptConnection
---
RunService.PostSimulation = nil;
---@class RBXScriptSignal.PreAnimation : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PreAnimation, callback: fun(deltaTime: double)): RBXScriptConnection
---
RunService.PreAnimation = nil;
---@class RBXScriptSignal.PreRender : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PreRender, callback: fun(deltaTime: double)): RBXScriptConnection
---
RunService.PreRender = nil;
---@class RBXScriptSignal.PreSimulation : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PreSimulation, callback: fun(deltaTime: double)): RBXScriptConnection
---
RunService.PreSimulation = nil;
---@class RBXScriptSignal.RenderStepped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.RenderStepped, callback: fun(deltaTime: double)): RBXScriptConnection
---The RenderStepped event fires every _frame_, prior to the frame being
---rendered. The _step_ argument indicates the time that has elapsed since
---the previous frame.
---
---RenderStepped does not run in parallel to Roblox's rendering tasks and
---code connected to RenderStepped must be executed prior to the frame being
---rendered. This can lead to significant performance issues if RenderStepped
---is used inappropriately. To avoid this, only use RenderStepped for code
---that works with the `Workspace/CurrentCamera|camera` or
---`Player/Character|character`. Otherwise, `RunService/Heartbeat` should be
---used.
---
---As RenderStepped fires every frame, it runs on a **variable frequency**.
---This means the rate will vary depending on the performance of the machine.
---If the game is running at 40 FPS, then RenderStepped will fire 40 times
---per second and the _step_ argument will be roughly 1/40th of a second.
---
---The _step_ argument can be used to account for the variable frequency of
---this event, for example:
---
---```lua
---local RunService = game:GetService("RunService")
---
---local RATE_PER_SECOND = 2
---
---RunService.RenderStepped:Connect(function(step)
---	local increment = RATE_PER_SECOND * step
---end)
---```
---
---There is no guarantee that functions connected to this event will fire at
---the exact same time, or in any specific order. For an alternative where
---the priority can be specified, see `RunService/BindToRenderStep`.
---
---As RenderStepped is client-side only, it can be used in a `LocalScript` or
---a `ModuleScript` required by a LocalScript.
---
RunService.RenderStepped = nil;
---@class RBXScriptSignal.Stepped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Stepped, callback: fun(time: double, deltaTime: double)): RBXScriptConnection
---The Stepped event fires every _frame_ prior to the physics simulation. The
---_step_ argument indicates the time that has elapsed since the previous
---frame.
---
---As Stepped fires every frame, it runs on a **variable frequency**. This
---means the rate will vary depending on the performance of the machine. If
---the game is running at 40 FPS, then Stepped will fire 40 times per second
---and the _step_ argument will be roughly 1/40th of a second.
---
---The _step_ argument can be used to account for the variable frequency of
---this event, for example:
---
---```lua
---local RunService = game:GetService("RunService")
---
---local RATE_PER_SECOND = 2
---
---RunService.Stepped:Connect(function(time, step)
---	local increment = RATE_PER_SECOND * step
---end)
---```
---
---There is no guarantee that functions connected to this event will fire at
---the exact same time, or in any specific order. For an alternative where
---the priority can be specified, see `RunService/BindToRenderStep`.
---
RunService.Stepped = nil;
---@class RunningAverageItemDouble : StatsItem, Instance
---A special type of `StatsItem` which measures the runtime average of an
---internal **double** value.
---
local RunningAverageItemDouble;
---@class RunningAverageItemInt : StatsItem, Instance
---A special type of `StatsItem` which measures the runtime average of an
---internal integer value. As of right now, this StatsItem goes unused.
---
local RunningAverageItemInt;
---@class RunningAverageTimeIntervalItem : StatsItem, Instance
---A special type of `StatsItem` which measures a runtime average time interval.
---As of right now, this StatsItem goes unused.
---
local RunningAverageTimeIntervalItem;
---@class RuntimeScriptService : Instance
---An internal service, probably in charge of managing the execution of scripts
---in run-time.
---
local RuntimeScriptService;
---@class ScreenGui : LayerCollector, GuiBase2d, GuiBase, Instance
---@field public DisplayOrder int
---@field public IgnoreGuiInset bool
---@field public OnTopOfCoreBlur bool
---The main storage object for 2D `GuiObject` displayed on the player's screen.
---ScreenGuis will only be shown if parented to a player's `PlayerGui`. To make
---sure a ScreenGui is displayed to your player, it should be parented into the
---`StarterGui`, as that service will clone it's contents into each player's
---`PlayerGui` when they join the game.
---
---## Caching static UI for performance improvements
---
---A Gui's appearance is cached until one of the following events occurs:
---
---- A descendant is added to the Gui.
---- A descendant is removed from the Gui.
---- A property of a descendant of the Gui changes.
---- A property of the Gui changes.
---
---If any of these events occur, the Gui's appearance will be recomputed the next
---frame it gets rendered.
---
local ScreenGui;
---This property controls the order that multiple ScreenGuis are drawn.
---ScreenGuis with a higher DisplayOrder will be drawn on top of ScreenGuis
---with a lower DisplayOrder. DisplayOrder can have any value greater than 0
---and defaults to 0.
---
ScreenGui.DisplayOrder = nil;
---IgnoreGuiInset is a boolean property of ScreenGuis that, when set to true,
---will force the `GuiService/GetGuiInset|GUI Inset` imposed by Roblox's
---CoreGuis to be ignored by this ScreenGui and its descendants. This means
---that an element with a UDim2 size of `{1,0},{1,0}` will fill up the entire
---screen, without a 36 pixel gap reserved for Roblox's top bar.
---
ScreenGui.IgnoreGuiInset = nil;
---
ScreenGui.OnTopOfCoreBlur = nil;
---@class Script : BaseScript, LuaSourceContainer, Instance
---@field public Source ProtectedString
---A Script is a type of Lua code container that will run its contents on the
---server. By default, Scripts have `print("Hello, world")` as their contents.
---The instant that the following conditions are met, a Script's Lua code is run
---in a new thread:
---
---- Disabled property is false
---- The Script object is a descendant of the `Workspace` or
---  `ServerScriptService`
---
---The Script will continue to run until the above conditions are not met, it
---terminates or it raises an error (unless that error is raised by a function
---connected to some event that is firing). Additionally, the thread will be
---stopped if the Script or one of its ancestors is destroyed. A script will
---continue to run even if the `Instance/Parent|Parent` property is set to nil
---(and the Script is not destroyed).
---
---It has access to server-side objects, properties and events. For example,
---Scripts can award badges to players using `BadgeService`, while a
---`LocalScript` on the client cannot. Actions taken by LocalScripts that are not
---replicated (due to `Workspace/FilteringEnabled`) will not be visible to
---Scripts.
---
local Script;
---A script's Source is the code to be executed. Modifying the code within a
---script modifies the source code executes when the script runs.
---
---For instance, given a script containing the line:
---
---```lua
---print("Hello world!")
---```
---
---The script's source is the "print("Hello world")" command because it is
---what will be executed when the script runs, leading to "Hello world" being
---printed in the command line.
---
---This item is protected. Attempting to use it in a `Script` or
---`LocalScript` will cause an error.
---
Script.Source = nil;
---@return string
---The GetHash function returns a hash of the script's source.
---
---#### What is a Hash
---
---A hash is a string of characters produced by a cryptographic algorithm
---that maps data of arbitrary size, since scripts can be short or long, to
---data of a fixed size, a string of a fixed length. Although they have
---several uses, hashes are often used to determine the integrity of data and
---make it faster to look up data. If you compare two pieces of data and
---their hashes do not match, then the data has changed.
---
---Hashes have three key properties:
---
---1.  They are often of fixed lengths. Since the function uses a hashing
---    algorithm known as MD5, this function always generates hashes
---    consisting of 32 hexadecimal (number and letter) characters.
---2.  The same data (e.g. script source) always generates the same hash.
---3.  Different data (e.g. different script sources) generate unique hashes.
---    It is highly unlikely that two different sources will generate the
---    same hash.
---
---#### Limitations
---
---The hash function has several limitations, including:
---
---- If the script's `BaseScript/LinkedSource|LinkedSource` property is set,
---  then this method will return the empty string.
---- This item is protected. Attempting to use it in a `Script` or
---  `LocalScript` will cause an error.
---
Script.GetHash = function(self) end;
---@class ScriptChangeService : Instance
---@field public ScriptAdded RBXScriptSignal.ScriptAdded
---@field public ScriptBeingRemoved RBXScriptSignal.ScriptBeingRemoved
---@field public ScriptChanged RBXScriptSignal.ScriptChanged
---@field public ScriptFullNameChanged RBXScriptSignal.ScriptFullNameChanged
---@field public ScriptSourceChanged RBXScriptSignal.ScriptSourceChanged
---@field public ScriptSourceEdited RBXScriptSignal.ScriptSourceEdited
local ScriptChangeService;
---@class RBXScriptSignal.ScriptAdded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ScriptAdded, callback: fun(script: LuaSourceContainer)): RBXScriptConnection
---
ScriptChangeService.ScriptAdded = nil;
---@class RBXScriptSignal.ScriptBeingRemoved : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ScriptBeingRemoved, callback: fun(script: LuaSourceContainer)): RBXScriptConnection
---
ScriptChangeService.ScriptBeingRemoved = nil;
---@class RBXScriptSignal.ScriptChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ScriptChanged, callback: fun(script: LuaSourceContainer, property: string)): RBXScriptConnection
---
ScriptChangeService.ScriptChanged = nil;
---@class RBXScriptSignal.ScriptFullNameChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ScriptFullNameChanged, callback: fun(script: LuaSourceContainer)): RBXScriptConnection
---
ScriptChangeService.ScriptFullNameChanged = nil;
---@class RBXScriptSignal.ScriptSourceChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ScriptSourceChanged, callback: fun(script: LuaSourceContainer)): RBXScriptConnection
---
ScriptChangeService.ScriptSourceChanged = nil;
---@class RBXScriptSignal.ScriptSourceEdited : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ScriptSourceEdited, callback: fun(script: LuaSourceContainer, edits: Array)): RBXScriptConnection
---
ScriptChangeService.ScriptSourceEdited = nil;
---@class ScriptCloneWatcher : Instance
local ScriptCloneWatcher;
---@class ScriptCloneWatcherHelper : Instance
local ScriptCloneWatcherHelper;
---@class ScriptContext : Instance
---@field public ScriptsDisabled bool
---@field public Error RBXScriptSignal.Error
---@field public ErrorDetailed RBXScriptSignal.ErrorDetailed
---This service controls all `BaseScript` objects. Most of the properties and
---methods of this service are locked for internal use, however you may use the
---`ScriptContext/ScriptsDisabled` property to disable all scripts from a thread
---with normal security access.
---
local ScriptContext;
---Sets whether `BaseScript` objects run their code. Scripts that are already
---running won't stop running.
---
ScriptContext.ScriptsDisabled = nil;
---@param name string
---@param parent Instance
---@return void
ScriptContext.AddCoreScriptLocal = function(self, name, parent) end;
---@return Array
ScriptContext.GetCoverageStats = function(self) end;
---@param seconds double
---@return void
---Limits how long a script is allowed to run without yielding.
---
ScriptContext.SetTimeout = function(self, seconds) end;
---@class RBXScriptSignal.Error : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Error, callback: fun(message: string, stackTrace: string, script: Instance)): RBXScriptConnection
---Fired when an error occurs.
---
ScriptContext.Error = nil;
---@class RBXScriptSignal.ErrorDetailed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ErrorDetailed, callback: fun(message: string, stackTrace: string, script: Instance, details: string, securityLevel: int)): RBXScriptConnection
---
ScriptContext.ErrorDetailed = nil;
---@class ScriptDebugger : Instance
---@field public CurrentLine int
---@field public IsDebugging bool
---@field public IsPaused bool
---@field public Script Instance
---@field public BreakpointAdded RBXScriptSignal.BreakpointAdded
---@field public BreakpointRemoved RBXScriptSignal.BreakpointRemoved
---@field public EncounteredBreak RBXScriptSignal.EncounteredBreak
---@field public Resuming RBXScriptSignal.Resuming
---@field public WatchAdded RBXScriptSignal.WatchAdded
---@field public WatchRemoved RBXScriptSignal.WatchRemoved
---A ScriptDebugger is used to handle the debugging of a specific script. It can
---be retrieved from the `DebuggerManager`.
---
local ScriptDebugger;
---The current line that the script is on.
---
ScriptDebugger.CurrentLine = nil;
---Describes if this ScriptDebugger is actually debugging the script attached
---to it.
---
ScriptDebugger.IsDebugging = nil;
---Describes if this ScriptDebugger is paused.
---
ScriptDebugger.IsPaused = nil;
---The script object this debugger is linked to.
---
ScriptDebugger.Script = nil;
---@param expression string
---@return Instance
---Adds a `DebuggerWatch` with the given expression.
---
ScriptDebugger.AddWatch = function(self, expression) end;
---@param stackFrame int
---@return Map
---Returns a dictionary of all local variables in the specified stack frame,
---where the keys are the names of the variables, and the values are the
---actual values of the variables.
---
ScriptDebugger.GetLocals = function(self, stackFrame) end;
---@return Objects
---Returns a list with all the `DebuggerWatch` instances for this debugger.
---
ScriptDebugger.GetWatches = function(self) end;
---@return Array
---Returns an array of all active call stack frames in the script.
---
ScriptDebugger.GetStack = function(self) end;
---@return Objects
---Returns a list of `DebuggerBreakpoint` present in the script.
---
ScriptDebugger.GetBreakpoints = function(self) end;
---@param name string
---@param value Variant
---@param stackFrame int
---@return void
---Sets the value of the variable `name` as `value` in the global environment
---of the specified stack frame.
---
ScriptDebugger.SetGlobal = function(self, name, value, stackFrame) end;
---@param name string
---@param value Variant
---@param stackFrame int
---@return void
---Sets the value of the variable `name` as `value` in the specified stack
---frame.
---
ScriptDebugger.SetLocal = function(self, name, value, stackFrame) end;
---@param stackFrame int
---@return Map
---Returns a dictionary of all upvalues present in the specified stack frame,
---where the keys are the names of the upvalues, and the values are the
---actual values of the upvalues.
---
ScriptDebugger.GetUpvalues = function(self, stackFrame) end;
---@param stackFrame int
---@return Map
---Returns a dictionary of all variables that are present in the global
---environment of the stack frame, where the keys are the names of the
---variables, and the values are the actual values of the variables.  
---Each stack frame might see different global variables if function
---environments are different.
---
ScriptDebugger.GetGlobals = function(self, stackFrame) end;
---@param name string
---@param value Variant
---@param stackFrame int
---@return void
---Sets the value of the upvalue _name_ as _value_ in the specified stack
---frame.
---
ScriptDebugger.SetUpvalue = function(self, name, value, stackFrame) end;
---@param watch Instance
---@return Variant
---Returns the current value of a variable being watched by a
---`DebuggerWatch`.
---
ScriptDebugger.GetWatchValue = function(self, watch) end;
---@param line int
---@param isContextDependentBreakpoint bool
---@return Instance
---Sets the specified line of the script as a breakpoint. Returns a
---`DebuggerBreakpoint` that you can use to manage the breakpoint.
---
ScriptDebugger.SetBreakpoint = function(self, line, isContextDependentBreakpoint) end;
---@class RBXScriptSignal.BreakpointAdded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.BreakpointAdded, callback: fun(breakpoint: Instance)): RBXScriptConnection
---Fires when a `DebuggerBreakpoint` is added to the script.
---
ScriptDebugger.BreakpointAdded = nil;
---@class RBXScriptSignal.BreakpointRemoved : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.BreakpointRemoved, callback: fun(breakpoint: Instance)): RBXScriptConnection
---Fires when a `DebuggerBreakpoint` is removed from the script.
---
ScriptDebugger.BreakpointRemoved = nil;
---@class RBXScriptSignal.EncounteredBreak : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.EncounteredBreak, callback: fun(line: int, breakReason: BreakReason)): RBXScriptConnection
---Fires when a `DebuggerBreakpoint` is encountered by the script.
---
ScriptDebugger.EncounteredBreak = nil;
---@class RBXScriptSignal.Resuming : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Resuming, callback: fun()): RBXScriptConnection
---Fires when the game is resumed after being paused by a breakpoint.
---
ScriptDebugger.Resuming = nil;
---@class RBXScriptSignal.WatchAdded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.WatchAdded, callback: fun(watch: Instance)): RBXScriptConnection
---Fires when a `DebuggerWatch` is added to this script debugger.
---
ScriptDebugger.WatchAdded = nil;
---@class RBXScriptSignal.WatchRemoved : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.WatchRemoved, callback: fun(watch: Instance)): RBXScriptConnection
---Fires when a `DebuggerWatch` is removed from this script debugger.
---
ScriptDebugger.WatchRemoved = nil;
---@class ScriptRegistrationService : Instance
local ScriptRegistrationService;
---@param guid string
---@return LuaSourceContainer
ScriptRegistrationService.GetSourceContainerByScriptGuid = function(self, guid) end;
---@class ScriptService : Instance
---An unimplemented service that has zero functionality, in a similar manner to
---the `LocalWorkspace` service.
---
local ScriptService;
---@class ScrollingFrame : GuiObject, GuiBase2d, GuiBase, Instance
---@field public AbsoluteCanvasSize Vector2
---@field public AbsoluteWindowSize Vector2
---@field public AutomaticCanvasSize AutomaticSize
---@field public BottomImage Content
---@field public CanvasPosition Vector2
---@field public CanvasSize UDim2
---@field public ElasticBehavior ElasticBehavior
---@field public HorizontalBarRect Rect
---@field public HorizontalScrollBarInset ScrollBarInset
---@field public MaxCanvasPosition Vector2
---@field public MidImage Content
---@field public ScrollBarImageColor3 Color3
---@field public ScrollBarImageTransparency float
---@field public ScrollBarThickness int
---@field public ScrollVelocity Vector2
---@field public ScrollingDirection ScrollingDirection
---@field public ScrollingEnabled bool
---@field public TopImage Content
---@field public VerticalBarRect Rect
---@field public VerticalScrollBarInset ScrollBarInset
---@field public VerticalScrollBarPosition VerticalScrollBarPosition
---The ScrollingFrame is a special `Frame` that handles all scrolling for you,
---with a range of different ways to customize how the scrolling works. An
---in-depth tutorial for the ScrollingFrame can be found
---<a href="https://developer.roblox.com/articles/Creating-a-Scrolling-Frame-GUI">here</a>.
---
local ScrollingFrame;
---The size in offsets of the area that is scrollable.
---
ScrollingFrame.AbsoluteCanvasSize = nil;
---The size in offsets of the frame, without the scrollbars.
---
ScrollingFrame.AbsoluteWindowSize = nil;
---This property is used to automatically size parent UI objects based on the
---size of its descendants. Developers can use this property to dynamically
---add text and other content to a UI object at edit or run time, and the
---size will adjust to fit that content.
---
---When AutomaticCanvasSize is set to an
---`Enum/AutomaticSize|Enum.AutomaticSize` value to anything other than None,
---`ScrollingFrame/CanvasSize` may resize depending on its child content.
---
---For more information on how to use this property and how it works, please
---see the following article: [How to use AutomaticSize][1].
---
---[1]: https://developer.roblox.com/articles/ui-automaticsize
---
ScrollingFrame.AutomaticCanvasSize = nil;
---The Down image on the vertical scrollbar. Size of this is always
---ScrollBarThickness by ScrollBarThickness. This is also used as the image
---on the horizontal scroll bar.
---
ScrollingFrame.BottomImage = nil;
---The location within the canvas, in offsets, that should be drawn at the
---top left of the scroll frame
---
ScrollingFrame.CanvasPosition = nil;
---Determines the size of the area that is scrollable. The UDim2 is
---calculated using the parent gui's size, similar to the regular Size
---property on gui objects.
---
ScrollingFrame.CanvasSize = nil;
---This property determines when elastic scrolling is allowed. It can be used
---to dictate if and when the `ScrollingFrame|ScrollingFrame` canvas is
---elastic. Defaults to WhenScrollable.
---
---#### What's the Differences Between Elastic and Non-Elastic
---
---##### Elastic
---
---The image below demonstrates Enum.Elasticity.Always an
---Enum.Elasticity.WhenScrollable when the canvas is scrollable:
---![Enum.Elasticity.Always][1]
---
---##### Non-Elastic
---
---The image below demonstrates Enum.Elasticity.Never:
---![Enum.Elasticity.Never][2]
---
---#### Enums
---
---It can be set to several `Enum/ElasticBehavior` enum values, which
---determine how elastic scrolling behaves:
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Description</th>
---		</tr>
---	</thead>
---	<tr>
---		<td>Always</td>
---		<td>Regardless of scrolling, you can always move the canvas a bit outside the bounds</td>
---	</tr> 
---	<tr>
---		<td>Never</td>
---		<td>You can never move the canvas outside the rect bounds</td>
---	</tr>
---	<tr>
---		<td>WhenScrollable</td>
---		<td>(default) Elastic scrolling is allowed when canvas size is larger than the rect size</td>
---	</tr>
---</table>
---
---See also:
---
---- `ScrollingFrame/ScrollingDirection`, the direction scrolling is allowed
---  in this scrolling frame
---
---[1]: /assets/blt9196df6e72785924/ElasticityAlways.gif
---[2]: /assets/blt11cf6cfa633763bc/ElasticityNever.gif
---
ScrollingFrame.ElasticBehavior = nil;
---
ScrollingFrame.HorizontalBarRect = nil;
---Indicates the inset behavior of the horizontal scrolling bar.
---
ScrollingFrame.HorizontalScrollBarInset = nil;
---
ScrollingFrame.MaxCanvasPosition = nil;
---The middle image on the vertical scrollbar. The size of this can vary in
---the y direction, but is always set as `ScrollingFrame/ScrollBarThickness`
---in the x direction. This is also used as the middle image on the
---horizontal scroll bar.
---
ScrollingFrame.MidImage = nil;
---Determines how a scrolling bar image is colorized. When set to white, no
---colorization occurs. This property is very useful for reusing image
---assets: If the source image is completely white with transparency, you can
---set the entire color of the image at once with this property.
---
ScrollingFrame.ScrollBarImageColor3 = nil;
---Determines the alpha of a scroll bar's rendered image. A value of 0 is
---completely opaque, and a value of 1 is completely transparent (invisible).
---This property behaves similarly to `GuiObject/BackgroundTransparency` or
---`BasePart/Transparency`.
---
ScrollingFrame.ScrollBarImageTransparency = nil;
---How thick the scroll bar appears. This applies to both the horizontal and
---vertical scroll bars. If set to 0, no scroll bars are rendered.
---
ScrollingFrame.ScrollBarThickness = nil;
---
ScrollingFrame.ScrollVelocity = nil;
---This property determines the direction scrolling is allowed. If scrolling
---is disallowed in a direction, the scrollbar will not appear. Defaults to
---XY.
---
---#### What are the Different Scrolling Directions
---
---##### XY (Default)
---
---The image below demonstrates Enum.ScrollingDirection.XY:
---![Enum.ScrollingDirection.XY][1]
---
---##### X
---
---The image below demonstrates Enum.ScrollingDirection.X:
---![Enum.ScrollingDirection.X][2]
---
---##### Y
---
---The image below demonstrates Enum.ScrollingDirection.Y:
---![Enum.ScrollingDirection.Y][3]
---
---#### Enums
---
---It can be set to several `Enum/ScrollingDirection` enum values, which
---determine how elastic scrolling behaves:
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Description</th>
---		</tr>
---	</thead>
---	<tr>
---		<td>XY</td>
---		<td>(default) Canvas can be scrolled along both X and Y axes</td>
---	</tr> 
---	<tr>
---		<td>X</td>
---		<td>Canvas can only be scrolled along the X axis</td>
---	</tr>
---	<tr>
---		<td>Y</td>
---		<td>Canvas can only be scrolled along the Y axis</td>
---	</tr>
---</table>
---
---See also:
---
---- `ScrollingFrame/ElasticBehavior`, how elastic scrolling behaves for
---  touch input
---
---[1]: /assets/blt678b1bc5d1f6beb8/ScrollingDirectionXY.gif
---[2]: /assets/blta0d180b895c30110/ScrollingDirectionX.gif
---[3]: /assets/blta95d990f00ed1417/ScrollingDirectionY.gif
---
ScrollingFrame.ScrollingDirection = nil;
---Determines whether or not scrolling is allowed on the frame. If false, no
---scroll bars will be rendered.
---
ScrollingFrame.ScrollingEnabled = nil;
---The Up image on the vertical scrollbar. The size of this is always
---ScrollBarThickness by ScrollBarThickness. This is also used as the left
---image on the horizontal scroll bar.
---
ScrollingFrame.TopImage = nil;
---
ScrollingFrame.VerticalBarRect = nil;
---Indicates the inset behavior of the vertical scrolling bar.
---
ScrollingFrame.VerticalScrollBarInset = nil;
---Indicates the side that the vertical scrollbar will be located at.
---
ScrollingFrame.VerticalScrollBarPosition = nil;
---@return void
ScrollingFrame.ScrollToTop = function(self) end;
---@return void
ScrollingFrame.ClearInertialScrolling = function(self) end;
---@return Vector2
ScrollingFrame.GetSampledInertialVelocity = function(self) end;
---@class Seat : Part, FormFactorPart, BasePart, PVInstance, Instance
---@field public Disabled bool
---@field public Occupant Humanoid
---A type of `BasePart` that a player character can 'sit' in. When a character
---touches an enabled Seat object, it will be attached to the part by a `Weld`
---and the default character scripts will play a sitting animation.
---
---## How do Seats work?
---
---When a model containing a `Humanoid` and a `BasePart` called
---'HumanoidRootPart' (generally a player character) touches a seat, a `Weld` is
---created between the seat and the part. The `JointInstance/C0|C0` and
---`JointInstance/C1|C1` properties are configured so that the character is
---welded 2 studs above the seat. This weld is named 'SeatWeld' and parented to
---the seat.
---
---When sitting the `Seat/Occupant` property is set to the `Humanoid` that is
---'sitting' in the seat. Furthermore the `Humanoid/SeatPart` property of the
---humanoid is set to the seat.
---
---A character can also be forced to sit in a seat using the `Seat/Sit` function.
---
---There are two ways for a character to get out of a seat. When a player jumps,
---they are removed from the seat. However this can also be done manually by
---destroying the seat weld, for example:
---
---    seat:FindFirstChild("SeatWeld"):Destroy()
---
---Note seats have a cooldown (currently 3 seconds) that is on a per-character
---per-seat basis. This means once a character has gotten out of a seat they
---cannot sit back on the same seat for 3 seconds. This cooldown behavior may
---change and should not be relied upon by developers.
---
---## What can Seats be used for?
---
---Seats have a diverse range of uses, ranging from the obvious to the more
---unconventional.
---
---- Creating chairs or benches without the need for any programming
---- Allowing characters to 'sit' in moving objects such as vehicles without
---  getting flung around
---- Creating interfaces that are controlled by the character in the seat using
---  the `Seat/Occupant` property
---
local Seat;
---Whether or not the seat is usable. If set to true, the seat will act as a
---normal part.
---
Seat.Disabled = nil;
---The humanoid that is sitting in the seat
---
Seat.Occupant = nil;
---@param humanoid Instance
---@return void
---Forces the character with the specified
---<a href="/reference/engine/classes/Humanoid">Humanoid</a> to sit in the
---Seat.
---
Seat.Sit = function(self, humanoid) end;
---@class Selection : Instance
---@field public ActiveInstance Instance
---@field public SelectionThickness float
---@field public SelectionChanged RBXScriptSignal.SelectionChanged
---The Selection service controls the `Instance`s that are selected in Roblox
---Studio.
---
---This service is particularly useful when developing `Plugin`s, as it allows
---the developer to access and manipulate the current selection.
---
---Currently selected `Instance`s can be obtained and set using the
---`Selection/Get` and `Selection/Set` functions. The
---`Selection/SelectionChanged` event fires whenever the current selection
---changes.
---
---For more information on using `Selection` and `Plugin`s, see `Plugin`.
---
---Selection is also often used in the command bar, to set hidden properties or
---run functions for selected `Instance`s. For example:
---
---```
---game.Selection:Get()[1]:SetPrimaryPartCFrame(CFrame.new()) -- move the selected model to the origin
---```
---
---Note this class only applies to Roblox Studio and has no applicability to
---games.
---
---[1]: https://developer.roblox.com/articles/Intro-to-Plugins
---
local Selection;
---
Selection.ActiveInstance = nil;
---
Selection.SelectionThickness = nil;
---@param center Vector3
---@param size Vector3
---@return void
Selection.SetTerrainSelectionHack = function(self, center, size) end;
---@param selection Objects
---@return void
---Sets the currently selected objects in Roblox Studio to `Instance`s in the
---given array.
---
---Calling this function will cause the `Selection/SelectionChanged` event to
---fire, unless the new selection set is identical to the previous selection.
---
---Note this function overwrites the existing selection. However, using
---`Selection/Get` an `Instance` can be added to the existing selection like
---so:
---
---```
---local selected = Selection:Get()
---table.insert(selected, object)
---Selection:Set(selected)
---```
---
Selection.Set = function(self, selection) end;
---@param instancesToRemove Objects
---@return void
Selection.Remove = function(self, instancesToRemove) end;
---@return void
Selection.ClearTerrainSelectionHack = function(self) end;
---@return Objects
---Returns an array of currently selected `Instance`s in Roblox Studio.
---
---If no `Instance`s are selected, the array returned be empty. This function
---can be used in conjunction with the `Selection/SelectionChanged` event to
---get the selection whenever it changes.
---
---Note, this function can only be used in `Plugin`s or the command line.
---
---For changing the current selection, please see `Selection/Set`.
---
Selection.Get = function(self) end;
---@param instancesToAdd Objects
---@return void
Selection.Add = function(self, instancesToAdd) end;
---@class RBXScriptSignal.SelectionChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.SelectionChanged, callback: fun()): RBXScriptConnection
---Fires when the `Instance`s selected in Roblox Studio changes.
---
---Note this event does not give the new selection. Developers will need to
---use `Selection`'s `Selection/Get` function to obtain the current
---selection.
---
---Although this event can be used outside of plugins and the command bar, it
---only applies to the selection in Roblox Studio and therefore has no
---functionality outside of Studio.
---
---To change the selection use the `Selection/Set` function.
---
Selection.SelectionChanged = nil;
---@class SelectionBox : InstanceAdornment, GuiBase3d, GuiBase, Instance
---@field public LineThickness float
---@field public SurfaceColor BrickColor
---@field public SurfaceColor3 Color3
---@field public SurfaceTransparency float
---**SelectionBox** is an object which renders a 3D box around its
---`PVAdornment/Adornee|Adornee` when it is a descendant of the `Workspace` or
---anywhere where GUI objects are rendered. The box's geometry consists of
---rectangular prisms forming an outline/wireframe in addition to a surface for
---each of its faces. By default, only the outline is visible.
---
---<img src="/assets/blta4e1984798842acd/SelectionBox.jpg" alt="A default SelectionBox adorned to a default Part"  />
---There are several properties available to configure the appearance of the
---cube. The outline can modified through the
---`GuiBase3d/Color3|Color3`&dagger;,
---`GuiBase3d/Transparency|Transparency`&dagger; and
---`SelectionBox/LineThickness|LineThickness` properties. The faces can be
---modified through the `SelectionBox/SurfaceColor3|SurfaceColor3` and
---`SelectionBox/SurfaceTransparency|SurfaceTransparency` properties.
---Finally, rendering of the box can be toggled with the
---`GuiBase3d/Visible|Visible`&dagger; property.
---
---&dagger; These properties come from this object's superclass, `GuiBase3d`.
---
---The SelectionBox object does not capture any form of input; it is solely a
---visual effect. To capture simple pointer input on the adornee, consider using
---a `ClickDetector`.
---
local SelectionBox;
---**LineThickness** determines the thickness of the box's outlines. It is
---measured in studs, the same unit for `BasePart/Size`. If set to 0, the
---outline will not be visible at all.
---
---<img src="/assets/blt1d73c3a921c12384/SelectionBox.LineThickness.jpg" alt="Three SelectionBoxes with LineThickness values of 0.075, 0.15 (default) and 0.3" />
---
---Pictured above are three default `Part`s with default SelectionBoxes
---applied to them. Their thicknesses from left-to-right are 0.075, 0.15
---(default) and 0.3.
---
---See also:
---
---- `GuiBase3d/Color`, a property of the superclass `GuiBase3d` which
---  controls the outline's color
---- `GuiBase3d/Transparency`, a property of the superclass `GuiBase3d` which
---  controls the outline's transparency
---
SelectionBox.LineThickness = nil;
---A `BrickColor` version of `SelectionBox/SurfaceColor3|SurfaceColor3`..
---
SelectionBox.SurfaceColor = nil;
---**SurfaceColor3** determines the color of the SelectionBox's surfaces.
---
---See also:
---
---- `SelectionBox/SurfaceTransparency|SurfaceTransparency`, which controls
---  the transparency of the surfaces. You may need to adjust this property
---  in order to see changes to SurfaceColor.
---- `GuiBase3d/Color`, a property of the superclass `GuiBase3d` which
---  controls the color of the outline rather than the surface faces
---
SelectionBox.SurfaceColor3 = nil;
---**SurfaceTransparency** determines the transparency of the SelectionBox's
---surfaces, similar to the way `BasePart/Transparency` works. By default,
---this property is 1, which causes the surfaces to not be visible.
---
---See also:
---
---- `SelectionBox/SurfaceColor3|SurfaceColor3`, which controls the color of
---  the surface.
---- `GuiBase3d/Transparency`, a property of the superclass `GuiBase3d` which
---  controls the transparency of the outline rather than the surface faces
---
SelectionBox.SurfaceTransparency = nil;
---@class SelectionLasso : GuiBase3d, GuiBase, Instance
---@field public Humanoid Humanoid
---The SelectionLasso class is an abstract class of which the inheritors are able
---to be attached to an object of the `Humanoid` class or the `BasePart` class.
---They can also be attached to a point in the tridimensional space indicated by
---a Vector3 value.
---
local SelectionLasso;
---The Humanoid that the Lasso belongs to, and will come from.
---
SelectionLasso.Humanoid = nil;
---@class SelectionPartLasso : SelectionLasso, GuiBase3d, GuiBase, Instance
---@field public Part BasePart
---An instance used to display a "lasso" between a `Humanoid` Torso and a
---`BasePart`. It should be noted that the `GuiBase3d/Transparency` property
---doesn't currently work.
---
local SelectionPartLasso;
---Sets the target of the lasso object.
---
SelectionPartLasso.Part = nil;
---@class SelectionPointLasso : SelectionLasso, GuiBase3d, GuiBase, Instance
---@field public Point Vector3
---A 3D GUI object which displays a lasso between the defined Humanoid and a
---given Vector3 point.
---
local SelectionPointLasso;
---Sets the Vector3 target of the lasso object.
---
SelectionPointLasso.Point = nil;
---@class SelectionSphere : PVAdornment, GuiBase3d, GuiBase, Instance
---@field public SurfaceColor BrickColor
---@field public SurfaceColor3 Color3
---@field public SurfaceTransparency float
---**SelectionSphere** is an object which renders a 3D sphere around its
---`PVAdornment/Adornee|Adornee` when it is a descendant of the `Workspace` or
---anywhere where GUI objects are rendered. The sphere's geometry consists of a
---ring/outline in addition to a surface. By default, only the outline is
---visible.
---
---<img src="/assets/bltb3e8cdfab0891947/SelectionSphere.jpg" alt="A default SelectionSphere adorned to a semi-transparent default Part"  />
---There are a few properties available to configure the appearance of the
---sphere. The outline can modified through the
---`GuiBase3d/Color3|Color3`&dagger; and
---`GuiBase3d/Transparency|Transparency`&dagger; properties. The surface can
---be modified through the `SelectionSphere/SurfaceColor3|SurfaceColor3` and
---`SelectionSphere/SurfaceTransparency|SurfaceTransparency` properties.
---Finally, rendering of the sphere can be toggled with the
---`GuiBase3d/Visible|Visible`&dagger; property.
---
---&dagger; These properties come from this object's superclass, `GuiBase3d`.
---
---The SelectionSphere object does not capture any form of input; it is solely a
---visual effect. To capture simple pointer input on the adornee, consider using
---a `ClickDetector`.
---
local SelectionSphere;
---A `BrickColor` version of `SelectionSphere/SurfaceColor3`.
---
SelectionSphere.SurfaceColor = nil;
---**SurfaceColor3** determines the color of the SelectionSphere's surface.
---
---See also:
---
---- `SelectionSphere/SurfaceTransparency|SurfaceTransparency`, which
---  controls the transparency of the surface. You may need to adjust this
---  property in order to see changes to SurfaceColor3.
---- `GuiBase3d/Color`, a property of the superclass `GuiBase3d` which
---  controls the color of the outline rather than the surface faces
---
SelectionSphere.SurfaceColor3 = nil;
---**SurfaceTransparency** determines the transparency of the
---SelectionSphere's surface, similar to the way `BasePart/Transparency`
---works. By default, this property is 1, which causes the surface to not be
---visible.
---
---See also:
---
---- `SelectionSphere/SurfaceColor3|SurfaceColor3`, which controls the color
---  of the surface.
---- `GuiBase3d/Transparency`, a property of the superclass `GuiBase3d` which
---  controls the transparency of the outline rather than the surface
---
SelectionSphere.SurfaceTransparency = nil;
---@class ServerReplicator : NetworkReplicator, Instance
---The ServerReplicator's job is to replicate changes from other clients and the
---server over to a certain client.
---
local ServerReplicator;
---@class ServerScriptService : Instance
---@field public LoadStringEnabled bool
---**ServerScriptService** is a container service for `Script`, `ModuleScript`
---and other scripting-related assets that are only meant for server use. The
---contents are never replicated to player clients at all, which allows for a
---secure storage of important game logic. Script objects will run if they are
---within this service and not `BaseScript/Disabled|Disabled`.
---
---This service houses just one property,
---`ServerScriptService/LoadStringEnabled|LoadStringEnabled`, which determines
---whether the `loadstring` function in Lua is enabled. It's recommended to keep
---this disabled for security reasons, as misusing this function can lead to
---remote code execution vulnerabilities.
---
---Scripts running in ServerScriptService may need access to various other assets
---which are not scripting-related, such as prefabricated models to be
---`Instance/Clone|cloned`. Such assets should go in `ServerStorage`, which
---behaves similarly to this service except that `Script` objects will not run
---even if they are not `BaseScript/Disabled|Disabled`. Assets and `ModuleScript`
---that are useful to both the server and clients should go in
---`ReplicatedStorage` instead. Finally, you can further organize objects within
---this service through the use of `Folder`s without affecting the way it
---behaves.
---
local ServerScriptService;
---Toggles whether or not the `loadstring` function can be used by server
---scripts. Defaults to false.
---
ServerScriptService.LoadStringEnabled = nil;
---@class ServerStorage : Instance
---A container whose contents are only accessible on the server. Objects
---descending from ServerStorage will not replicate to the client and will not be
---accessible from `LocalScript`s.
---
---As ServerStorage is a service it can only be accessed using the
---`DataModel/GetService` method.
---
---By storing large objects such as maps in ServerStorage until they are needed,
---network traffic will not be used up transmitting these objects to the client
---when they join the game.
---
---`Script`s will not run when they are parented to ServerStorage, although
---`ModuleScript`s contained within can be accessed and ran. It is recommended
---developers use `ServerScriptService` to hold `Script`s they wish the server to
---execute.
---
---Note that as the contents of ServerStorage can only be accessed by the server,
---its contents will need to be parented elsewhere (such as `Workspace`) before
---clients can access them. Developers who require a container that is accessible
---by both the server and client are advised to use `ReplicatedStorage` instead.
---
local ServerStorage;
---@class ServiceProvider : Instance
---@field public Close RBXScriptSignal.Close
---@field public CloseLate RBXScriptSignal.CloseLate
---@field public ServiceAdded RBXScriptSignal.ServiceAdded
---@field public ServiceRemoving RBXScriptSignal.ServiceRemoving
---A ServiceProvider is an abstract class, which stores, and provides certain
---singleton classes, depending on what inherited class you are using its members
---with.
---
local ServiceProvider;
---@generic CLASSNAMEGENERIC : string
---@param className `CLASSNAMEGENERIC`
---@return CLASSNAMEGENERIC
ServiceProvider.service = function(self, className) end;
---@generic CLASSNAMEGENERIC : string
---@param className `CLASSNAMEGENERIC`
---@return CLASSNAMEGENERIC
ServiceProvider.getService = function(self, className) end;
---@generic CLASSNAMEGENERIC : string
---@param className `CLASSNAMEGENERIC`
---@return CLASSNAMEGENERIC
---Returns the service specified by the given className if it's already
---created, errors for an invalid name.
---
ServiceProvider.FindService = function(self, className) end;
---@generic CLASSNAMEGENERIC : string
---@param className `CLASSNAMEGENERIC`
---@return CLASSNAMEGENERIC
---Returns a service with the class name requested. When called with the name
---of a service (such as `Debris`) it will return the instance of that
---service. If the service does not yet exist it will be created and the new
---service is returned. This is the only way to create some services, and can
---also be used for services that have unusual names, e.g. RunService's name
---is "Run Service".
---
---Note:
---
---- This function will return nil if the className parameter is an existing
---  class, but the class is not a service.
---- If you attempt to fetch a service that is present under another Object,
---  an error will be thrown stating that the "singleton serviceName already
---  exists".
---
ServiceProvider.GetService = function(self, className) end;
---@class RBXScriptSignal.Close : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Close, callback: fun()): RBXScriptConnection
---Fires when the current place is exited.
---
ServiceProvider.Close = nil;
---@class RBXScriptSignal.CloseLate : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.CloseLate, callback: fun()): RBXScriptConnection
---Fired immediately after the `ServiceProvider/Close` signal is fired.
---
ServiceProvider.CloseLate = nil;
---@class RBXScriptSignal.ServiceAdded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ServiceAdded, callback: fun(service: Instance)): RBXScriptConnection
---Fired when a service is created.
---
ServiceProvider.ServiceAdded = nil;
---@class RBXScriptSignal.ServiceRemoving : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ServiceRemoving, callback: fun(service: Instance)): RBXScriptConnection
---Fired when a service is about to be removed.
---
ServiceProvider.ServiceRemoving = nil;
---@class SessionService : Instance
local SessionService;
---@param key string
---@return void
SessionService.RemoveSessionsWithMetadataKey = function(self, key) end;
---@param sid string
---@param tag string
---@return void
SessionService.ReplaceSession = function(self, sid, tag) end;
---@param parentSid string
---@param childSid string
---@param tag string
---@return void
SessionService.SetSession = function(self, parentSid, childSid, tag) end;
---@param sid string
---@param key string
---@param value Variant
---@return void
SessionService.SetMetadata = function(self, sid, key, value) end;
---@param sid string
---@param key string
---@return void
SessionService.RemoveMetadata = function(self, sid, key) end;
---@param sid string
---@return int64
SessionService.GetCreatedTimestampUtcMs = function(self, sid) end;
---@return string
SessionService.GetRootSID = function(self) end;
---@param sid string
---@return bool
SessionService.SessionExists = function(self, sid) end;
---@param sid string
---@param key string
---@return Variant
SessionService.GetMetadata = function(self, sid, key) end;
---@param sid string
---@return void
SessionService.RemoveSession = function(self, sid) end;
---@class Shirt : Clothing, CharacterAppearance, Instance
---@field public ShirtTemplate Content
---<img src="/assets/bltc8da647cb0295112/Shirt.jpg" alt="A default rig wearing a very dapper Shirt (rbxassetid://86896487)"  />
---The **Shirt** object displays a Shirt texture from the Roblox website on a
---`Humanoid` rig. Shirts cover the torso and arms, and will take priority
---over a `Pants` on the torso. To be visible, a Shirt must be a sibling of a
---Humanoid and have its `Shirt/ShirtTemplate|ShirtTemplate` property set to
---an appropriate texture (such as `rbxassetid://86896487`, pictured to the
---right). The shirt texture may be colorized using the `Clothing/Color3`
---property.
---
---Shirts are automatically loaded on `Player` characters if their avatar is
---wearing one.
---
---See also:
---
---- `Pants`, an object which works similarly with the torso and legs
---- [Making Avatar Clothing][1], which goes into detail about creating Shirts
---  and Pants
---
---[1]:
---  https://developer.roblox.com/articles/How-to-Make-Shirts-and-Pants-for-Roblox-Characters
---
local Shirt;
---The content ID link pointing to the shirt template hosted on the Roblox
---website. Determines the texture of the `Shirt`.
---
---See also `ShirtGraphic/Graphic` for the image applied to T-shirts.
---
---#### Finding the ShirtTemplate ID
---
---This content ID is different than the website URL of the shirt. It can be
---found by pasting the website URL of the shirt into the **ShirtTemplate**
---property in Studio, as Studio will correct it. Alternatively
---`InsertService/LoadAsset` can be used to insert the shirt into the
---workspace, for example:
---
---```
---local webURL = "https://www.roblox.com/catalog/1804747/White-Shirt"
---local assetId = tonumber(string.match(webURL, "%d+") or 0)  -- Extract the number
---local success, model = pcall(function()
---	return game:GetService("InsertService"):LoadAsset(assetId)
---end)
---if success then
---	model.Parent = workspace
---end
---```
---
Shirt.ShirtTemplate = nil;
---@class ShirtGraphic : CharacterAppearance, Instance
---@field public Color3 Color3
---@field public Graphic Content
---The **ShirtGraphic** object applies a texture to the front surface of a
---character's torso. It is used to display t-shirts.
---
local ShirtGraphic;
---This property determines the colorization to be applied to the
---`ShirtGraphic` texture. It functions similarly to `ImageLabel/ImageColor3`
---except that it is applied to `ShirtGraphic` textures. This is useful for
---creating shirt graphics that have many different color variations but
---share the same basic look.
---
---See also:
---
---- `Clothing/Color3` which determines the colorization to be applied to the
---  `Clothing` texture
---
ShirtGraphic.Color3 = nil;
---The content ID link pointing to the `ShirtGraphic` texture hosted on the
---Roblox website. This property sets the texture associated with a t-shirt.
---
---#### Finding the ID
---
---This content ID is different than the website URL of the t-shirt. It can
---be found by pasting the website URL of the t-shirt into the **Graphic**
---property of the `ShirtGraphic` in Roblox Studio, as Studio will correct
---it. Alternatively `InsertService/LoadAsset` can be used to insert the
---t-shirt into the workspace, for example:
---
---```
---local webURL = "https://www.roblox.com/catalog/2591161/Sword-Fight-on-the-Heights-Ring-of-Fire-T-Shirt"
---local assetId = tonumber(string.match(webURL, "%d+") or 0)  -- Extract the number
---
---local success, model = pcall(function()
---	return game:GetService("InsertService"):LoadAsset(assetId)
---end)
---
---if success then
---	model.Parent = workspace
---end
---```
---
ShirtGraphic.Graphic = nil;
---@class SkateboardController : Controller, Instance
---@field public Steer float
---@field public Throttle float
---@field public AxisChanged RBXScriptSignal.AxisChanged
---A SkateboardController is an object responsible for translating PlayerActions
---to movements with a `SkateboardPlatform`.
---
local SkateboardController;
---The direction of movement, tied to the keys A and D. Must be 1 (right), 0
---(straight), or -1 (left). Will refresh back to 0 unless constantly set.
---
SkateboardController.Steer = nil;
---The direction of movement, tied to the keys W and S. Must be an integer 1
---(forward), 0 (null), or -1 (reverse). Will refresh back to 0 unless
---constantly set.
---
SkateboardController.Throttle = nil;
---@class RBXScriptSignal.AxisChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.AxisChanged, callback: fun(axis: string)): RBXScriptConnection
---Fired when any input state of the skateboard controller is updated. The
---`axis` is fired with either `"Throttle"` if the throttle state of the
---skateboard was updated or `"Steer"` if the steering state of the
---skateboard was updated.
---
SkateboardController.AxisChanged = nil;
---@class SkateboardPlatform : Part, FormFactorPart, BasePart, PVInstance, Instance
---@field public Controller SkateboardController
---@field public ControllingHumanoid Humanoid
---@field public Steer int
---@field public StickyWheels bool
---@field public Throttle int
---@field public Equipped RBXScriptSignal.Equipped
---@field public MoveStateChanged RBXScriptSignal.MoveStateChanged
---@field public Unequipped RBXScriptSignal.Unequipped
---@field public equipped RBXScriptSignal.equipped
---@field public unequipped RBXScriptSignal.unequipped
---A SkateboardPlatform can be used to create a skateboard. When characters get
---on a skateboard, they are stuck to it until they press the escape key. Until
---then, the character uses skateboard animations and travels faster than a
---walking character.
---
local SkateboardPlatform;
---The SkateboardPlatform's active SkateboardController.
---
SkateboardPlatform.Controller = nil;
---The `Humanoid` that is controlling the SkateboardPlatform.
---
SkateboardPlatform.ControllingHumanoid = nil;
---The direction of movement, tied to the keys A and D. Must be 1 (right), 0
---(straight), or -1 (left). Will refresh back to 0 unless constantly set.
---
SkateboardPlatform.Steer = nil;
---If true, wheels won't roll without user input.
---
SkateboardPlatform.StickyWheels = nil;
---The direction of movement, tied to the keys W and S. Must be an integer 1
---(forward), 0 (null), or -1 (reverse). Will refresh back to 0 unless
---constantly set.
---
SkateboardPlatform.Throttle = nil;
---@param impulseWorld Vector3
---@return void
---Adds ''impulseWorld'' to the SkateboardPlatform's `BasePart/Velocity`.
---
SkateboardPlatform.ApplySpecificImpulse = function(self, impulseWorld) end;
---@class RBXScriptSignal.Equipped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Equipped, callback: fun(humanoid: Instance, skateboardController: Instance)): RBXScriptConnection
---Fired when the skateboard is equipped.
---
SkateboardPlatform.Equipped = nil;
---@class RBXScriptSignal.MoveStateChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.MoveStateChanged, callback: fun(newState: MoveState, oldState: MoveState)): RBXScriptConnection
---Fired when the SkateboardPlatform's
---`SkateboardPlatform/ControllingHumanoid` changes the force being used on
---the SkateboardPlatform.
---
SkateboardPlatform.MoveStateChanged = nil;
---@class RBXScriptSignal.Unequipped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Unequipped, callback: fun(humanoid: Instance)): RBXScriptConnection
---Fired whenever the skateboard is unequipped.
---
SkateboardPlatform.Unequipped = nil;
---@class RBXScriptSignal.equipped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.equipped, callback: fun(humanoid: Instance, skateboardController: Instance)): RBXScriptConnection
---
SkateboardPlatform.equipped = nil;
---@class RBXScriptSignal.unequipped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.unequipped, callback: fun(humanoid: Instance)): RBXScriptConnection
---
SkateboardPlatform.unequipped = nil;
---@class Skin : CharacterAppearance, Instance
---@field public SkinColor BrickColor
---The Skin object, when placed into a humanoid model, will change the colors all
---body parts of the torso, head, etc, to value of the `Skin/SkinColor` property.
---
---Superceded by the `BodyColors` class.
---
local Skin;
---
Skin.SkinColor = nil;
---@class Sky : Instance
---@field public CelestialBodiesShown bool
---@field public MoonAngularSize float
---@field public MoonTextureId Content
---@field public SkyboxBk Content
---@field public SkyboxDn Content
---@field public SkyboxFt Content
---@field public SkyboxLf Content
---@field public SkyboxRt Content
---@field public SkyboxUp Content
---@field public StarCount int
---@field public SunAngularSize float
---@field public SunTextureId Content
---The Sky object is an object, when placed inside `Lighting`, will change the
---appearance of the game's sky. This allows for a custom sky to be used as
---opposed to the Roblox default sky. The Skybox is composed of six sides, much
---like that of a cube. If the skybox is changed/customised, the Sun and other
---objects in the sky will remain visible, unless you turn off the Sky object's
---`Sky/CelestialBodiesShown` property, which will remove the Sun, Moon, and
---stars from the sky. The recommended picture dimensions for a Skybox side are
---256x256 pixels. By adjusting the `Sky/StarCount` property of the Sky object,
---you can change how many stars will appear in the sky at night.
---
local Sky;
---Sets whether the Sun, Moon, and stars will show.
---
Sky.CelestialBodiesShown = nil;
---The perceived angular size of the moon while using this skybox, in
---degrees.
---
Sky.MoonAngularSize = nil;
---The texture of the moon while using this skybox.
---
Sky.MoonTextureId = nil;
---The URL link to a picture for the back surface of the sky.
---
Sky.SkyboxBk = nil;
---The URL asset link to a picture for the Bottom surface of the sky.
---
Sky.SkyboxDn = nil;
---The URL link to a picture for the front surface of the skybox.
---
Sky.SkyboxFt = nil;
---The URL link to a picture for the left surface of the sky.
---
Sky.SkyboxLf = nil;
---The URL link to a picture for the right surface of the sky.
---
Sky.SkyboxRt = nil;
---The URL link to a picture for the top surface of the sky.
---
Sky.SkyboxUp = nil;
---How many stars are shown in the skybox. Note that too many stars may cause
---severe lag. Only works if `Sky/CelestialBodiesShown` is true.
---
Sky.StarCount = nil;
---The perceived angular size of the sun while using this skybox, in degrees.
---
Sky.SunAngularSize = nil;
---The texture of the sun while using this skybox.
---
Sky.SunTextureId = nil;
---@class SlidingBallConstraint : Constraint, Instance
---@field public ActuatorType ActuatorType
---@field public CurrentPosition float
---@field public LimitsEnabled bool
---@field public LinearResponsiveness float
---@field public LowerLimit float
---@field public MotorMaxAcceleration float
---@field public MotorMaxForce float
---@field public Restitution float
---@field public ServoMaxForce float
---@field public Size float
---@field public Speed float
---@field public TargetPosition float
---@field public UpperLimit float
---@field public Velocity float
---The base class for constraints that allow their attachments to slide along an
---axis.
---
local SlidingBallConstraint;
---Sets whether the translation of the `PrismaticConstraint` is actuated and,
---if so, what kind of actuation.
---
---If ActuatorType is set to **None**, then the joint can slide freely:
---
---![None][1]
---
---If ActuatorType is set to **Motor**, then the PrismaticConstraint will
---attempt to move its `Attachment` at a constant velocity specified by
---`SlidingBallConstraint/Velocity`. The PrismaticConstraint will apply a
---force up to `SlidingBallConstraint/MotorMaxForce` to achieve the desired
---velocity but will be limited by
---`SlidingBallConstraint/MotorMaxAcceleration`.
---
---If ActuatorType is set to **Servo**, then the PrismaticConstraint will
---attempt to move its Attachments to an offset specified by
---`SlidingBallConstraint/TargetPosition`. The PrismaticConstraint will
---attempt to translate towards that goal at a target speed set by
---`SlidingBallConstraint/Speed`. The maximum force the PrismaticConstraint
---is allowed to use to meet these goals is set by
---`SlidingBallConstraint/ServoMaxForce`.
---
---[1]: /assets/bltf85c9e54774aad6c/SlidingBallConstraintNone.gif
---
SlidingBallConstraint.ActuatorType = nil;
---The current offset between the `SlidingBallConstraint`'s `Attachment`.
---
---![CurrentPosition][1]
---
---[1]: /assets/blt51716209ab3dcf43/SlidingBallConstraintCurrentPosition.png
---
SlidingBallConstraint.CurrentPosition = nil;
---Sets whether the `SlidingBallConstraint` will limit the range of
---translation. If enabled, the `SlidingBallConstraint/CurrentPosition` of
---the SlidingBallConstraint will only be able to be between the values of
---`SlidingBallConstraint/LowerLimit` and `SlidingBallConstraint/UpperLimit`.
---
---Here is a case where the UpperLimit is 2 and the LowerLimit is 1:
---
---![Constraint Limits 1][1]
---
---Here is a case where the UpperLimit is 4 and the LowerLimit is 2. Note
---that in this case the attachments will never be allowed to overlap; they
---will always be offset:
---
---![Constraint Limits 2][2]
---
---[1]: /assets/bltf14a6c4e36301d4b/SlidingBallConstraintLimits0.png
---[2]: /assets/blt7eda4750d97b868c/SlidingBallConstraintLimits1.png
---
SlidingBallConstraint.LimitsEnabled = nil;
---This property specifies the sharpness of the linear servo motor in
---reaching the `SlidingBallConstraint/TargetPosition`, when the derived
---classes' actuator type is set to **Servo**, for example the
---`CylindricalConstraint` and `PrismaticConstraint`. Larger values
---correspond to faster a response and smaller values results in more damping
---and a slower response.
---
SlidingBallConstraint.LinearResponsiveness = nil;
---The lower position limit along the x-axis of `Constraint/Attachment0` for
---a `SlidingBallConstraint` if `SlidingBallConstraint/LimitsEnabled` is
---true.
---
SlidingBallConstraint.LowerLimit = nil;
---The maximum acceleration a `SlidingBallConstraint` with
---`SlidingBallConstraint/ActuatorType` set to `Enum/ActuatorType` can apply
---when trying to reach its desired `SlidingBallConstraint/Velocity`.
---
SlidingBallConstraint.MotorMaxAcceleration = nil;
---The maximum force a `SlidingBallConstraint` with
---`SlidingBallConstraint/ActuatorType` set to `Enum/ActuatorType` can apply
---when trying to reach its desired `SlidingBallConstraint/Velocity`.
---
SlidingBallConstraint.MotorMaxForce = nil;
---How elastic `Attachment` connected by a SlidingBallConstraint will be when
---they reach the end of the range specified by
---`SlidingBallConstraint/UpperLimit` and `SlidingBallConstraint/LowerLimit`
---when `SlidingBallConstraint/LimitsEnabled` is set to true. Constrained
---between 0 and 1.
---
---Restitution of 0
---
---![Restitution of 0][1]
---
---Restitution of 0.5
---
---![Restitution of 0.5][2]
---
---Restitution of 1
---
---![Restitution of 1][3]
---
---[1]: /assets/blt0dcf5b9d1c2fa2ca/SlidingBallConstraintRestitution0.gif
---[2]: /assets/blt1a984025953dc44d/SlidingBallConstraintRestitution.5.gif
---[3]: /assets/blte3bdb0d471270631/SlidingBallConstraintRestitution1.gif
---
SlidingBallConstraint.Restitution = nil;
---The maximum force a `SlidingBallConstraint` with
---`SlidingBallConstraint/ActuatorType` set to `Enum/ActuatorType` can apply
---when trying to reach its desired `SlidingBallConstraint/Speed`.
---
SlidingBallConstraint.ServoMaxForce = nil;
---The visualized size of the SlidingBallConstraint.
---
SlidingBallConstraint.Size = nil;
---The desired speed a `SlidingBallConstraint` with
---`SlidingBallConstraint/ActuatorType` set to `Enum/ActuatorType` will
---attempt to maintain while translating towards its
---`SlidingBallConstraint/TargetPosition`. Measured in studs/second.
---
SlidingBallConstraint.Speed = nil;
---The target position a `SlidingBallConstraint` will attempt to translate to
---if its `SlidingBallConstraint/ActuatorType` is set to `Enum/ActuatorType`.
---Measured in studs.
---
SlidingBallConstraint.TargetPosition = nil;
---The upper position limit along the x-axis of `Constraint/Attachment0` for
---a `SlidingBallConstraint` if `SlidingBallConstraint/LimitsEnabled` is
---true.
---
SlidingBallConstraint.UpperLimit = nil;
---The velocity a `SlidingBallConstraint` with
---`SlidingBallConstraint/ActuatorType` set to `Enum/ActuatorType` will
---attempt to achieve. Measured in studs/second.
---
SlidingBallConstraint.Velocity = nil;
---@class Smoke : Instance
---@field public Color Color3
---@field public Enabled bool
---@field public Opacity float
---@field public RiseVelocity float
---@field public Size float
---@field public TimeScale float
---Smoke is one of several particle-emitting classes. Like other particle
---emitters of its kind, Smoke objects emit particles when parented to a
---`BasePart` (such as a `Part`) or an `Attachment` within such a `BasePart`.
---Compared to the `ParticleEmitter` class, Smoke lacks many different
---customization properties and special methods, such as
---`ParticleEmitter/Lifetime` or `ParticleEmitter/Emit`. It is useful to create a
---quick special effect in a pinch; for more detailed work it is preferable to
---use a `ParticleEmitter` instead.
---
---![Smoke rising from the part to which it was parented][1]
---
---When `Smoke/Enabled` is toggled off, particles emit by this object will
---continue to render until their lifetime expires. When a Smoke object's
---`Instance/Parent` is set to nil (and/or `Instance/Destroy`ed), all particles
---will instantly disappear. If this effect is not desired, try hiding the parent
---object at a far away position, then removing the Smoke after a few seconds
---using `Debris` to give the last particles a chance to expire. This object does
---not have a `ParticleEmitter/Clear` method, but it is possible to set the
---`Instance/Parent` to nil and back to the exact same object for the same
---effect.
---
---Smoke particles are only emit from the center of `BasePart` to which they are
---parented. Parenting a Smoke object to an `Attachment` instead allows
---customization of the particles' start position.
---
---[1]: /assets/blt3634602492a8e3eb/Smoke.png
---
local Smoke;
---The Color property determines the color of all the particles emit by a
---`Smoke` object (both existing and future particles). It behaves similarly
---to `ParticleEmitter/Color`, except that it is only one color and not a
---`DataType/ColorSequence`. A color of white with some `Smoke/Opacity` makes
---for a nice fog effect, and a very opaque black color can compliment a
---`Fire` object nicely.
---
---![Two Smoke objects with different colors][1]
---
---In the screenshot below, a `Fire` object within a torch model is
---complimented by a `Smoke` object above it with `Smoke/RiseVelocity` set to
---5 and Color set to black.
---![A Smoke object complimenting a Fire object on a torch][2]
---
---[1]: /assets/blt6952d1f0943c1f61/Smoke_Color.png
---[2]: /assets/blt02d5fee090b5bc62/Smoke_Fire.png
---
Smoke.Color = nil;
---The Enabled property, much like `ParticleEmitter/Enabled`, determines
---whether smoke particles are emit. Any particles already emit will continue
---to render until their lifetime expires. This property is useful for
---keeping pre-made smoke effects off until they are needed later. Since
---smoke particles are destroyed when the `Smoke` object's `Instance/Parent`
---is set to nil, this property is useful in allowing existing particles the
---opportunity to expire before destroying the Fire object altogether. See
---the function below.
---
---```
---local Debris = game:GetService("Debris")
---local part = script.Parent
---function stopSmoke(smoke)
---	smoke.Enabled = false -- No more new particles
---	Debris:AddItem(smoke, 10) -- Remove the object after a delay (after existing particles have expired)
---end
---stopSmoke(part.Smoke)
---```
---
Smoke.Enabled = nil;
---Opacity determines the opaqueness of the smoke particles. It must be in
---the range [0, 1]. This property works **inversely** in comparison to a
---part's `BasePart/Transparency` or ParticleEmitter's
---`ParticleEmitter/Transparency`: a value of 0 is completely invisible, 1 is
---completely visible. Below, the left `Smoke` effect has an Opacity of 0.25
---(or, 25%), the center has the default 0.5 (50%), and the right has 1.0 (or
---100%).
---
---![Smoke with varying opacity levels][1]
---
---It should be noted that the texture that Roblox uses for `Smoke` particles
---is partially transparent, so setting this property to 1 will still yield
---transparency in rendered smoke.
---
---[1]: /assets/blt40432eff6f9ab4f2/Smoke_Opacity.png
---
Smoke.Opacity = nil;
---RiseVelocity behaves similarly to `ParticleEmitter/Speed` and `Fire/Heat`:
---it determines how fast the smoke particles move during their lifetime. It
---must be in the range [-25, 25]. Negative values will cause particles to
---emit in the bottom (-Y) direction of the parent `BasePart`.
---
---When using a `Smoke` effect to create fog, set this property to 0. For
---large smoke effects, make the rise subtle (2 to 8). For chimneys and
---smokestacks, higher values are appropriate.
---
Smoke.RiseVelocity = nil;
---The Size property of `Smoke` determines the size of the newly emit smoke
---particles. Unlike `Smoke/Color`, this property will not change the size of
---existing particles. It must be in the range [0.1, 100]. Unlike
---`ParticleEmitter/Size`, this property is only a number (not a
---`DataType/NumberSequence`). Also note also that the size of the particles
---is not 1-to-1 with studs; in fact, the size of the smoke particle is more
---than twice as large. At the largest size, smoke particles can render
---larger than 200 studs wide!
---
Smoke.Size = nil;
---A value between 0-1 than controls the speed of the particle effect. At 1
---it runs at normal speed, at 0.5 it runs at half speed, and at 0 it freezes
---time.
---
Smoke.TimeScale = nil;
---@class Snap : JointInstance, Instance
---An object that holds two objects rigidly together. Most commonly created when
---`BasePart/MakeJoints` is called on parts where Inlet and Stud
---`Enum/SurfaceType` are touching.
---
---Functionally identical to `Weld`.
---
---See also `WeldConstraint` for a newer alternative using the
---[constraints](/building-and-visuals/physics/mechanical-constraints) system
---that does not require `JointInstance/C0|C0` or `JointInstance/C1|C1`
---properties to be manually set.
---
---## Root part
---
---Every Assembly has a root part, see `BasePart/GetRootPart`. When a Snap's
---`JointInstance/C0|C0`/`JointInstance/C1|C1` is modified the root part will
---stay where it was.
---
---## Directionality
---
---Snaps do not have any directionality. `JointInstance/Part0|Part0` or
---`JointInstance/Part1|Part1`, doesn't matter. You can imagine rigid joints
---forming a tree branching down from the root part. All the parts down the tree
---from root will move, and their welded “children” in this tree will move with
---them.
---
local Snap;
---@class SocialService : Instance
---@field public GameInvitePromptClosed RBXScriptSignal.GameInvitePromptClosed
---@field public PromptInviteRequested RBXScriptSignal.PromptInviteRequested
---SocialService facilitates social functions that impact relationships made on
---the Roblox platform. Developers are able to
---`SocialService/PromptGameInvite|prompt` their players to send game invitation
---requests to players' friends and leverage signals when users invite their
---friends to their games
---
---Below is the Invitation Popup players will see:
---
---![Invitation Popup][1]
---
---And the chat message that invited players will see:
---
---![Invite Message][2]
---
---[1]: /assets/blt51ac7d9be72e807e/GameInvitePopup.jpeg
---[2]: /assets/blt785eca775b5936ec/GameInviteMessage.png
---
local SocialService;
---@param player Instance
---@return void
---**PromptGameInvite** will display an invite screen to the given `Player`.
---On this screen, the player may invite their friends to the current game.
---
---Before using this function, you should use the
---`SocialService/CanSendGameInviteAsync|CanSendGameInviteAsync` function to
---determine whether a player can send a game invite, as this can vary
---depending on the platform or player. After determining that invites are
---possible for this player, allow the player to opt-in to inviting others.
---For example, the player clicked on an "Invite Friends" button, shown after
---`CanSendGameInviteAsync` returned true.`
---
SocialService.PromptGameInvite = function(self, player) end;
---@param player Instance
---@return bool
---**CanSendGameInviteAsync** indicates whether the given `Player` can invite
---other players to the current game. If they can, it returns true.
---
---You should always use the result of this function before the
---`SocialService/PromptGameInvite|PromptGameInvite` function, since the
---ability to invite players can vary depending on the platform or player.
---Only after determining that invites are possible for this player, should
---you allow the player to opt-in (eg, a button press) to inviting others
---using the `PromptGameInvite` function.
---
SocialService.CanSendGameInviteAsync = function(self, player) end;
---@param player Instance
---@param recipientIds Array
---@return void
SocialService.InvokeGameInvitePromptClosed = function(self, player, recipientIds) end;
---@class RBXScriptSignal.GameInvitePromptClosed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.GameInvitePromptClosed, callback: fun(player: Instance, recipientIds: Array)): RBXScriptConnection
---This event is a signal invoked when a player has closed the game invite
---prompt and batches all users and conversation participants into a single
---array. This prompt can be prompted by the developer or accessed from the
---SettingsHub menu.
---
---#### How Game Invites Work
---
---- User joins a game and presses a developer-constructed button. Activating
---  the button will invoke
---  `SocialService/PromptGameInvite|PromptGameInvite(localPlayer)`.
---
---<img src="https://developer.roblox.com/assets/blt1db52ca2f16787a5/inviteFlow1.png" />
---
---- This function call will fire a `DataType/RBXScriptSignal|rbx::signal`
---  (called `SocialService/PromptInviteRequested`). The
---  `CoreScript|CoreScripts` are bound to this signal through Reflection and
---  once invoked will show the user a version of the following screen:
---
---<img src="https://developer.roblox.com/assets/blte2b2aeda3da94cb2/inviteFlow2.png" />
---
---- When the user successfully sends an invite, a rbx::signal will fire on
---  the client and server (called SocialService.PromptInviteRequested).
---
---<img src="https://developer.roblox.com/assets/blt5cf97ed8610dbc49/inviteFlow3.png" />
---
---See also:
---
---This is part of the `SocialService` class containing a set of APIs that
---allow you to integrate game invitations into your games.
---
---- `SocialService/PromptGameInvite`, prompts the specified player with the
---  game invite screen
---- `SocialService/CanSendGameInviteAsync`, returns true or false depending
---  on the user
---
---[1]: /assets/blt1db52ca2f16787a5/inviteFlow1.png
---[2]: /assets/blte2b2aeda3da94cb2/inviteFlow2.png
---[3]: /assets/blt5cf97ed8610dbc49/inviteFlow3.png
---
SocialService.GameInvitePromptClosed = nil;
---@class RBXScriptSignal.PromptInviteRequested : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptInviteRequested, callback: fun(player: Instance)): RBXScriptConnection
---
SocialService.PromptInviteRequested = nil;
---@class SolidModelContentProvider : CacheableContentProvider, Instance
---An internal `ContentProvider` for preloading solid models.
---
local SolidModelContentProvider;
---@class Sound : Instance
---@field public ChannelCount int
---@field public EmitterSize float
---@field public IsLoaded bool
---@field public IsPaused bool
---@field public IsPlaying bool
---@field public Looped bool
---@field public MaxDistance float
---@field public MinDistance float
---@field public Pitch float
---@field public PlayOnRemove bool
---@field public PlaybackLoudness double
---@field public PlaybackSpeed float
---@field public Playing bool
---@field public RollOffMaxDistance float
---@field public RollOffMinDistance float
---@field public RollOffMode RollOffMode
---@field public SoundGroup SoundGroup
---@field public SoundId Content
---@field public TimeLength double
---@field public TimePosition double
---@field public UsageContextPermission UsageContext
---@field public Volume float
---@field public isPlaying bool
---@field public DidLoop RBXScriptSignal.DidLoop
---@field public Ended RBXScriptSignal.Ended
---@field public Loaded RBXScriptSignal.Loaded
---@field public Paused RBXScriptSignal.Paused
---@field public Played RBXScriptSignal.Played
---@field public Resumed RBXScriptSignal.Resumed
---@field public Stopped RBXScriptSignal.Stopped
---A `Sound` is an object that emits sound.
---
---## 2D and 3D Sound
---
---A sound placed in a `BasePart` or an `Attachment` will emit its sound from
---that part's `BasePart/Position` or the attachment's
---`Attachment/WorldPosition`. A sound exhibits the Doppler effect, meaning its
---frequency and pitch varies with the relative motion of whatever attachment or
---part it is attached to. The volume of the sound will be determined by the
---distance between the client's sound listener (by default the `Camera`
---position) and the position of the sound's parent. For more information on this
---see `Sound/RollOffMode`.
---
---A sound is considered "global" if it is not parented to a `BasePart` or an
---`Attachment`. In this case, the sound will play at the same volume throughout
---the entire place.
---
---## Sound Replication
---
---Sound playback is not filtered. If a particular client starts playing a sound,
---all of the other clients will also play it unless
---`SoundService/RespectFilteringEnabled` is set to true.
---
---Important:
---
---- While the playback of sounds will replicate, other properties such as the
---  playback speed, pitch, volume, etc. will **not** replicate. This behavior
---  can be avoided by creating all sounds locally on the client, as instancing
---  sounds will not replicate to the server.
---- `Sound/TimePosition`, `Sound/TimeLength`, and `Sound/Playing` all properly
---  replicate when set from the server.
---
local Sound;
---
Sound.ChannelCount = nil;
---The minimum distance, in studs, at which a 3D `Sound` (direct child of a
---`BasePart` or `Attachment`) will begin to attenuate (decrease in volume).
---
---Sounds parented to a `BasePart` or `Attachment` that are descendants of
---the `Workspace` are considered 3D sounds and their volume whilst playing
---is dependent on the distance between the client's sound listener (`Camera`
---position by default) and the Sound's parent. Two properties influence this
---behavior EmitterSize and `Sound/RollOffMode`.
---
---The way the `Sound` attenuates (fades out) after the distance between the
---listener and the sound exceeds the EmitterSize is determined by
---RollOffMode.
---
Sound.EmitterSize = nil;
---This property will be true when the `Sound` has loaded loaded from Roblox
---servers and is ready to play.
---
---In Roblox, audio files are not stored in games themselves but hosted on
---the Roblox servers and referenced by the `Sound/SoundId` property. This
---means that they need to be downloaded to a client's device before they can
---be played. This can take a while depending on the user's internet
---connection, the length of the sound and the number of other objects that
---need to be loaded.
---
---Developers can use the `Sound/IsLoaded` property and the `Sound/Loaded`
---event if they wish to verify a sound has loaded before playing it.
---
Sound.IsLoaded = nil;
---This read-only property will return true when the `Sound` is not playing.
---Note that this property will not only return true once a sound has been
---paused using the `Sound/Pause` function but also if it has been stopped
---using the `Sound/Stop` function or never been played.
---
---This property will only be true when `Sound/IsPlaying` is false.
---
---As IsPaused is read only it can not be used to stop the sound,
---`Sound/Stop` and `Sound/Pause` should be used instead.
---
Sound.IsPaused = nil;
---This read-only property will return true when the `Sound` is playing.
---
---This property can only be true when `Sound/IsPaused` is false.
---
---As IsPlaying is read only it can not be used to play the sound,
---`Sound/Play` should be used instead.
---
Sound.IsPlaying = nil;
---This sets whether or not the `Sound` repeats once it has finished when it
---is playing.
---
---Looped sounds are suitable for a range of applications including music and
---background ambient sounds. The `Sound/DidLoop` event can be used to track
---the number of times as sound has looped.
---
Sound.Looped = nil;
---The maximum distance, in studs, a client's listener can be from the
---`Sound|Sound's` origin and still hear it. Only applies to Sounds parented
---to a `Part` or `Attachment` (3D sounds).
---
---How MaxDistance impacts the attenuation of a sound (manner in which it
---fades out) is dependent on the `Sound/RollOffMode` property. When
---RollOffMode is set to use an inverse type distance model (Inverse or
---InverseTapered) the MaxDistance will not effect the attenuation of the
---sound. This means that low values for MaxDistance will cause the sound to
---abruptly cut off when the listener reaches the MaxDistance. In most cases
---this is not desirable and developers are advised not to use low
---MaxDistance values.
---
---When RollOffMode is set to a linear type distance model (Linear or
---LinearSquared) the sound will attenuate between `Sound/EmitterSize` and
---MaxDistance (with playback volume reaching zero at MaxDistance). This is
---less realistic, but in some cases allows attenuation to be handled in a
---more intuitive way.
---
Sound.MaxDistance = nil;
---The minimum distance at which a 3D `Sound` (direct child of a `BasePart`
---or `Attachment`) will begin to attenuate. Effectively, the emitter size.
---
---Deprecated in favor of Sound.EmitterSize.
---
Sound.MinDistance = nil;
---Sets how high pitched and fast a `Sound` is when it is played. The greater
---the integer, the higher and faster the sound is.
---
---This property has been deprecated in favor of `Sound/PlaybackSpeed` whose
---name suits the behavior better.
---
Sound.Pitch = nil;
---When true, the `Sound` will play when it is removed from the game.
---
---Note the sound will play when the `Instance/Parent` property of the
---`Sound` or one of its ancestors is set to nil. This means all of the
---following will cause the sound to play when PlayOnRemove is true. Note,
---this includes `Instance/Destroy` as the destroy function sets the parent
---to nil.
---
---    sound:Destroy()
---    sound.Parent = nil
---    sound.Parent.Parent = nil
---
Sound.PlayOnRemove = nil;
---A number between 0 and 1000 indicating how loud the `Sound` is currently
---playing back.
---
---This property reflects the amplitude of the `Sound`'s playback in the
---instance of time it is read. Therefore, for most sounds it will fluctuate
---constantly. Due to this it can appear in the Roblox Studio properties
---window as 0, however when read by code in the command bar or `Script`s it
---will return the correct value.
---
Sound.PlaybackLoudness = nil;
---Determines the speed at which a `Sound` will play. The greater the value
---the faster the sound will play back.
---
---For example, a value of 2 will cause the `Sound` to play 2x faster,
---whereas a value of 0.5 will cause it to play 2x slower. When PlaybackSpeed
---is equal to 1, the sound will take `Sound/TimeLength` (in seconds) to
---complete.
---
---Note that increasing the PlaybackSpeed of a sound will cause it to play at
---a higher pitch.
---
Sound.PlaybackSpeed = nil;
---Indicates whether the `Sound` is currently playing. This can be toggled,
---and this property will always replicate.
---
---This property should not be confused with `Sound/IsPlaying` which is a
---read-only property. Playing can be set to true or false to start or stop
---the playback of a sound.
---
---Note that when Playing is set to false, the `Sound/TimePosition` property
---of the sound will not reset. This means when the Playing is set to true
---again the audio will continue from the time position it was at when it was
---stopped. However, if the `Sound/Play` function is used to resume the sound
---the time position will reset to 0.
---
Sound.Playing = nil;
---The maximum distance, in studs, a client's listener can be from the
---`Sound|Sound's` origin and still hear it. Only applies to Sounds parented
---to a `Part` or `Attachment` (3D sounds).
---
---How RollOffMaxDistance impacts the attenuation of a sound (manner in which
---it fades out) is dependent on the `Sound/RollOffMode` property. When
---RollOffMode is set to use an inverse type distance model (Inverse or
---InverseTapered) the RollOffMaxDistance will not effect the attenuation of
---the sound. This means that low values for RollOffMaxDistance will cause
---the sound to abruptly cut off when the listener reaches the
---RollOffMaxDistance. In most cases this is not desirable and developers are
---advised not to use low RollOffMaxDistance values.
---
---When RollOffMode is set to a linear type distance model (Linear or
---LinearSquared) the sound will attenuate between `Sound/EmitterSize` and
---MaxDistance (with playback volume reaching zero at RollOffMaxDistance).
---This is less realistic, but in some cases allows attenuation to be handled
---in a more intuitive way.
---
Sound.RollOffMaxDistance = nil;
---The minimum distance, in studs, at which a 3D `Sound` (direct child of a
---`BasePart` or `Attachment`) will begin to attenuate (decrease in volume).
---
---Sounds parented to a `BasePart` or `Attachment` that are descendants of
---the `Workspace` are considered 3D sounds and their volume whilst playing
---is dependent on the distance between the client's sound listener (`Camera`
---position by default) and the Sound's parent. Three properties influence
---this behavior RollOffMinDistance, `Sound/RollOffMaxDistance`, and
---`Sound/RollOffMode`.
---
---The way the `Sound` attenuates (fades out) after the distance between the
---listener and the sound exceeds the RollOffMinDistance is determined by the
---RollOffMode.
---
Sound.RollOffMinDistance = nil;
---This property sets how 3D `Sound|Sounds` attenuate (fade out) as the
---distance between the listener and the sound's parent increase. It can be
---set to one of the values of the `Enum/RollOffMode` enum.
---
---The following code will set RollOffMode to Linear:
---
---```lua
---sound.RollOffMode = Enum.RollOffMode.Linear
---```
---
---#### The different modes
---
---Thee following options are available:
---
---<table>
---    <thead>
---        <tr>
---            <th>Mode</th>
---            <th>Description</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td>Inverse</td>
---            <td>Volume attenuates from <code>Sound/RollOffMinDistance</code> in an inverse manner</td>
---        </tr>
---        <tr>
---            <td>InverseTapered</td>
---            <td>A hybrid model. Follows the Inverse model when close to RollOffMinDistance and the Linear Square model when close to <code>Sound/RollOffMaxDistance</code></td>
---        </tr>
---        <tr>
---            <td>Linear</td>
---            <td>Volume attenuates between RollOffMinDistance and RollOffMaxDistance with a linear relationship</td>
---        </tr>
---        <tr>
---            <td>LinearSquare</td>
---            <td>Volume attenuates between RollOffMinDistance and RollOffMaxDistance with a linear squared relationship</td>
---        </tr>
---    </tbody>
---</table>
---
---#### Inverse vs Linear Distance Attenuation
---
---By default sounds are set to use inverse distance attenuation
---(Enum.RollOffMode.Inverse) which mirrors how sounds attenuate in the real
---world. Under inverse distance attenuation, sounds will begin to attenuate
---once the distance between the listener and the Sound's parent exceeds
---RollOffMinDistance. The rate of attenuation depends on the emitter size,
---as sounds with larger EmitterSize's will attenuate at a slower rate.
---Inverse rate of inverse distance attenuation is further influenced by
---`SoundService/RolloffScale`.
---
---RollOffMaxDistance will not effect attenuation under the inverse model but
---will cause the sound to cut off completely once this distance is reached.
---This can be particularly abrupt when using low values for max distance.
---
---Linear distance attenuation works differently. Under linear distance
---attenuation the sound will attenuate between RollOffMinDistance and
---RollOffMaxDistance, falling silent once MaxDistance is reached.
---RollOffMinDistance still denotes the point at which the sound will begin
---attenuating. However, the audible volume at any point now depends on the
---point the listener is at between EmitterSize and MaxDistance. This means,
---in contrast to the inverse distance attenuation model, the audible volume
---of the sound will approach silence at MaxDistance point. This is less
---realistic, but may be more desirable in some cases.
---
Sound.RollOffMode = nil;
---The `SoundGroup` that is linked to this `Sound`. `SoundGroup/Volume` and
---`SoundEffect`s applied to this sound group will pass onto the sound. A
---sound can only be in one sound group at a time.
---
---`SoundGroup`s are used to manage the volume and effects of multiple
---`Sound`s at once. A `Sound` is added to a `SoundGroup` by setting the
---SoundGroup property of the sound.
---
Sound.SoundGroup = nil;
---This property is the content ID of the sound file a `Sound` object is
---associated with. Once a sound has been uploaded to Roblox the content ID
---can be found in the uploaded sound's URL.
---
---It's important to remember the URL is not the same as the content ID. It
---will work when pasted directly into the SoundId property of a `Sound` in
---Roblox studio, as Studio will automatically correct it, however if it is
---being set from a `Script` then the correct content ID will need to be
---used, using the number from the URL. For example:
---
---```lua
---"https://www.roblox.com/catalog/9120386436" -- Web URL (will not work)
---"http://www.roblox.com/asset/?id=9120386436" -- Content ID (will work)
---"rbxassetid://9120386436" -- Content ID (alternative version, will work)
---```
---
Sound.SoundId = nil;
---The length of the `Sound` in seconds. If the `Sound` is not loaded, this
---value will be 0.
---
---This property is often used in conjunction with `Sound/PlaybackSpeed` to
---adjust the speed of a sound so it lasts for a specific duration (see
---examples). When `Sound/PlaybackSpeed` is equal to 1, the sound will take
---TimeLength seconds to complete.
---
Sound.TimeLength = nil;
---Shows the progress in seconds of the `Sound`. Can be changed to move the
---playback position of the sound. If the sound is already playing then
---playback will snap to the specified position. If it is not playing the
---`Sound` will begin playback at the set position when the sound is next
---played.
---
---As a `Sound` is played, TimePosition increases at a rate of
---`Sound/PlaybackSpeed` per second. Once TimePosition reaches
---`Sound/TimeLength` the Sound will stop unless it is looped. This means,
---unless `Sound/Looped` is set to true setting TimePosition to a value equal
---or greater to `Sound/TimeLength` will stop the sound.
---
---Note that setting `TimePosition` to a value greater than the length in a
---looped track will not cause it to wrap around. If that behavior is desired
---the developer should do the following.
---
---    if newPosition >= sound.TimeLength then
---    	newPosition = newPosition - sound.TimeLength
---    end
---    sound.TimePosition = newPosition
---
---Setting TimePosition to a value less than zero currently does not
---influence playback, but this behavior should not be relied upon.
---
Sound.TimePosition = nil;
---
Sound.UsageContextPermission = nil;
---The volume of the `Sound`. Can be set between 0 and 10. Defaults to 0.5
---
---Note that if the `Sound` is a member of a `SoundGroup` its playback volume
---(but not the Volume property) will be influenced by the
---`SoundGroup/Volume` property of that `SoundGroup`. The effect of this is
---multiplicative, meaning that a sound will play at the same volume if its
---Volume is 0.1 and its `SoundGroup`'s volume is 5 and vice-versa.
---
Sound.Volume = nil;
---
Sound.isPlaying = nil;
---@return void
---Plays the `Sound`. Sets `Sound/TimePosition` to the last value set by a
---`Script` (or 0 if it has not been set), and then sets `Sound/Playing` to
---true.
---
---The impact of the different `Sound` functions on `Sound/Playing` and
---`Sound/TimePosition` are shown below.
---
---  <table>
---    <thead>
---      <tr>
---        <th>Function</th>
---        <th>Sound.Playing</th>
---        <th>Sound.TimePosition</th>
---      </tr>
---    </thead>
---    <tbody>
---      <tr>
---        <td>Sound:Play()</td>
---        <td>True</td>
---        <td>Last value set in Lua (default 0)</td>
---      </tr>
---      <tr>
---        <td>Sound:Pause()</td>
---        <td>False</td>
---        <td>-</td>
---      </tr>
---      <tr>
---        <td>Sound:Resume()</td>
---        <td>True</td>
---        <td>-</td>
---      </tr>
---      <tr>
---        <td>Sound:Stop()</td>
---        <td>False</td>
---        <td>0</td>
---      </tr>
---    </tbody>
---  </table>
---
Sound.Play = function(self) end;
---@return void
Sound.pause = function(self) end;
---@return void
Sound.play = function(self) end;
---@return void
---Resumes the `Sound`. Sets `Sound/Playing` to true. Does not alter
---`Sound/TimePosition` and thus can be used to resume the playback of a
---sound stopped using `Sound/Pause`.
---
---The impact of the different sound functions on `Sound/Playing` and
---`Sound/TimePosition` are shown below.
---
---  <table>
---    <thead>
---      <tr>
---        <th>Function</th>
---        <th>Sound.Playing</th>
---        <th>Sound.TimePosition</th>
---      </tr>
---    </thead>
---    <tbody>
---      <tr>
---        <td>Sound:Play()</td>
---        <td>True</td>
---        <td>Last value set in Lua (default 0)</td>
---      </tr>
---      <tr>
---        <td>Sound:Pause()</td>
---        <td>False</td>
---        <td>-</td>
---      </tr>
---      <tr>
---        <td>Sound:Resume()</td>
---        <td>True</td>
---        <td>-</td>
---      </tr>
---      <tr>
---        <td>Sound:Stop()</td>
---        <td>False</td>
---        <td>0</td>
---      </tr>
---    </tbody>
---  </table>
---
Sound.Resume = function(self) end;
---@return void
---Sets `Sound/Playing` to false. This pauses the playback of the `Sound` if
---the sound is playing. Unlike `Sound/Stop` it does not reset
---`Sound/TimePosition` meaning the sound can be resumed using
---`Sound/Resume`.
---
---The impact of the different Sound functions on `Sound/Playing` and
---`Sound/TimePosition` are shown below.
---
---  <table>
---    <thead>
---      <tr>
---        <th>Function</th>
---        <th>Sound.Playing</th>
---        <th>Sound.TimePosition</th>
---      </tr>
---    </thead>
---    <tbody>
---      <tr>
---        <td>Sound:Play()</td>
---        <td>True</td>
---        <td>Last value set in Lua (default 0)</td>
---      </tr>
---      <tr>
---        <td>Sound:Pause()</td>
---        <td>False</td>
---        <td>-</td>
---      </tr>
---      <tr>
---        <td>Sound:Resume()</td>
---        <td>True</td>
---        <td>-</td>
---      </tr>
---      <tr>
---        <td>Sound:Stop()</td>
---        <td>False</td>
---        <td>0</td>
---      </tr>
---    </tbody>
---  </table>
---
Sound.Pause = function(self) end;
---@return void
Sound.stop = function(self) end;
---@return void
---Stops the `Sound`. Sets `Sound/Playing` to false then sets
---`Sound/TimePosition` to 0.
---
---The impact of the different sound functions on `Sound/Playing` and
---`Sound/TimePosition` are shown below.
---
---  <table>
---    <thead>
---      <tr>
---        <th>Function</th>
---        <th>Sound.Playing</th>
---        <th>Sound.TimePosition</th>
---      </tr>
---    </thead>
---    <tbody>
---      <tr>
---        <td>Sound:Play()</td>
---        <td>True</td>
---        <td>Last value set in Lua (default 0)</td>
---      </tr>
---      <tr>
---        <td>Sound:Pause()</td>
---        <td>False</td>
---        <td>-</td>
---      </tr>
---      <tr>
---        <td>Sound:Resume()</td>
---        <td>True</td>
---        <td>-</td>
---      </tr>
---      <tr>
---        <td>Sound:Stop()</td>
---        <td>False</td>
---        <td>0</td>
---      </tr>
---    </tbody>
---  </table>
---
Sound.Stop = function(self) end;
---@class RBXScriptSignal.DidLoop : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.DidLoop, callback: fun(soundId: string, numOfTimesLooped: int)): RBXScriptConnection
---Event that fires whenever the `Sound` loops. Returns soundId and
---numOfTimesLooped, giving the contentID of the sound and the number of
---times looped respectively.
---
---When the `Sound` is stopped the looped counter resets meaning the next
---DidLoop event will return 1 for numOfTimesLooped.
---
Sound.DidLoop = nil;
---@class RBXScriptSignal.Ended : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Ended, callback: fun(soundId: string)): RBXScriptConnection
---Fires when the `Sound` has completed playback and stopped. Note this event
---will not fire for sounds with `Sound/Looped` set to true as they continue
---playing upon reaching their end.
---
---This event is often used to destroy a sound when it has completed
---playback.
---
---```
---sound:Play()
---sound.Ended:Wait()
---sound:Destroy()
---```
---
---This event only fires if the sound has reached its end. This means it will
---also not fire when the sound is stopped before playback has completed, for
---this use `Sound/Stopped`.
---
Sound.Ended = nil;
---@class RBXScriptSignal.Loaded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Loaded, callback: fun(soundId: string)): RBXScriptConnection
---The Sound.Loaded event fires when the `Sound` is loaded.
---
---Note this event will only fire at the time the sound is loaded. This means
---if it is listened for when the sound is already loaded it will not return.
---Therefore it is recommended to check `Sound/IsLoaded` prior to connecting
---to this event.
---
Sound.Loaded = nil;
---@class RBXScriptSignal.Paused : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Paused, callback: fun(soundId: string)): RBXScriptConnection
---Fires whenever the `Sound` is paused using `Sound/Pause`.
---
---As with `Sound/Played`, `Sound/Resumed` and `Sound/Stopped` only the
---respective sound function will cause the event to fire. This means that
---Pause will only fire when `Sound/Pause` is called.
---
Sound.Paused = nil;
---@class RBXScriptSignal.Played : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Played, callback: fun(soundId: string)): RBXScriptConnection
---Fires whenever the `Sound` is played using the `Sound/Play` function.
---
---As with `Sound/Stopped`, `Sound/Paused` and `Sound/Resumed` only the
---respective sound function will cause the event to fire. This means that
---Played will only fire when `Sound/Play` is called. This event will not
---fire if the `Sound` is played due to the sound being destroyed and
---`Sound/PlayOnRemove` being set to true.
---
Sound.Played = nil;
---@class RBXScriptSignal.Resumed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Resumed, callback: fun(soundId: string)): RBXScriptConnection
---Fires when the `Sound` is resumed using `Sound/Resume`.
---
---As with `Sound/Played`, `Sound/Paused` and `Sound/Stopped` only the
---respective sound function will cause the event to fire. This means that
---Resumed will only fire when `Sound/Resume` is called.
---
Sound.Resumed = nil;
---@class RBXScriptSignal.Stopped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Stopped, callback: fun(soundId: string)): RBXScriptConnection
---Fires when the `Sound` is stopped due to the `Sound/Stop` function.
---
---As with `Sound/Played`, `Sound/Paused` and `Sound/Resumed` only the
---respective sound function will cause the event to fire. This means that
---Stopped will only fire when `Sound/Stop` is called. Destroying a sound
---whilst it is playing will not cause this event to fire.
---
Sound.Stopped = nil;
---@class SoundEffect : Instance
---@field public Enabled bool
---@field public Priority int
---SoundEffect is the base class that all other sound effects derive from. A
---SoundEffect can be applied to either a `Sound` or `SoundGroup` by being
---parented to either. Multiple effects can be applied to the same Sound or
---SoundGroup. The order the effects will be applied in is determined by that
---effect's Priority.
---
local SoundEffect;
---Toggles the effect on and off. True by default.
---
SoundEffect.Enabled = nil;
---Determines the order the effect will be applied in relation to other
---effects. Highger priority effects will be applied earlier. The exception
---is when Priority equals 0 (which is the default). In this case, the base
---priority for the effect will be used. If the priority of two effects are
---equal, then the order is undetermined.
---
SoundEffect.Priority = nil;
---@class SoundGroup : Instance
---@field public Volume float
---A `SoundGroup` is used to manage the volume and effects on multiple `Sound`s
---at once. Every sound in the sound group will have its volume adjusted by the
---group's `SoundGroup/Volume` property. If the SoundGroup has any `SoundEffect`s
---as children, those effects will be applied to all of the `Sound`s in the
---group.
---
---The `SoundGroup/Volume` property acts as a multiplier, and thus sounds in a
---SoundGroup will retain their relative volumes when it is set. This means if a
---sound's volume is 0.5 and it is assigned to a SoundGroup with a volume of 0.5,
---its effective volume will be 0.25.
---
---Grouping sounds of the same category has several uses for developers. One
---common usage of a sound group is to assign all of the music that can play in
---game to a SoundGroup called "music." Players could then easily toggle all
---music on or off.
---
---## Setting sound groups
---
---A `Sound` is added to a `SoundGroup` by setting the `Sound/SoundGroup`
---property of the `Sound`. A `Sound` can only be in one `SoundGroup` at a time.
---Whilst they can be parented elsewhere, it is recommended to keep SoundGroups
---parented to the `SoundService`. In the below example, a sound is parented to a
---SoundGroup called 'Music'.
---
---    Sound.SoundGroup = game:GetService("SoundService"):FindFirstChild("Music")
---
local SoundGroup;
---The volume multiplier applied to `Sound`s that are in the `SoundGroup`.
---This value ranges from 0 to 10.
---
---This property acts as a multiplier, and thus sounds in a `SoundGroup` will
---retain their relative volumes when it is set. This means if a sound's
---`Sound/Volume` is 0.5 and it is assigned to a `SoundGroup` with a volume
---of 0.5, its effective volume will be 0.25.
---
SoundGroup.Volume = nil;
---@class SoundService : Instance
---@field public AmbientReverb ReverbType
---@field public DistanceFactor float
---@field public DopplerScale float
---@field public RespectFilteringEnabled bool
---@field public RolloffScale float
---@field public DeviceListChanged RBXScriptSignal.DeviceListChanged
---A service that determines various aspects of how `Sound`s play in the game.
---SoundService is also often used to store `SoundGroup`s although this is not
---mandatory for `SoundGroup`s to work.
---
---## What can SoundService do?
---
---SoundService properties such as `SoundService/AmbientReverb`,
---`SoundService/DistanceFactor`, `SoundService/DopplerScale` and
---`SoundService/RolloffScale` can be used to change how all `Sound`s play in the
---game.
---
---The `SoundService/SetListener` function allows developers to set the position
---where sounds are heard from.
---
---`SoundService/PlayLocalSound` can be used to play a sound locally regardless
---of where it is parented to.
---
---Developers looking to find out more about how sound works in Roblox should
---consult the documentation provided for the [FMOD sound engine][1].
---
---[1]: https://www.fmod.com/docs/api/content/generated/overview/3dsound.html
---
local SoundService;
---The ambient sound environment preset used by `SoundService`.
---
---The `Enum/ReverbType` this property simulates a range of different
---environment's impact on sound. Each different option corresponds with a
---preset available in the FMOD sound engine. For example, when AmbientReverb
---is set to Hangar, the sound will reverberate differently to simulate being
---in a large enclosed space.
---
---Changing the AmbientReverb effects the following properties used by
---Roblox's sound engine.
---
---- Reverberation decay time
---- Initial reflection delay time
---- Late reverberation delay time relative to initial reflection
---- Reference high frequency
---- High-frequency to mid-frequency decay time ratio
---- Value that controls the echo density in the late reverberation decay
---- Value that controls the modal density in the late reverberation decay
---- Reference low frequency
---- Relative room effect level at low frequencies
---- Relative room effect level at high frequencies
---- Early reflections level relative to room effect
---- Room effect level at mid frequencies
---
---Those interested in finding more out about ambient reverb presets should
---see the [FMOD documentation on the topic][1]. For most developers however,
---the `Enum/ReverbType` names are descriptive enough to be able to use this
---setting without advanced knowledge.
---
---[1]:
---  https://www.fmod.com/docs/api/content/generated/FMOD_REVERB_PRESETS.html
---
SoundService.AmbientReverb = nil;
---The number of studs to be considered a meter by `SoundService` when
---calculating 3D `Sound` volume attenuation.
---
---By default, the DistanceFactor is 3.33. This means, for the purposes of
---volume attenuation, a meter is considered 3.33 studs. The greater the
---DistanceFactor, the more gradually sound will attenuate.
---
---```
---local SoundService = game:GetService("SoundService")
---SoundService.DistanceFactor = 1 -- 1 meter = 1 stud
---SoundService.DistanceFactor = 10 -- 1 meter = 10 studs
---```
---
---Developers are advised to only change this property if their game uses a
---different scale. For example, when using larger custom characters,
---developers may want to reduce the DistanceFactor. In all other cases,
---`Sound` settings such as `Sound/RollOffMode` should be used instead.
---
---Those looking to find out more about how 3D sound in Roblox works, should
---consult the [FMOD documentation][1].
---
---[1]: https://www.fmod.com/docs/api/content/generated/overview/3dsound.html
---
SoundService.DistanceFactor = nil;
---This property determines the degree to with a 3D `Sound`s pitch varies due
---to the Doppler effect.
---
---The Doppler effect describes a phenomenon whereby the pitch of a sound
---changes as the source and observer of the sound move further away, or
---closer together. The Doppler effect can often be seen in real life, such
---as when a car with a siren drives past.
---
---Increasing this value exaggerates the impact of the Doppler effect,
---whereas decreasing it minimizes it. By default, the value of this property
---is 1.
---
---```
---local SoundService = game:GetService("SoundService")
---SoundService.DopplerScale = 1 -- default
---SoundService.DopplerScale = 2 -- exaggerated Doppler effect
---SoundService.DopplerEffect = 0.5 -- subdued Doppler effect
---```
---
---Note the Doppler effect has no impact on 2D `Sound`s, (`Sound`s not
---parented to a `BasePart` or `Attachment`).
---
---Developers wishing to learn more about the different settings Roblox's
---sound engine uses should consult the [FMOD documentation][1].
---
---[1]: https://www.fmod.com/docs/api/content/generated/overview/3dsound.html
---
SoundService.DopplerScale = nil;
---The **RespectFilteringEnabled** property determines whether `Sound`
---playback is replicated from the client to the server, and therefore from
---server . In other words, when a `LocalScript` calls `Sound/Play` and this
---property is **true**, the sound will only play on the respective client.
---If the property is false, other clients will also hear the sound.
---
SoundService.RespectFilteringEnabled = nil;
---Sets how fast 3D `Sound` volume attenuates, or 'rolls off'.
---
---Note, this property only applies to `Sound`s whose `Sound/RollOffMode`
---property is set to 'Inverse' or 'InverseTapered'. 'Linear' and
---'LinearSquare' `Enum/RollOffMode`s use a different attenuation model which
---is not influenced by this property. This property also has no impact on 2D
---sounds (`Sound`s not parented to a `BasePart` or `Attachment`).
---
---The higher the RolloffScale, the more rapidly a 3D sound's volume will
---attenuate as the distance between the listener and the sound increases.
---
---By default the roll off scale is set to 1, which simulates the real world.
---
---```
---local SoundService = game:GetService("SoundService")
---SoundService.RolloffScale = 1 -- attenuation simulates real world
---SoundService.RolloffScale = 2 -- sound attenuates twice as fast as the real world
---```
---
---Developers wishing to learn more about the different settings Roblox's
---sound engine uses should consult the [FMOD documentation][1].
---
---[1]: https://www.fmod.com/docs/api/content/generated/overview/3dsound.html
---
SoundService.RolloffScale = nil;
---@param deviceIndex int
---@return bool
SoundService.SetRecordingDevice = function(self, deviceIndex) end;
---@return Dictionary
SoundService.GetSoundMemoryData = function(self) end;
---@return bool
SoundService.BeginRecording = function(self) end;
---@param sound Instance
---@return void
---Plays a `Sound` locally, meaning the sound will only be heard by the
---client calling this function, regardless of where it's parented to. This
---function is most useful for playing a `Sound` locally in the Studio
---client, for instance in a `Script` for a `Plugin`.
---
SoundService.PlayLocalSound = function(self, sound) end;
---@param name string
---@param guid string
---@return void
SoundService.SetOutputDevice = function(self, name, guid) end;
---@return Tuple
---This function returns `SoundService|SoundService's` current listener type
---and what is set as listener.
---
---The first result returned is the `Enum/ListenerType` of the listener, the
---second result is dependent on the ListenerType:
---
---<table>
---    <thead>
---        <tr>
---            <th>ListenerType</th>
---            <th>Description</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td>Enum.ListenerType.Camera</td>
---            <td>Does not return a listener object as <code>Workspace/CurrentCamera</code> is always used</td>
---        </tr>
---        <tr>
---            <td>Enum.ListenerType.CFrame</td>
---            <td>Returns the <code>DataType/CFrame</code> used in <code>SoundService/SetListener</code></td>
---        </tr>
---        <tr>
---            <td>Enum.ListenerType.ObjectPosition</td>
---            <td>Returns the <code>BasePart</code> used in <code>SoundService/SetListener</code></td>
---        </tr>
---        <tr>
---            <td>Enum.ListenerType.ObjectCFrame</td>
---            <td>Returns the BasePart used in SetListener()</td>
---        </tr>
---    </tbody>
---</table>
---
---The listener can be changed using `SoundService/SetListener`.
---
---```lua
---local SoundService = game:GetService("SoundService")
---SoundService:SetListener(Enum.ListenerType.CFrame, CFrame.new(0, 0, 0))
---local listenerType, listener = SoundService:GetListener()
---print(listenerType, listener)
---```
---
---#### What is a listener?
---
---The listener determines the point from which audio in the game is being
---'heard' by the player. For 3D `Sound|Sounds` (Sounds parented to a
---BasePart or `Attachment`) the listener influences the volume and
---left/right balance of a playing sound. Listeners have no influence on the
---playback of 2D sounds as they have no position of emission.
---
---By default, the listener is set to the CurrentCamera. However, a range of
---different types of listeners can be used.
---
SoundService.GetListener = function(self) end;
---@return Dictionary
SoundService.GetRecordingDevices = function(self) end;
---@return Tuple
SoundService.GetOutputDevice = function(self) end;
---@return Dictionary
SoundService.EndRecording = function(self) end;
---@param listenerType ListenerType
---@param listener Tuple
---@return void
---Sets the listener used by the client.
---
---The first parameter is the `Enum/ListenerType` of the listener, the second
---paramater is dependent on the listener type.
---
---- Camera ListenerType - Does not return a listener object as
---  `Workspace/CurrentCamera` is always used
---- CFrame ListenerType - The `DataType/CFrame` to be used
---- ObjectPosition ListenerType - The `BasePart` to be used
---- ObjectCFrame ListenerType - The BasePart to be used
---
---The listener can be retrieved using `SoundService/GetListener`:
---
---```lua
---local SoundService = game:GetService("SoundService")
---SoundService:SetListener(Enum.ListenerType.CFrame, CFrame.new(0, 0, 0))
---local listenerType, listener = SoundService:GetListener()
---print(listenerType, listener)
---```
---
---#### What is a listener?
---
---The `SoundService`'s listener determines the point from which audio in the
---game is being 'heard' by the player. For 3D `Sounds` (sounds parented to a
---BasePart or `Attachment`) the listener influences the volume and
---left/right balance of a playing sound. Listeners have no influence on the
---playback of 2D sounds as they have no position of emission.
---
---By default, the listener is set to the CurrentCamera. However, a range of
---different types of listeners can be used.
---
SoundService.SetListener = function(self, listenerType, listener) end;
---@return Tuple
SoundService.GetOutputDevices = function(self) end;
---@class RBXScriptSignal.DeviceListChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.DeviceListChanged, callback: fun(newDevices: Tuple)): RBXScriptConnection
---
SoundService.DeviceListChanged = nil;
---@class Sparkles : Instance
---@field public Color Color3
---@field public Enabled bool
---@field public SparkleColor Color3
---@field public TimeScale float
---Sparkles is one of several particle-emitting classes. Like other particle
---emitters of its kind, Sparkles objects emit particles when parented to a
---`BasePart` (such as a `Part`) or an `Attachment` within such a `BasePart`.
---Compared to the `ParticleEmitter` class, Sparkles lacks many different
---customization properties and special methods, such as
---`ParticleEmitter/Lifetime` or `ParticleEmitter/Emit`. It is useful to create a
---quick special effect in a pinch; for more detailed work it is preferable to
---use a `ParticleEmitter` instead.
---
---![Sparkles emitting from a part][1]
---
---When `Sparkles/Enabled` is toggled off, particles emit by this object will
---continue to render until their lifetime expires. When a Sparkles object's
---`Instance/Parent` is set to nil (and/or `Instance/Destroy`ed), all particles
---will instantly disappear. If this effect is not desired, try hiding the parent
---object at a far away position, then removing the Sparkles after a few seconds
---using `Debris` to give the last particles a chance to expire. This object does
---not have a `ParticleEmitter/Clear` method, but it is possible to set the
---`Instance/Parent` to nil and back to the exact same object for the same
---effect.
---
---Sparkles particles are only emit from the center of `BasePart` to which they
---are parented. Parenting a Sparkles object to an `Attachment` instead allows
---customization of the particles' start position.
---
---[1]: /assets/bltb4fd95f7dbbb308a/Sparkles.png
---
local Sparkles;
---The Color property determines the color of all the particles emit by a
---`Sparkles` object (both existing and future particles). It behaves
---similarly to `ParticleEmitter/Color`, except that it is only one color and
---not a `DataType/ColorSequence`. Sparkles have a natural color sequence
---applied which is most apparent when this property is set to white;
---sparkles very faintly animate between a subtle green and red. Below, you
---can see two `Sparkles` objects with differing SparkleColor (the left is
---default, the right is white).
---
---![Two Sparkles objects with differing SparkleColor][1]
---
---It should be noted that sparkles have a partial
---`ParticleEmitter/LightEmission` effect, so dark colors tend to render more
---transparent and white colors look very bright.
---
---[1]: /assets/blt22f35a953a5b6687/Sparkles_SparkleColor.png
---
---This property functions identically to `Sparkles/SparkleColor`.
---
Sparkles.Color = nil;
---The Enabled property, much like `ParticleEmitter/Enabled`, determines
---whether sparkle particles are emit. Any particles already emit will
---continue to render until their lifetime expires. This property is useful
---for keeping pre-made sparkle effects off until they are needed later.
---Since sparkle particles are destroyed when the `Sparkle` object's
---`Instance/Parent` is set to nil, this property is useful in allowing
---existing particles the opportunity to expire before destroying the Fire
---object altogether. See the function below.
---
---```
---local Debris = game:GetService("Debris")
---local part = script.Parent
---function stopSparkling(sparkles)
---	sparkles.Enabled = false -- No more new particles
---	Debris:AddItem(sparkles, 4) -- Remove the object after a delay (after existing particles have expired)
---end
---stopSparkling(part.Sparkles)
---```
---
Sparkles.Enabled = nil;
---This property functions identically to `Sparkles/Color`.
---
---The SparkleColor property determines the color of all the particles emit
---by a `Sparkles` object (both existing and future particles). It behaves
---similarly to `ParticleEmitter/Color`, except that it is only one color and
---not a `DataType/ColorSequence`. Sparkles have a natural color sequence
---applied which is most apparent when this property is set to white;
---sparkles very faintly animate between a subtle green and red.
---
---It should be noted that sparkles have a partial
---`ParticleEmitter/LightEmission` effect, so dark colors tend to render more
---transparent and white colors look very bright.
---
Sparkles.SparkleColor = nil;
---
Sparkles.TimeScale = nil;
---@class SpawnLocation : Part, FormFactorPart, BasePart, PVInstance, Instance
---@field public AllowTeamChangeOnTouch bool
---@field public Duration int
---@field public Enabled bool
---@field public Neutral bool
---@field public TeamColor BrickColor
---SpawnLocations, or "spawns" determine where a `Player` respawns when they die.
---They can be configured to allow only certain players to use each spawn, using
---`Team|Teams`. They also control how `ForceField|ForceFields` are set up for
---newly-spawned players.
---
---SpawnLocations can be used as checkpoints, such as in an obstacle course,
---using the `SpawnLocation/AllowTeamChangeOnTouch` property, so that when a
---player touches it, they will change teams to the SpawnLocation's team. In this
---case, only the first `Team` should have `Team/AutoAssignable` set to true,
---else players will not start at the first checkpoint.
---
---Note if a SpawnLocation is added to the `Workspace` in Studio with
---`SpawnLocation/Neutral` set to false a Team will be created corresponding to
---`SpawnLocation/TeamColor` if it does not already exist. This behavior does not
---occur when spawns are created in-game using a `Script` or if the properties of
---the SpawnLocation are changed after already being added. It is recommended
---that developers always set up their teams manually and not rely on this
---behavior.
---
---## Spawning Rules
---
---There are several rules that come into play for a given SpawnLocation when a
---player respawns:
---
---- When `SpawnLocation/Neutral` is set to false only `Player|Players` with
---  `Player/TeamColor` matching `SpawnLocation/TeamColor` will respawn above it
---- When `SpawnLocation/Neutral` is set to true any Player can spawn above it
---  regardless of `SpawnLocation/TeamColor`
---- If multiple eligible spawns are available to a `Player`, a random one will
---  be chosen
---- Players will spawn at different points on top of a SpawnLocation, but
---  currently, they may still spawn on top of each other if they spawn right
---  after one and other
---
---See also:
---
---- If you'd like to configure how long it takes for a player to respawn, take a
---  look at the `Players/RespawnTime|RespawnTime` property
---
local SpawnLocation;
---Allows a `Player` to join the team by touching the `SpawnLocation`. When
---set to true, if a `Player` character comes into contact with the
---`SpawnLocation`, the player's `Player/TeamColor` will be set to
---`SpawnLocation/TeamColor`. `Player/Neutral` will also be set to
---`SpawnLocation/Neutral` upon contact, meaning a player can also become
---neutral by touching a spawn location.
---
---This will not function when `SpawnLocation/Enabled` is set to false.
---
---#### Making Checkpoints
---
---This feature is often used to make checkpoints in obstacle courses or
---similar games.
---
SpawnLocation.AllowTeamChangeOnTouch = nil;
---The length of time, in seconds, that a `ForceField` will be applied to a
---`Player` character spawning at this `SpawnLocation`. If Duration is zero,
---the `ForceField` is never created, and it will not trigger the
---`Instance/DescendantAdded` or `Instance/ChildAdded` events.
---
---This default value of this property is 10 seconds.
---
---The duration feature allows developers to easily give `Player`s protection
---from 'spawn killing' which can be a frustrating experience for players.
---Note, `ForceField`s will only protect users from `Explosion`s and Weapons
---that use `Humanoid/TakeDamage` to deal damage or otherwise check for a
---`ForceField`.
---
SpawnLocation.Duration = nil;
---Sets whether or not the `SpawnLocation` is enabled. When disabled players
---cannot spawn at the `SpawnLocation` and the
---`SpawnLocation/AllowTeamChangeOnTouch` functionality is disabled.
---
---This property provides the most convenient way of preventing `Player`s
---from spawning at a spawn.
---
---Note, although team changing on touch using
---`SpawnLocation/AllowTeamChangeOnTouch` is disabled when Enabled is set to
---false, other touched events using `BasePart.Touched` will still fire.
---
SpawnLocation.Enabled = nil;
---Whether or not a spawn is affiliated with a specific team. This means that
---any `Player`, of any `Team`, can spawn on it if this property is set to
---true.
---
---If Neutral is set to false, only players whose `Player/TeamColor` is equal
---to `SpawnLocation/TeamColor` can use the `SpawnLocation`.
---
---If `SpawnLocation/AllowTeamChangeOnTouch` is true `Player/Neutral` will be
---set to this property upon contact with the spawn.
---
SpawnLocation.Neutral = nil;
---The TeamColor property sets what team the `SpawnLocation` is affiliated
---to. If `SpawnLocation/Neutral` property is false, only `Player`s with the
---same `Player/TeamColor` as the spawn's TeamColor will be able to spawn
---there.
---
---If `SpawnLocation/AllowTeamChangeOnTouch` is true `Player/Neutral` will be
---set to this property upon contact with the spawn.
---
SpawnLocation.TeamColor = nil;
---@class SpawnerService : Instance
---An internal service that is responsible for the behavior or `SpawnLocation`s.
---Its functionality is not accessible to developers.
---
local SpawnerService;
---@class Speaker : Instance
---@field public ChannelCount int
---@field public PlaybackLoudness double
---@field public RollOffMaxDistance float
---@field public RollOffMinDistance float
---@field public RollOffMode RollOffMode
---@field public SoundGroup SoundGroup
---@field public Source Instance
---@field public Volume float
local Speaker;
---
Speaker.ChannelCount = nil;
---
Speaker.PlaybackLoudness = nil;
---
Speaker.RollOffMaxDistance = nil;
---
Speaker.RollOffMinDistance = nil;
---
Speaker.RollOffMode = nil;
---
Speaker.SoundGroup = nil;
---
Speaker.Source = nil;
---
Speaker.Volume = nil;
---@class SpecialMesh : FileMesh, DataModelMesh, Instance
---@field public MeshType MeshType
---The SpecialMesh is an object that allows developers to provide a standard
---template or user uploaded mesh to a `BasePart`.
---
---## What does a SpecialMesh do?
---
---The SpecialMesh object applies a mesh to a `BasePart` depending on the the
---`SpecialMesh/MeshType` property. A number of options are available.
---
---- **Brick** - A block shape, equivalent to a `BlockMesh`
---- **Cylinder** - A cylinder, identical to a `Part` with a `Part/Shape` of
---  'Cylinder'
---- **FileMesh** - A user uploaded Mesh, equivalent to `FileMesh` that a texture
---  can be applied to using the `FileMesh/TextureId` property
---- **Head** - A character head shape
---- **Sphere** - A sphere shape, similar to a `Part` with a `Part/Shape` of
---  'Ball' but can be freely resized on all axis
---- **Wedge** - A wedge shape, identical to a `WedgePart`
---- **Torso** - A block with sloped sides, due to be deprecated
---
---Note, each `SpecialMesh/MeshType` will scale differently when using
---`DataModelMesh/Scale`, for more information on this please see the page on
---`DataModelMesh/Scale`. The SpecialMesh object also exposes the
---`DataModelMesh/Offset` property.
---
---It is important to remember that when using a SpecialMesh, only the appearance
---of a part changes. The collision model of the part remains the same. For
---example, a character will not be able to walk correctly over a mesh as the
---mesh geometry is not taken into account.
---
---## SpecialMesh or MeshPart?
---
---There are currently two ways of using a developer created mesh. They are using
---a SpecialMesh with the `SpecialMesh/FileType` set to 'FileMesh', or by using a
---`MeshPart`. Although, on the whole, the `MeshPart` object has superseded the
---SpecialMesh there are some differences developers should be aware of.
---
---- `BasePart/Material` displays correctly on the mesh when using a `MeshPart`
---  and not when using a SpecialMesh
---- `MeshPart`s include the `MeshPart/CollisionFidelity` property, meaning the
---  collision model of a `MeshPart` can be set to resemble the geometry of the
---  mesh. The SpecialMesh object by contrast, uses the parent `BasePart`s
---  collision model
---- The mesh of a `MeshPart` scales on all axis depending on the
---  `BasePart/Size|Size` property of the `MeshPart`, the mesh of a SpecialMesh
---  does not
---- The SpecialMesh object includes the `DataModelMesh/Offset|Offset` and
---  `DataModelMesh/Scale|Scale` properties whereas `MeshPart`s do not
---- The `FileMesh/MeshId|MeshId` property of a `SpecialMesh` can be changed by a
---  `Script` or `LocalScript` during runtime. The `MeshPart/MeshId|MeshId`
---  property of a `MeshPart` can not.
---
---In most, but not all cases, using a `MeshPart` is more suitable. As
---`MeshPart`s are a relatively new feature however, developers should expect
---some of the above behaviour to change.
---
---## Uploading a custom mesh
---
---Although a developer uploaded mesh can be used on a `SpecialMesh`, meshes can
---currently only be be uploaded using `MeshPart`s or the game explorer. For more
---information, see [Meshes](/building-and-visuals/modeling/meshes).
---
local SpecialMesh;
---The mesh that the `SpecialMesh`object applies to the `BasePart` depends on
---the MeshType property. A number of options are available.
---
---- **Brick** - A block shape, equivalent to a `BlockMesh`
---- **Cylinder** - A cylinder, identical to a `Part` with a `Part/Shape` of
---  'Cylinder'
---- **FileMesh** - A user uploaded Mesh, equivalent to `FileMesh` that a
---  texture can be applied to using the `FileMesh/TextureId` property
---- **Head** - A character head shape
---- **Sphere** - A sphere shape, similar to a `Part` with a `Part/Shape` of
---  'Ball' but can be freely resized on all axis
---- **Wedge** - A wedge shape, identical to a `WedgePart`
---- **Torso** - A block with sloped sides, due to be deprecated
---
---Note, each MeshType will scale differently when using
---`DataModelMesh/Scale`, for more information on this please see the page on
---`DataModelMesh/Scale`.
---
SpecialMesh.MeshType = nil;
---@class SphereHandleAdornment : HandleAdornment, PVAdornment, GuiBase3d, GuiBase, Instance
---@field public Radius float
---For handles to be interactive, they must be parented to a player's PlayerGui
---or the CoreGui. The **SphereHandleAdornment** is a sphere that can be adorned
---to a `BasePart`. This adornment can listen to input events and is commonly
---used to make dragger tools.
---
local SphereHandleAdornment;
---The radius of the sphere adornment.
---
SphereHandleAdornment.Radius = nil;
---@class SpotLight : Light, Instance
---@field public Angle float
---@field public Face NormalId
---@field public Range float
---A spotlight emits light of a specified `Light/Color|Color` and
---`Light/Brightness|Brightness` in the shape of a cone with a spherical base.
---This object is ideal for **directional** light sources like flashlights and
---headlights.
---
---`SpotLight/Range|Range` controls the distance of illumination and
---`SpotLight/Angle|Angle` defines the angle of light emission from the cone's
---apex as illustrated below.
---
---A spotlight must be a direct child of a `BasePart` or `Attachment` and will
---exhibit the following behavior:
---
---- When the spotlight is parented to a `BasePart`, the `SpotLight/Face`
---  property determines the face of the part from which light emanates.
---- Although `Attachment|Attachments` don't have faces, the `SpotLight/Face`
---  property determines the axis of the attachment from which light emanates;
---  **-Z** is front, **+X** is right, **+Y** is top, etc.
---
---<img src="/assets/blt13afe21744db416b/LightingDiagram-SpotLight.jpg" />
---
---See also:
---
---- `SurfaceLight`
---- `PointLight`
---
local SpotLight;
---The angle of which the light is shone from the SpotLight.
---
SpotLight.Angle = nil;
---Sets the side of the parent that the SpotLight comes from.
---
SpotLight.Face = nil;
---The size of the area that the SpotLight will illuminate.
---
SpotLight.Range = nil;
---@class SpringConstraint : Constraint, Instance
---@field public Coils float
---@field public CurrentLength float
---@field public Damping float
---@field public FreeLength float
---@field public LimitsEnabled bool
---@field public MaxForce float
---@field public MaxLength float
---@field public MinLength float
---@field public Radius float
---@field public Stiffness float
---@field public Thickness float
---A **SpringConstraint** applies a force to its `Attachment|Attachments` based
---on spring and damper behavior. Assuming the constraint has
---`SpringConstraint/Stiffness`, it will apply forces based on how far apart the
---attachments are. If the attachments are further apart than the constraint's
---`SpringConstraint/FreeLength`, the attachments will be forced together. If
---they are closer than the `SpringConstraint/FreeLength`, the attachments will
---be forced apart. In addition, if `SpringConstraint/Damping` is set, there will
---be a damping component to the applied force that scales with the velocity of
---the attachments.
---
---This constraint, along with a `CylindricalConstraint`, is ideal for building
---vehicle suspension.
---
---Note that if this constraint attaches one part (**A**) to another part (**B**)
---that is anchored or connected to an anchored part (**Z**), part **A** will not
---be locally simulated when interacting with a player.
---
---## Calculating SpringConstraint Force
---
---The following helper function exhibits how the force of a `SpringConstraint`
---is calculated based on various properties of the constraint and its
---attachments.
---
---```lua
---local function getSpringForce(spring)
---	if not spring:IsA("SpringConstraint") then
---		warn(spring .. " is not a spring constraint!")
---		return
---	end
---
---	local currentLength = spring.CurrentLength
---	local freeLength = spring.FreeLength
---	if (spring.LimitsEnabled) then
---		currentLength = math.clamp(currentLength, spring.MinLength, spring.MaxLength)
---		freeLength = math.clamp(freeLength, spring.MinLength, spring.MaxLength)
---	end
---	local springLength = currentLength - freeLength
---
---	local axis = spring.Attachment0.WorldPosition - spring.Attachment1.WorldPosition
---	if axis.Magnitude > 0 then
---		axis = axis.Unit
---	end
---	local effectiveVelocity = spring.Attachment0.Parent.Velocity - spring.Attachment1.Parent.Velocity
---
---	-- https://en.wikipedia.org/wiki/Harmonic_oscillator
---	-- f = -k * x - c * dx/dt + fext
---	-- Gravity may not be all of the external forces; friction may affect this, but it's harder to account for
---	local forceExternal = Vector3.new(0, -workspace.Gravity, 0)
---	local force = -spring.Stiffness * springLength - spring.Damping * axis:Dot(effectiveVelocity) + axis:Dot(forceExternal)
---
---	force = math.clamp(force, -spring.MaxForce, spring.MaxForce)
---	return force
---end
---```
---
local SpringConstraint;
---The number of coils visualized on the SpringConstraint. This can only be
---set between 0 and 8.
---
SpringConstraint.Coils = nil;
---The current distance between the `SpringConstraint`'s `Attachment`.
---
SpringConstraint.CurrentLength = nil;
---Damping constant for the `SpringConstraint`. Multiplied to the velocity of
---the constraint's `Attachment` to reduce the spring force applied.
---
SpringConstraint.Damping = nil;
---Natural resting length of the spring.
---
SpringConstraint.FreeLength = nil;
---Sets whether the `SpringConstraint` enforces a minimum and maximum length.
---If the `SpringConstraint`'s `Attachment` reach these limits, they will
---simply stop moving apart from one another without restitution. If you need
---restitution or elasticity at the ends of the range of motion, you can
---combine a `SpringConstraint` with another constraint that allows
---restitution at the end of its range, such as a `PrismaticConstraint` or
---`RopeConstraint`.
---
SpringConstraint.LimitsEnabled = nil;
---The maximum force the `SpringConstraint` can apply on its `Attachment`.
---Some spring systems can give rise to forces that grow fast leading to
---instability. In such cases it is recommended to set MaxForce to a
---reasonable value.
---
SpringConstraint.MaxForce = nil;
---The maximum separation the `SpringConstraint` will allow if
---`SpringConstraint/LimitsEnabled` is true.
---
SpringConstraint.MaxLength = nil;
---The minimum separation the `SpringConstraint` will allow if
---`SpringConstraint/LimitsEnabled` is true.
---
SpringConstraint.MinLength = nil;
---The visualized radius of the spring's coils.
---
SpringConstraint.Radius = nil;
---The strength of the spring. The higher this value the more force will be
---applied when the attachments are separated a different length than the
---`SpringConstraint/FreeLength`.
---
SpringConstraint.Stiffness = nil;
---The visualized thickness of the spring's coils.
---
SpringConstraint.Thickness = nil;
---@class StackFrame : Instance
---@field public FrameId int
---@field public FrameName string
---@field public FrameType DebuggerFrameType
---@field public Globals DebuggerVariable
---@field public Line int
---@field public Locals DebuggerVariable
---@field public Populated bool
---@field public Script string
---@field public Upvalues DebuggerVariable
local StackFrame;
---
StackFrame.FrameId = nil;
---
StackFrame.FrameName = nil;
---
StackFrame.FrameType = nil;
---
StackFrame.Globals = nil;
---
StackFrame.Line = nil;
---
StackFrame.Locals = nil;
---
StackFrame.Populated = nil;
---
StackFrame.Script = nil;
---
StackFrame.Upvalues = nil;
---@class StandalonePluginScripts : Instance
---**StandalonePluginScripts** is a container of `Script|Scripts` to be run in a
---standalone plugin `DataModel` when Roblox Studio starts (it is not useful
---outside the context of plugins). When a place to be edited is loaded in Roblox
---Studio, scripts inside this container are not run.
---
local StandalonePluginScripts;
---@class StandardPages : Pages, Instance
---A generic version of the Pages class, which may contain variable data,
---depending on what method it was returned from. See the `Pages` class for more
---information.
---
local StandardPages;
---@class StarterCharacterScripts : StarterPlayerScripts, Instance
---The StarterCharacterScripts class stores scripts to be parented in a player's
---`Player.Character`, when they spawn. Unlike scripts stored in the
---<a href="/reference/engine/classes/PlayerScripts">PlayerScripts</a> folder,
---these scripts will not persist when the player respawns.
---
---If a script named **Animate**, **Sound** or **Health** is placed in this
---folder, they will replace the default scripts that are added to each
---`Player.Character` that is created.
---
local StarterCharacterScripts;
---@class StarterGear : Instance
---StarterGear is a container that is automatically inserted into each `Player`
---when the player joins the game. When a player spawns, the contents of that
---player's StarterGear is copied into the player's `Backpack`. Additionally,
---when a player connects to a game that permits gear, all of the appropriate
---gear `Tool` objects that the player owns are inserted into that player's
---StarterGear.
---
---Unlike `StarterPack`, StarterGear is not a service but rather a child of each
---`Player` object -- this means that its contents are player-specific so that
---each player can have different `Tool`s within their `StarterGear`. It is not
---replicated to any client, including the owning player.
---
---## Accessing StarterGear
---
---Listening to the `Players/PlayerAdded` event is useful for
---
---```
---local Players = game:GetService("Players")
---
---local toolExamplePrefab = Instance.new("Tool")
---toolExamplePrefab.Name = "Example Tool"
---
----- Accessing StarterGear from Server Script
---local function onPlayerAdded(player)
---	-- Wait for the StarterGear to be added
---	local starterGear = player:WaitForChild("StarterGear")
---	-- Add a Tool to the StarterGear
---	local toolExample = toolExamplePrefab:Clone()
---	toolExample.Parent = starterGear
---end
---
---Players.PlayerAdded:connect(onPlayerAdded)
---```
---
---## Allowing Gear
---
---Whether or not gear can be permitted is determined in a place's settings page
---under 'Permissions'. On the permissions page gear can be disabled and enabled
---by genre and type. To disable gear, ensure all the gear types are not
---selected.
---
---Individual gear can also be added to a game using the 'Add to game' feature in
---the Roblox catalog. This option can be found on the page of any gear that is
---on sale. When gear is added to a game in this manner it will appear under the
---'Store' heading on the game's page. The owner of the game (group or user)
---receives a commission when gear is sold in this manner.
---
---## Gameplay Considerations
---
---Before adding any gear to a game, consider the implication of doing so. Gear
---includes `Script`s and allows the player to perform actions that the developer
---may not have considered. For example, a navigational gear may allow the player
---to access a part of the map the developer does not want to be accessed.
---Weapons allow players with gear to damage other players, possibly without the
---ability to retaliate. Always play-test games after adding gear to them to make
---sure there are no abuse cases.
---
local StarterGear;
---@class StarterGui : BasePlayerGui, Instance
---@field public ProcessUserInput bool
---@field public ResetPlayerGuiOnSpawn bool
---@field public ScreenOrientation ScreenOrientation
---@field public ShowDevelopmentGui bool
---@field public VirtualCursorMode VirtualCursorMode
---@field public CoreGuiChangedSignal RBXScriptSignal.CoreGuiChangedSignal
---The StarterGui service is a container object designed to hold
---`LayerCollector|GUI objects` such as `ScreenGui|ScreenGuis`.
---
---## StarterGui as a container
---
---When a `Player|Players'` `Player/Character|character` respawns, the contents
---of their `PlayerGui` is emptied. Children of the `StarterGui` are then copied
---along with their descendants into the `PlayerGui`.
---
---`LayerCollector|GUI objects` such as `ScreenGui|ScreenGuis` with their
---`LayerCollector/ResetOnSpawn|ResetOnSpawn` property set to false will only be
---placed into each `Player|Player's` `PlayerGui` once and will not be deleted
---when the `Player` respawns.
---
---## StarterGui as an interface
---
---The StarterGui also includes a range of functions allowing you to interact
---with the `CoreGui`. For example `StarterGui/SetCoreGuiEnabled` can be used to
---disable elements of the `CoreGui`. `StarterGui/SetCore` can perform a range of
---functions including creating notifications and system messages.
---
local StarterGui;
---Allows the StarterGui service to process input like `PlayerGui` and
---`CoreGui` do. The default value is false.
---
StarterGui.ProcessUserInput = nil;
---If set to true, each child parented to the `StarterGui` will be cloned
---into a player's `PlayerGui` when that player's character is respawned.
---
---If one of the children is a PlayerGui and it has its PlayerGui property
---set to false, it will not be cloned.
---
StarterGui.ResetPlayerGuiOnSpawn = nil;
---This property sets the preferred orientation mode for users with mobile
---devices. For the different modes available, see `Enum/ScreenOrientation`.
---
---When a `Player` joins the game, if they are using a mobile device, this
---property will determine the device's starting orientation.
---`PlayerGui/ScreenOrientation` will be set to this value for
---`Player|Players` joining the game. For example, the following code would
---set the default to _'Portrait'_:
---
---```lua
---game:GetService("StarterGui").ScreenOrientation = Enum.ScreenOrientation.Portrait
---```
---
---By default, this property is set to _'LandscapeSensor'_, meaning the
---viewport will rotate so it is always right-side-up in landscape.
---
---Changing this property will not change the `Enum/ScreenOrientation` for
---`Player|Players` already in the game. To change the orientation for an
---existing player use their `PlayerGui/ScreenOrientation` property.
---
---You can also get the current screen orientation for a user's device using
---`PlayerGui/CurrentScreenOrientation`. This is useful when using the
---'sensor' `Enum/ScreenOrientation` settings.
---
StarterGui.ScreenOrientation = nil;
---This property determines whether the contents of `StarterGui` is visible
---in studio
---
StarterGui.ShowDevelopmentGui = nil;
---
StarterGui.VirtualCursorMode = nil;
---@param parameterName string
---@return Variant
---GetCore returns data set or made available by Roblox's
---`CoreScript|CoreScripts`. The first and only parameter is a string that
---selects the information to be fetched. The following sections describe the
---strings and the data they return by this function.
---
---Each of these is registered by a CoreScript and calling this function may
---yield. Many of these also register an equivalent
---`StarterGui/SetCore|SetCore` function (these are marked with an asterisk).
---
---#### PointsNotificationsActive\*
---
---Returns true if player point notifications are enabled.
---
---#### BadgesNotificationsActive\*
---
---Returns true if badge notifications are enabled.
---
---#### AvatarContextMenuEnabled\*
---
---Returns true if the Avatar Context Menu is enabled.
---
---#### ChatActive\*
---
---Returns whether the chat is active or not. This is indicated by the
---selection state of the top bar's chat icon.
---
---#### ChatWindowSize\*
---
---Returns the size of the chat window as a UDim2.
---
---#### ChatWindowPosition\*
---
---Returns the size of the chat window as a UDim2.
---
---#### ChatBarDisabled\*
---
---Returns true if the chat bar is disabled.
---
---#### GetBlockedUserIds
---
---Returns a list of `Player/UserId`s associated with users that have been
---blocked by the local player.
---
---#### PlayerBlockedEvent
---
---Returns a BindableEvent that is fired whenever a player is blocked by the
---local player.
---
---#### PlayerUnblockedEvent
---
---Returns a BindableEvent that is fired whenever a player is unblocked by
---the local player.
---
---#### PlayerMutedEvent
---
---Returns a BindableEvent that is fired whenever a player is muted by the
---local player.
---
---#### PlayerUnmutedEvent
---
---Returns a BindableEvent that is fired whenever a player is unmuted by the
---local player.
---
---#### PlayerFriendedEvent
---
---Returns a BindableEvent that is fired whenever a player is friended by the
---local player.
---
---#### PlayerUnfriendedEvent
---
---Returns a BindableEvent that is fired whenever a player is unfriended by
---the local player.
---
---#### DeveloperConsoleVisible\*
---
---Returns true if the developer console is visible.
---
---#### VRRotationIntensity
---
---Returns a string describing the camera rotation sensitivity in VR: `Low`,
---`High` and `Smooth`. _This will not be available unless
---`VRService/VREnabled` is true._
---
StarterGui.GetCore = function(self, parameterName) end;
---@param coreGuiType CoreGuiType
---@param enabled bool
---@return void
---This function sets whether the `CoreGui` element associated with the given
---`Enum/CoreGuiType` is enabled or disabled.
---
---The top bar can not be disabled using this function. To disable the top
---bar, set _TopbarEnabled_ to _false_ using `StarterGui/SetCore`. This will
---also disable the element associated with all
---`Enum/CoreGuiType|CoreGuiTypes`.
---
StarterGui.SetCoreGuiEnabled = function(self, coreGuiType, enabled) end;
---@param parameterName string
---@param value Variant
---@return void
---SetCore (not to be confused with
---`StarterGui/SetCoreGuiEnabled|SetCoreGuiEnabled`) exposes a variety of
---functionality defined by Roblox's `CoreScript|CoreScripts`, such as
---sending notifications, toggling notifications for badges/points, defining
---a callback for the reset button or toggling the topbar. The first
---parameter to SetCore is a string that selects the functionality with which
---the call will interact: a CoreScript must have registered such a string
---already (if one hasn't, an error is raised). It may be necessary to make
---multiple calls to SetCore using `pcall` in case the respective CoreScript
---has yet to load (or if it has been disabled entirely).
---
---The following table describes the strings that may be accepted as the
---first parameter in a call to SetCore. The parameters that should follow
---are dependent on the functionality that will be used and are described in
---sub-tables.
---
---#### ChatActive
---
---Controls whether the chat is active
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>	
---    </tr>
---	</thead>
---  <tbody>
---	<tr>
---    <td><code>active</code></td>
---    <td>bool</td>
---    <td>Required</td>
---    <td>Determines whether the chat should be made active</td>
---  </tr>
---  </tbody>
---</table>
---
---#### PointsNotificationsActive
---
---Controls whether notifications for earned player points will appear
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---	</thead>
---  <tbody>
---	<tr>
---    <td><code>active</code></td>
---    <td>bool</td>
---    <td>Required</td>
---    <td>Determines whether notifications for earned player points will appear</td>
---  </tr>
---  </tbody>
---</table>
---
---#### BadgesNotificationsActive
---
---Controls whether notifications for earned badges will appear
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---      </tr>
---	</thead>
---  <tbody>
---	<tr>
---    <td><code>active</code></td>
---    <td>bool</td>
---    <td>Required</td>
---    <td>Determines whether notifications for earned badges
---will appear</td>
---  </tr>
---  </tbody>
---</table>
---
---#### ResetButtonCallback
---
---Determines the behavior, if any, of the reset button given a bool or a
---`BindableEvent` to be `BindableEvent/Fire|fired` when a player requests to
---reset.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---		</thead>
---    <tbody>
---	<tr>
---    <td><code>enabled</code></td>
---    <td>bool</td>
---    <td>Required</td>
---    <td>Determines whether the reset button retains its default behavior</td>
---  </tr>
---	<tr>
---    <td colspan="5">OR</td>
---  </tr>
---	<tr>
---    <td><code>callback</code></td>
---    <td>BindableEvent</td>
---    <td>Required</td>
---    <td>A BindableEvent to be fired when the player confirms they want to reset</td>
---  </tr>
---  </tbody>
---</table>
---
---#### ChatMakeSystemMessage
---
---Display a formatted message in the chat.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---      </tr>
---	</thead>
---  <tbody>
---	<tr>
---    <td><code>configTable</code></td>
---    <td>dictionary</td>
---    <td>Required</td>
---    <td>A dictionary of information describing the message (see below)</td>
---  </tr>
---  </tbody>
---</table>
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>Text</code></td>
---    <td>string</td>
---    <td>Required</td>
---    <td>The message to display</td>
---  </tr>
---	<tr>
---    <td><code>Color</code></td>
---    <td>Color3</td>
---    <td><code>Color3.fromRGB(255, 255, 243)</code></td>
---    <td>The TextColor3 of the message</td>
---  </tr>
---	<tr>
---    <td><code>Font</code></td>
---    <td><code>Enum.Font</code></td>
---    <td><code>SourceSansBold</code></td>
---    <td>The TextLabel/Font|Font of the message</td>
---  </tr>
---	<tr>
---    <td><code>TextSize</code></td>
---    <td><code>Integer</code></td>
---    <td><code>18</code></td>
---    <td>The TextSize of the message</td>
---  </tr>
---  </tbody>
---</table>
---
---#### ChatWindowSize
---
---Determines the `GuiObject/Size|size` of the chat window.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>windowSize</code></td>
---    <td>UDim2</td>
---    <td>Required</td>
---    <td>Determines the size of the chat window</td>
---  </tr>
---  </tbody>
---</table>
---
---#### ChatWindowPosition
---
---Determines the `GuiObject/Position|position` of the chat window.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>windowPosition</code></td>
---    <td>UDim2</td>
---    <td>Required</td>
---    <td>Determines the position of the chat window</td>
---  </tr>
---</tbody>
---</table>
---
---#### ChatBarDisabled
---
---Determines whether the player is able to type a message into the chat.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>disabled</code></td>
---    <td>bool</td>
---    <td>Required</td>
---    <td>Determines whether the chat's TextBox input is visible.</td>
---  </tr>
---</tbody>
---</table>
---
---#### SendNotification
---
---Causes a non-intrusive notification to appear at the bottom right of the
---screen. The notification may have up to two buttons.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---  <tbody>
---	<tr>
---    <td><code>configTable</code></td>
---    <td>dictionary</td>
---    <td>Required</td>
---    <td>A dictionary of information describing the notification (see below)</td>
---  </tr>
---  </tbody>
---</table>
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>Title</code></td>
---    <td>string</td>
---    <td>Required</td>
---    <td>The title of the notification</td>
---  </tr>
---	<tr>
---    <td><code>Text</code></td>
---    <td>string</td>
---    <td>Required</td>
---    <td>The main text of the notification</td>
---  </tr>
---	<tr>
---    <td><code>Icon</code></td>
---    <td>string</td>
---    <td>Optional</td>
---    <td>The image to display with the notification</td>
---  </tr>
---	<tr>
---    <td><code>Duration</code></td>
---    <td>number</td>
---    <td>5</td>
---    <td>Duration (in seconds) the notification should stay visible</td>
---  </tr>
---	<tr>
---    <td><code>Callback</code></td>
---    <td>BindableFunction</td>
---    <td>Optional</td>
---    <td>A BindableFunction that should be invoked with the text of the button pressed by the player.</td>
---  </tr>
---	<tr>
---    <td><code>Button1</code></td>
---    <td>string</td>
---    <td>Optional</td>
---    <td>The text to display on the first button</td>
---  </tr>
---	<tr>
---    <td><code>Button2</code></td>
---    <td>string</td>
---    <td>Optional</td>
---    <td>The text to display on the second button</td>
---  </tr>
---  </tbody>
---</table>
---
---#### TopbarEnabled
---
---Determines whether the topbar is displayed. Disabling the topbar will also
---disable all CoreGuis, such as the chat, inventory and player list (i.e.
---those set with `StarterGui/SetCoreGuiEnabled|SetCoreGuiEnabled`).
---
---When disabled, the region the topbar once occupied will still capture
---mouse events; however, `TextButton|buttons` placed there will not respond
---to `GuiButton/MouseButton1Click|clicks`. The origin of GUI space will
---still be offset 36 pixels from the top of the screen.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>enabled</code></td>
---    <td>bool</td>
---    <td>Required</td>
---    <td>Determines whether the topbar should be visible</td>
---  </tr>
---</tbody>
---</table>
---
---#### DevConsoleVisible
---
---Determines whether the Developer Console is visible.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>visibility</code></td>
---    <td>bool</td>
---    <td>Required</td>
---    <td>Determines whether the developer console is visible</td>
---  </tr>
---</tbody>
---</table>
---
---#### PromptSendFriendRequest
---
---Prompts the current player to send a friend request to the given `Player`.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>player</code></td>
---    <td>Player</td>
---    <td>Required</td>
---    <td>The player to which the friend request should be sent</td>
---  </tr>
---</tbody>
---</table>
---
---#### PromptUnfriend
---
---Prompts the current player to remove a given `Player` from their friends
---list.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>player</code></td>
---    <td>Player</td>
---    <td>Required</td>
---    <td>The player who should be unfriended</td>
---  </tr>
---</tbody>
---</table>
---
---#### PromptBlockPlayer
---
---Prompts the current player to block the given `Player`.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>player</code></td>
---    <td>Player</td>
---    <td>Required</td>
---    <td>The player who should be blocked</td>
---  </tr>
---  </tbody>
---</table>
---
---#### PromptUnblockPlayer
---
---Prompts the current player to unblock the given `Player`.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
--- </thead>
--- <tbody>
---	<tr>
---    <td><code>player</code></td>
---    <td>Player</td>
---    <td>Required</td>
---    <td>The player who should be unblocked</td>
---  </tr>
---  </tbody>
---</table>
---
---#### AvatarContextMenuEnabled
---
---Determines whether the
---[Avatar Context Menu](/avatar/characters/context-menu) is enabled.
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>enabled</code></td>
---    <td>bool</td>
---    <td>Required</td>
---    <td>Determines whether the Avatar Context Menu is enabled</td>
---  </tr>
---</tbody>
---</table>
---
---#### AvatarContextMenuTarget
---
---Forcibly opens the [Avatar Context Menu](/avatar/characters/context-menu).
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>player</code></td>
---    <td><code>Player</code></td>
---    <td>Required</td>
---    <td>The player on whom the ACM will be opened.</td>
---  </tr>
---</tbody>
---</table>
---
---#### AddAvatarContextMenuOption
---
---Adds an option to the
---[Avatar Context Menu](/avatar/characters/context-menu).
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>option</code></td>
---    <td><code>Enum.AvatarContextMenuOption</code></td>
---    <td>Required</td>
---    <td><code>Friend</code> (send friend request), <code>Chat</code> (start private chat), or <code>Emote</code> (wave)</td>
---  </tr>
---	<tr>
---    <td colspan="5">OR</td>
---  </tr>
---	<tr>
---    <td><code>option</code></td>
---    <td>table</td>
---    <td>Required</td>
---    <td>A two-element table, where the first is the name of the custom action, and the second is a BindableEvent which will be fired with a player was selected when the option was activated.</td>
---  </tr>
---</tbody>
---</table>
---
---#### RemoveAvatarContextMenuOption
---
---Removes an option to the
---[Avatar Context Menu](/avatar/characters/context-menu). The `option`
---argument must be the same as what was used with
---**AddAvatarContextMenuOption** (see above).
---
---<table>
---	<thead>
---		<tr>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Default</th>
---			<th>Description</th>
---    </tr>
---</thead>
---<tbody>
---	<tr>
---    <td><code>option</code></td>
---    <td>Variant</td>
---    <td>Required</td>
---    <td>The same value provided to <b>AddAvatarContextMenuOption</b></td>
---  </tr>
---  </tbody>
---</table>
---
---#### AvatarContextMenuTheme
---
---Configures the customizable Avatar Context Menu (ACM) which is an opt-in
---feature that allows easy player-to-player social interaction via custom
---actions, such as initiating trades, battles, and more.
---
---For more info on the ACM including how to customize its theme and use it
---in your game, see the
---[Avatar Context Menu](/avatar/characters/context-menu) article.
---
---#### CoreGuiChatConnections
---
---Sets up a bindable gateway connection between the CoreGui topbar's chat
---button and the Lua Chat System. The second parameter must be a table of
---`BindableEvent|BindableEvents` and `BindableFunction|BindableFunctions`.
---See the example below for more clarification.
---
---```lua
----- Create the Bindable objects
---local ChatConnections = {}
---
---local function AddObjects(bindableClass,targetName,...)
---	local target = ChatConnections[targetName]
---	if not target then
---		target = {}
---		ChatConnections[targetName] = target
---	end
---	local names = {...}
---	for _,name in pairs(names) do
---		local signal = Instance.new(bindableClass)
---		signal.Name = targetName .. "_" .. name
---		signal.Parent = script
---		target[name] = signal
---	end
---end
---
---AddObjects("BindableEvent","ChatWindow",
---	---------------------------
---	-- Fired from the CoreGui
---	---------------------------
---	"ToggleVisibility", -- Fired when the CoreGui chat button is pressed.
---	"SetVisible", -- Fired when the CoreGui wants to directly change the visiblity state of the chat window.
---	"FocusChatBar", -- Fired when the CoreGui wants to capture the Chatbar's Focus.
---	"TopbarEnabledChanged", -- Fired when the visibility of the Topbar is changed.
---	"SpecialKeyPressed", -- Fired when the reserved ChatHotkey is pressed.
---	"CoreGuiEnabled", -- Fired when a user changes the SetCoreGuiEnabled state of the Chat Gui.
---
---	---------------------------
---	-- Fired to the CoreGui
---	---------------------------
---	"ChatBarFocusChanged",
---		-- ^ Fire this with 'true' when you want to assure the CoreGui that the ChatBar is being focused on.
---
---	"VisibilityStateChanged",
---		-- ^ Fire this with 'true' when the user shows or hides the chat.
---
---	"MessagesChanged",
---		-- ^ Fire this with a number to change the number of messages that have been recorded by the chat window.
---		--   If the CoreGui thinks the chat window isn't visible, it will display the recorded difference between
---		--   the number of messages that was displayed when it was visible, and the number you supply.
---
---	"MessagePosted"
---		-- ^ Fire this to make the player directly chat under Roblox's C++ API.
---		--	 This will fire the LocalPlayer's Chatted event.
---		--   Please only fire this on the player's behalf. If you attempt to spoof a player's chat
---		--   to get them in trouble, you could face serious moderation action.
---)
---
---AddObjects("BindableFunction","ChatWindow",
---	"IsFocused" -- This will be invoked by the CoreGui when it wants to check if the chat window is active.
---)
---
----- The following events are fired if the user calls StarterGui:SetCore(string name, Variant data)
----- Note that you can only hook onto these ones specifically.
---AddObjects("BindableEvent","SetCore",
---	"ChatMakeSystemMessage",
---	"ChatWindowPosition",
---	"ChatWindowSize",
---	"ChatBarDisabled"
---)
---
----- The following functions are invoked if the user calls StarterGui:GetCore(string name)
----- Note that you can only hook onto these ones specifically.
---AddObjects("BindableFunction","GetCore",
---	"ChatWindowPosition", -- Should return a UDim2 representing the position of the chat window.
---	"ChatWindowSize", -- Should return a UDim2 representing the size of the chat window.
---	"ChatBarDisabled" -- Should return true if the chat bar is currently disabled.
---)
---
----- Connect ChatConnections to the CoreGui.
---local StarterGui = game:GetService("StarterGui")
---local tries = 0
---local maxAttempts = 10
---
---while (tries < maxAttempts) do
---	local success,result = pcall(function ()
---		StarterGui:SetCore("CoreGuiChatConnections",ChatConnections)
---	end)
---	if success then
---		break
---	else
---		tries = tries + 1
---		if tries == maxAttempts then
---			error("Error calling SetCore CoreGuiChatConnections: " .. result)
---		else
---			wait()
---		end
---	end
---end
---
---while wait(0.2) do
---	local isVisible = (math.random() > 0.5)
---	ChatConnections.ChatWindow.VisibilityStateChanged:Fire(isVisible)
---	if not isVisible then
---		local messageCount = math.random(1,120)
---		ChatConnections.ChatWindow.MessagesChanged:Fire(messageCount)
---	end
---end
---```
---
StarterGui.SetCore = function(self, parameterName, value) end;
---@param parameterName string
---@param getFunction Function
---@return void
StarterGui.RegisterGetCore = function(self, parameterName, getFunction) end;
---@param coreGuiType CoreGuiType
---@return bool
---This function returns whether the given `Enum/CoreGuiType` is enabled or
---if it has been disabled using `StarterGui/SetCoreGuiEnabled`.
---
---This function should be called on the client and is used by the core
---scripts to help determine which core GUI elements to show.
---
---GetCoreGuiEnabled only returns _false_ if the given `Enum/CoreGuiType` has
---been disabled using `StarterGui/SetCoreGuiEnabled`. Setting
---_TopbarEnabled_ to _false_ using `StarterGui/SetCore` hides all
---`Enum/CoreGuiType|CoreGuiTypes` and does not affect the result of
---function.
---
StarterGui.GetCoreGuiEnabled = function(self, coreGuiType) end;
---@param parameterName string
---@param setFunction Function
---@return void
StarterGui.RegisterSetCore = function(self, parameterName, setFunction) end;
---@class RBXScriptSignal.CoreGuiChangedSignal : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.CoreGuiChangedSignal, callback: fun(coreGuiType: CoreGuiType, enabled: bool)): RBXScriptConnection
---
StarterGui.CoreGuiChangedSignal = nil;
---@class StarterPack : Instance
---A service-level container whose contents are copied into each `Player`'s
---`Backpack` when the player spawns. It is generally used to hold `Tools`, but
---is sometimes used to hold `LocalScript`s to ensure that each player gets a
---copy.
---
---When a player's character spawns, the contents of the StarterPack and their
---`StarterGear` are copied into their `Backpack`. Once a character dies, the
---`Backpack` is removed and a new one is created -- populating it using the
---contents of `StarterPack` and `StarterGear`.
---
---The StarterPack is used to determine a set of `Tool`s that _all_ players will
---spawn with. If a developer wants to ensure that certain `Tool`s are available
---to specific players, then they will need to parent the `Tool`s directly to the
---player's `Backpack` instead.
---
---Note: while normally the contents of `StarterPack` are predefined, the
---contents can be changed while the game is running by adding and removing
---`Tool`s accordingly. These updates will pass onto a player's backpack when
---they respawn and their backpacks are reloaded. Changes to the StarterPack
---should be made by the server.
---
---A tool can be added to the StarterPack using the following code.
---
---    Tool.Parent = game:GetService("StarterPack")
---
local StarterPack;
---@class StarterPlayer : Instance
---@field public AllowCustomAnimations bool
---@field public AutoJumpEnabled bool
---@field public CameraMaxZoomDistance float
---@field public CameraMinZoomDistance float
---@field public CameraMode CameraMode
---@field public CharacterJumpHeight float
---@field public CharacterJumpPower float
---@field public CharacterMaxSlopeAngle float
---@field public CharacterUseJumpPower bool
---@field public CharacterWalkSpeed float
---@field public DevCameraOcclusionMode DevCameraOcclusionMode
---@field public DevComputerCameraMovementMode DevComputerCameraMovementMode
---@field public DevComputerMovementMode DevComputerMovementMode
---@field public DevTouchCameraMovementMode DevTouchCameraMovementMode
---@field public DevTouchMovementMode DevTouchMovementMode
---@field public EnableMouseLockOption bool
---@field public GameSettingsAssetIDFace int64
---@field public GameSettingsAssetIDHead int64
---@field public GameSettingsAssetIDLeftArm int64
---@field public GameSettingsAssetIDLeftLeg int64
---@field public GameSettingsAssetIDPants int64
---@field public GameSettingsAssetIDRightArm int64
---@field public GameSettingsAssetIDRightLeg int64
---@field public GameSettingsAssetIDShirt int64
---@field public GameSettingsAssetIDTeeShirt int64
---@field public GameSettingsAssetIDTorso int64
---@field public GameSettingsAvatar GameAvatarType
---@field public GameSettingsR15Collision R15CollisionType
---@field public GameSettingsScaleRangeBodyType NumberRange
---@field public GameSettingsScaleRangeHead NumberRange
---@field public GameSettingsScaleRangeHeight NumberRange
---@field public GameSettingsScaleRangeProportion NumberRange
---@field public GameSettingsScaleRangeWidth NumberRange
---@field public HealthDisplayDistance float
---@field public LoadCharacterAppearance bool
---@field public LoadCharacterLayeredClothing LoadCharacterLayeredClothing
---@field public NameDisplayDistance float
---@field public UserEmotesEnabled bool
---A service which allows the defaults of properties in the `Player` object to be
---set. When a player enters the server, each property of the player object is
---set to the current value of the corresponding property in StarterPlayer.
---
---Additionally, you may add four objects to this service:
---
---- A `StarterPlayerScripts` instance, with scripts that run once for each
---  player.
---- A `StarterCharacterScripts` instance, with scripts to add to each player's
---  character every time they spawn.
---- A `Humanoid` instance named **StarterHumanoid**, which will be used as the
---  default humanoid for each player's character.
---- A `Model` instance named **StarterCharacter**, which will be used as the
---  character model for all players
---
---A typical structure may look something like this: ![StarterPlayer Tree][1]
---
---[1]: /assets/blt358e3811e54dff0c/StarterPlayerTree.png
---
local StarterPlayer;
---The AllowCustomAnimations `StarterPlayer` property describes the current
---game's permission levels regarding custom avatar `Animation`s from the
---website.
---
---As such, this value cannot be changed from within the game. It can only be
---changed by changing the game's permission levels within the game's
---setting's page on the website.
---
---This property is not intended for use in the game.
---
StarterPlayer.AllowCustomAnimations = nil;
---The AutoJumpEnabled property sets whether the character will automatically
---jump when hitting an obstacle on a mobile device.
---
---This property is copied from the `StarterPlayer` to a `Player` when they
---join the game. Following that. the value of this property is copied to
---`Humanoid/AutoJumpEnabled` property of the `Player/Character`s `Humanoid`
---on spawn. In other words, it is possible to set the auto-jump behavior on
---a per-character, per-player and per-game basis using these three
---properties.
---
StarterPlayer.AutoJumpEnabled = nil;
---The CameraMaxZoomDistance `StarterPlayer` property sets the maximum
---distance in studs the camera can be from the character with the default
---cameras.
---
---This property sets the default value of `Player/CameraMaxZoomDistance` for
---each player who joins the game. If this value is set to a lower value than
---`StarterPlayer/CameraMinZoomDistance` it will be increased to
---CameraMinZoomDistance.
---
StarterPlayer.CameraMaxZoomDistance = nil;
---The CameraMinZoonDistance `StarterPlayer` property sets the minimum
---distance in studs the camera can be from the character with the default
---cameras.
---
---This property sets the default value of `Player/CameraMinZoomDistance` for
---each player who joins the game. If this value is set to a higher value
---than `StarterPlayer/CameraMaxZoomDistance` it will be decreased to
---CameraMaxZoomDistance.
---
StarterPlayer.CameraMinZoomDistance = nil;
---The CameraMode `StarterPlayer` property sets whether cameras will be
---locked to first person or not when a player joins the game.
---
---Sets the default value for `Player/CameraMode` for each player in the
---game.
---
---The camera has two modes:
---
---1.  First person
---2.  Third person
---
---The `Enum/CameraMode` Enum is used to set CameraMode, and determines when
---first and third person cameras should be used.
---
---#### First-person
---
---In first-person mode, the player's camera is zoomed all the way in. Unless
---there is a visible GUI present with the `GuiButton/Modal` property set to
---_true_, the mouse will be locked and the user's camera will turn as the
---mouse moves. ![First Person CameraMode][1]
---
---#### Third-person
---
---In third-person mode, the character can be seen in the camera. While in
---third-person mode on Roblox:
---
---- You may right-click and drag to rotate your camera, or use the arrow
---  keys at the bottom right-hand corner of the screen.
---- When you move your mouse, your camera does not change (unless you move
---  the mouse to the end of the screen).
---- When you press any of the arrow keys, the user's character will face in
---  the corresponding arrow key's direction.
---- You can zoom in and out freely.
---
---Third-person is the default camera setting. ![Third Person CameraMode][2]
---
---[1]: /assets/blt466d682943e44225/CameraMode_FirstPerson.jpg
---[2]: /assets/blt0ce876b9652831aa/CameraMode_ThirdPerson.jpg
---
StarterPlayer.CameraMode = nil;
---**CharacterJumpHeight** determines the starting value of
---`Humanoid/JumpHeight` for a `Player`'s `Player/Character|Character`. The
---value of this property defaults to 7.2 studs.
---
---This property is only visible in the Properties window If
---`StarterPlayer/CharacterUseJumpPower` is set to **false**, as it would not
---be relevant otherwise.
---
---Since this property is only relevant for characters being spawned in the
---future, changing it will not change any existing player characters.
---Changes to this property will only take effect when a player respawns.
---
StarterPlayer.CharacterJumpHeight = nil;
---**CharacterJumpPower** determines the starting value of
---`Humanoid/JumpPower` for a `Player`'s `Player/Character|Character`. The
---value of this property defaults to 50 and when applied to the `Player`s
---`Humanoid` it will be constrained between 0 and 1000.
---
---This property is only visible in the Properties window If
---`StarterPlayer/CharacterUseJumpPower` is set to **true**, as it would not
---be relevant otherwise.
---
---Since this property is only relevant for characters being spawned in the
---future, changing it will not change any existing player characters.
---Changes to this property will only take effect when a player respawns.
---
StarterPlayer.CharacterJumpPower = nil;
---**CharacterMaxSlopeAngle** determines the starting value of
---`Humanoid/MaxSlopeAngle` for a `Player`'s `Player/Character|Character`. It
---defaults to 89°, so humanoids can climb pretty much any slope they want by
---default. When applied to the `Player`'s `Humanoid` it will be constrained
---between 0 and 89.
---
---Since this property is only relevant for characters being spawned in the
---future, changing it will not change any existing player characters.
---Changes to this property will only take effect when a player respawns.
---
StarterPlayer.CharacterMaxSlopeAngle = nil;
---**CharacterUseJumpPower** determines the starting value of
---`Humanoid/UseJumpPower` for a `Player`'s `Player/Character|Character`.
---Toggling it will change which property is visible in the properties
---window: `StarterPlayer/CharacterJumpHeight|CharacterJumpHeight` (false) or
---`StarterPlayer/CharacterJumpPower` (true). Defaults to true.
---
---Since this property is only relevant for characters being spawned in the
---future, changing it will not change any existing player characters.
---Changes to this property will only take effect when a player respawns.
---
StarterPlayer.CharacterUseJumpPower = nil;
---**CharacterWalkSpeed** determines the starting value of
---`Humanoid/WalkSpeed` for a `Player`'s `Player/Character|Character`. This
---property defaults to 16.
---
---Since this property is only relevant for characters being spawned in the
---future, changing it will not change any existing player characters.
---Changes to this property will only take effect when a player respawns.
---
StarterPlayer.CharacterWalkSpeed = nil;
---The DevCameraOcclusionMode `StarterPlayer` property sets how the default
---camera handles objects between the camera and the player.
---
---This is the default property for players joining the game. It can be
---changed for individual players by settings the
---`Player/DevComputerOcclusionMode`.
---
---The default value is _Zoom_ (0): The camera will zoom in until there is
---nothing between the player and camera.
---
---See `Enum/DevCameraOcclusionMode` for the different occlusion modes
---available. Sets how the default camera handles objects between the camera
---and the player.
---
StarterPlayer.DevCameraOcclusionMode = nil;
---The DevComputerCameraMovementMode `StarterPlayer` property lets the
---developer overwrite the player's camera mode if the player is on a
---computer.
---
---This is the default property for players joining the game. It can be
---changed for individual players by settings the
---`Player/DevComputerCameraMode`.
---
---If set to **UserChoice** then the player's camera movement mode will be
---determined by whatever the player set in the game settings. Otherwise, the
---mode will be set based on this property.
---
---See `Enum/DevComputerCameraMovementMode` for the different camera modes
---available.
---
---#### Note
---
---This property has no affect on players not on a computer.
---
StarterPlayer.DevComputerCameraMovementMode = nil;
---The DevComputerMovementMove `StarterPlayer` property lets the developer
---overwrite the player's movement mode if the player is on a computer.
---
---This is the default property for players joining the game. It can be
---changed for individual players by settings the
---`Player/DevComputerMovementMode`.
---
---If set to **UserChoice** then the player's movement mode will be
---determined by whatever the player set in the game settings. Otherwise, the
---mode will be set based on this property.
---
---See `Enum/DevComputerMovementMode` for the different movement modes
---available. Lets developer overwrite the player's movement mode if the
---player is on a computer.
---
---#### Note
---
---This property has no affect on players not on a computer.
---
StarterPlayer.DevComputerMovementMode = nil;
---The DevTouchCameraMovementMode `StarterPlayer` property lets the developer
---overwrite the player's camera mode if the player is on a touch device.
---
---This is the default property for players joining the game. It can be
---changed for individual players by settings the
---`Player/DevTouchCameraMode`.
---
---If set to **UserChoice** then the player's camera movement mode will be
---determined by whatever the player set in the game settings. Otherwise, the
---mode will be set based on this property.
---
---See `Enum/DevTouchCameraMovementMode` for the different camera modes
---available.
---
---#### Note
---
---This property has no affect players not on a mobile device.
---
StarterPlayer.DevTouchCameraMovementMode = nil;
---The DevTouchMovementMode `StarterPlayer` property lets the developer
---overwrite the player's movement mode if the player is on a touch device.
---
---This is the default property for players joining the game. It can be
---changed for individual players by settings the
---`Player/DevTouchMovementMode`.
---
---If set to **UserChoice** then the player's movement mode will be
---determined by whatever the player set in the game settings. Otherwise, the
---mode will be set based on this property.
---
---See `Enum/DevTouchMovementMode` for the different movement modes
---available. Lets developer overwrite the player's movement mode if the
---player is on a touch device.
---
---#### Note
---
---This property has no affect on players not on a touch enabled device.
---
StarterPlayer.DevTouchMovementMode = nil;
---The EnableMouseLockOption `StarterPlayer` property determines if a player
---can toggle mouse lock by default.
---
---Mouselock will lock the player's cursor to the center of the screen.
---Moving the mouse will rotate the `Camera` and `Player` will move relative
---to the current rotation of the camera.
---
---This property sets the value of `Player/DevEnableMouseLock`.
---
StarterPlayer.EnableMouseLockOption = nil;
---
StarterPlayer.GameSettingsAssetIDFace = nil;
---
StarterPlayer.GameSettingsAssetIDHead = nil;
---
StarterPlayer.GameSettingsAssetIDLeftArm = nil;
---
StarterPlayer.GameSettingsAssetIDLeftLeg = nil;
---
StarterPlayer.GameSettingsAssetIDPants = nil;
---
StarterPlayer.GameSettingsAssetIDRightArm = nil;
---
StarterPlayer.GameSettingsAssetIDRightLeg = nil;
---
StarterPlayer.GameSettingsAssetIDShirt = nil;
---
StarterPlayer.GameSettingsAssetIDTeeShirt = nil;
---
StarterPlayer.GameSettingsAssetIDTorso = nil;
---
StarterPlayer.GameSettingsAvatar = nil;
---
StarterPlayer.GameSettingsR15Collision = nil;
---
StarterPlayer.GameSettingsScaleRangeBodyType = nil;
---
StarterPlayer.GameSettingsScaleRangeHead = nil;
---
StarterPlayer.GameSettingsScaleRangeHeight = nil;
---
StarterPlayer.GameSettingsScaleRangeProportion = nil;
---
StarterPlayer.GameSettingsScaleRangeWidth = nil;
---The HealthDisplayDistance `StarterPlayer` property sets the distance in
---studs at which this player will see other `Humanoid`'s health bars. If set
---to 0, the health bars will not be displayed. This property is set to 100
---studs by default.
---
---To change the display distance for a player once they join the game, you
---can set the `Player/HealthDisplayDistance` property.
---
---#### Note
---
---If a Humanoid's health bar is visible, you can set the display type using
---`Humanoid/DisplayDistanceType`.
---
StarterPlayer.HealthDisplayDistance = nil;
---The LoadCharacterAppearance `StarterPlayer` property sets whether or not
---the appearance of a player's character should be loaded.
---
---Setting this to _false_ results in the player having no clothes (including
---hats), body colors, body packages or anything else related to the
---appearance of the player's avatar. By default, this property is set to
---_true_.
---
---Setting this to _true_ results in the player loading the appearance
---corresponding to the player's `Player/CharacterAppearanceId`.
---
---If `Player/LoadCharacterWithHumanoidDescription` is used, it can be
---advantageous to set `StarterPlayer.LoadCharacterAppearance` to false as
---the player's avatar is not required as all asset IDs to equip on the
---character will come from the passed in `HumanoidDescription`.
---
StarterPlayer.LoadCharacterAppearance = nil;
---Indicates whether characters spawning into an experience will have layered
---clothing accessories equipped on them (Although
---`Workspace/MeshPartHeadsAndAccessories` also need to be enabled in the
---`Workspace`).
---
StarterPlayer.LoadCharacterLayeredClothing = nil;
---Sets the distance at which this player will see other Humanoid's names. If
---set to 0, names are hidden.
---
---The NameDisplayDistance `StarterPlayer` property sets the distance in
---studs at which this player will see other `Humanoid`'s names. If set to 0,
---names are hidden. This property is set to 100 studs by default.
---
---To change the display distance for a player once they join the game, you
---can set the `Player/NameDisplayDistance` property.
---
---#### Note
---
---If a Humanoid's name is visible, you can set the display type using
---`Humanoid/DisplayDistanceType`.
---
StarterPlayer.NameDisplayDistance = nil;
---This property determines if user-owned emotes are loaded when loading
---avatars. Setting this property to false disables loading. Developers can
---set the property in Studio directly or through the
---[Game Settings menu](/studio/game-settings).
---
---When emote loading is disabled, the emotes UI will still work as long as
---developers choose to use the emotes feature by adding emotes within their
---game.
---
---See also:
---
---- [Avatar Emotes](/avatar/characters/emotes), an article detailing how to
---  control, customize, and play avatar emotes
---
StarterPlayer.UserEmotesEnabled = nil;
---@return void
StarterPlayer.ClearDefaults = function(self) end;
---@class StarterPlayerScripts : Instance
---The StarterPlayerScripts is a container object located within the
---`StarterPlayer` service. It contains `LocalScript`s and other objects to be
---copied to the `PlayerScripts` container once when a `Player` joins the game.
---For example, if you want to create special effects on the client when certain
---conditions are met, you can place a `LocalScript` within this object to do
---that.
---
---This object is also a good place for `LocalScript`s that define additional
---inputs with `ContextActionService`. For inputs that are only relevant when a
---player has spawned in, you can use `ContextActionService/BindAction` when the
---`Players/LocalPlayer` character spawns. Then, use
---`ContextActionService/UnbindAction` when they die or despawn.
---
---When a game is run, this object will also house the default multi-platform
---Roblox control scripts for the camera and character. If `LocalScript`s named
---"CameraScript" or "ControlScript" are placed within this folder, they will
---**replace** the Roblox defaults for those scripts respectively. You can add
---empty LocalScripts for each of these to simply disable them altogether. This
---is useful for games that do not follow the usual control paradigms of a 3rd
---person game.
---
local StarterPlayerScripts;
---@class Stats : Instance
---@field public ContactsCount int
---@field public DataReceiveKbps float
---@field public DataSendKbps float
---@field public HeartbeatTimeMs float
---@field public InstanceCount int
---@field public MovingPrimitivesCount int
---@field public PhysicsReceiveKbps float
---@field public PhysicsSendKbps float
---@field public PhysicsStepTimeMs float
---@field public PrimitivesCount int
---Stats is a service that provides real-time performance information about the
---current running game instance. Its primary purpose is to provide developers
---with an end point to measure where resources are being consumed, as well as
---how much memory is being consumed overall.
---
---The service also stores a tree of `StatsItem`, which can have their values
---read by plugins.
---
local Stats;
---ContactsCount describes how many parts are currently in contact with each
---other, such that one of the two parts are being physically simulated, and
---thus can be recognized by the `BasePart/GetTouchingParts` method.
---
Stats.ContactsCount = nil;
---In a networked game, DataReceiveKbps describes roughly how many kilobytes
---of data are being received by the current instance, per second. If from
---the server's perspective, this represents the total amount of data being
---received from the clients connected to the server.If from a client's
---perspective, this represents the total amount of data being received from
---the server.
---
Stats.DataReceiveKbps = nil;
---In a networked game, DataSendKbps describes roughly how many kilobytes of
---data are being sent by the current instance, per second. If from the
---server's perspective, this represents the total amount of data being sent
---to the clients connected to the server.If from a client's perspective,
---this represents the total amount of data being sent to the server.
---
Stats.DataSendKbps = nil;
---The HeartbeatTimeMs property is a a measurement of the total amount of
---time it takes long it takes for Roblox to update all of its Task Scheduler
---jobs, in milliseconds. If this value is high, then it means one of the
---tasks are hogging up a lot of resources.
---
Stats.HeartbeatTimeMs = nil;
---InstanceCount is a read-only measurement of how many `Instance` are
---currently in memory. This includes the `DataModel`, its descendants, as
---well as any object created with `Instance.new` which is still present in
---memory.
---
Stats.InstanceCount = nil;
---A measurement of how many physically simulated components are currently
---moving in the game world.
---
Stats.MovingPrimitivesCount = nil;
---PhysicsReceiveKbps is a measurement of roughly how many kilobytes of
---physics data are being received by the current instance, per second.If
---from the server's perspective, this represents the total amount of physics
---data being received from the clients connected to the server.If from a
---client's perspective, this represents the total amount of physics data
---being received from the server.
---
Stats.PhysicsReceiveKbps = nil;
---PhysicsSendKbps describes roughly how many kilobytes of physics data are
---being sent by the current instance, per second.If from the server's
---perspective, this represents the total amount of physics data being sent
---to the clients connected to the server.If from a client's perspective,
---this represents the total amount of physics data being sent to the server.
---
Stats.PhysicsSendKbps = nil;
---A measurement of how long it takes for the physics engine to update its
---current state, in milliseconds. If this value is high, then it means the
---game instance is under stress from the physics simulations taking place.
---
Stats.PhysicsStepTimeMs = nil;
---A measurement of how many physically simulated components currently exist
---in the game world.
---
Stats.PrimitivesCount = nil;
---@return string
Stats.GetBrowserTrackerId = function(self) end;
---@return float
---Returns the total amount of memory being consumed by the current game
---session, in megabytes.
---
Stats.GetTotalMemoryUsageMb = function(self) end;
---@param queryType TextureQueryType
---@param pageIndex int
---@param pageSize int
---@return Dictionary
Stats.GetPaginatedMemoryByTexture = function(self, queryType, pageIndex, pageSize) end;
---@param tag DeveloperMemoryTag
---@return float
---Returns the number of megabytes that are being consumed in the specified
---`DeveloperMemoryTag` category.
---
Stats.GetMemoryUsageMbForTag = function(self, tag) end;
---@class StatsItem : Instance
---@field public DisplayName string
---A StatsItem is an internal measurement item that is created by the engine to
---benchmark many of the backend components of Roblox. It cannot be created using
---`Instance.new`, but its value can be read by plugins. They can be found stored
---inside of the `Stats` service.
---
local StatsItem;
---
StatsItem.DisplayName = nil;
---@return string
---Returns the StatsItem's value as a formatted string.
---
StatsItem.GetValueString = function(self) end;
---@return double
---Returns the StatsItem's value.
---
StatsItem.GetValue = function(self) end;
---@class Status : Model, PVInstance, Instance
---Used as a storage for custom Humanoid statuses. This object would've been
---officially used in the RbxStatus library, but remains unfinished.
---
local Status;
---@class StopWatchReporter : Instance
local StopWatchReporter;
---@param taskId int
---@return void
StopWatchReporter.FinishTask = function(self, taskId) end;
---@param reportName string
---@return void
StopWatchReporter.SendReport = function(self, reportName) end;
---@param reportName string
---@param taskName string
---@return int
StopWatchReporter.StartTask = function(self, reportName, taskName) end;
---@class StringValue : ValueBase, Instance
---@field public Value string
---@field public Changed RBXScriptSignal.Changed
---@field public changed RBXScriptSignal.changed
---A StringValue is an object whose purpose is to store a single [Lua string][1].
---The length of the string can't be more than 200,000 characters (this will
---cause a "String too long" error). Like all "-Value" objects, this single value
---is stored in the Value property. The Changed event for this (and other objects
---like it) will fire with the new value being stored in the object, instead of a
---string representing the property being changed.
---
---If the string is too long to be displayed in the Value field within Properties
---window, it will partially show the string contents followed by an ellipsis
---(...).
---
---[1]: https://www.lua.org/pil/2.4.html
---
local StringValue;
---The stored <a href="/scripting/luau/strings">string</a>.
---
StringValue.Value = nil;
---@class RBXScriptSignal.Changed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Changed, callback: fun(value: string)): RBXScriptConnection
---Fired whenever the `StringValue/Value` of the `StringValue` is changed. It
---will run with the new value being stored in the argument object, instead
---of a string representing the property being changed.
---
---This event, like other changed events, can be used to track when an
---StringValue changes and to track the different values that it may change
---to.
---
---For instance, this may be useful in games that rely on StringValues to
---track values such as NPC or item names.
---
---Equivalent changed events exist for similar objects, such as `NumberValue`
---and `BoolValue`, depending on what object type best suits the need.
---
StringValue.Changed = nil;
---@class RBXScriptSignal.changed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.changed, callback: fun(value: string)): RBXScriptConnection
---
StringValue.changed = nil;
---@class Studio : Instance
---@field public TODOColor Color3
---@field public functionColor Color3
---@field public localColor Color3
---@field public nilColor Color3
---@field public selfColor Color3
---@field public ActiveColor Color3
---@field public ActiveHoverOverColor Color3
---@field public AlwaysSaveScriptChanges bool
---@field public AnimateHoverOver bool
---@field public AutoCleanEmptyLine bool
---@field public AutoClosingBrackets bool
---@field public AutoClosingQuotes bool
---@field public AutoIndentRule AutoIndentRule
---@field public AutoRecoveryEnabled bool
---@field public AutoRecoveryIntervalMinutes int
---@field public AutoRecoveryPath QDir
---@field public BackgroundColor Color3
---@field public BasicObjectsDisplayMode ListDisplayMode
---@field public BoolColor Color3
---@field public BracketColor Color3
---@field public BuiltinFunctionColor Color3
---@field public CameraMouseWheelSpeed float
---@field public CameraShiftSpeed float
---@field public CameraSpeed float
---@field public CameraZoomtoMousePosition bool
---@field public ClearOutputOnStart bool
---@field public CommandBarLocalState bool
---@field public CommentColor Color3
---@field public CurrentLineHighlightColor Color3
---@field public DebuggerCurrentLineColor Color3
---@field public DebuggerErrorLineColor Color3
---@field public DefaultScriptFileDir QDir
---@field public DeprecatedObjectsShown bool
---@field public DisplayLanguage string
---@field public DocViewCodeBackgroundColor Color3
---@field public DragMultiplePartsAsSinglePart bool
---@field public EnableAutocomplete bool
---@field public EnableAutocompleteDocView bool
---@field public EnableCoreScriptDebugger bool
---@field public EnableHttpSandboxing bool
---@field public EnableInternalBetaFeatures bool
---@field public EnableInternalFeatures bool
---@field public EnableScriptAnalysis bool
---@field public EnableScrollbarMarkers bool
---@field public EnableSignatureHelp bool
---@field public EnableSignatureHelpDocView bool
---@field public EnableTemporaryTabs bool
---@field public EnableTemporaryTabsInExplorer bool
---@field public EnableTypeHover bool
---@field public EnableOnTypeAutocomplete bool
---@field public ErrorColor Color3
---@field public FindSelectionBackgroundColor Color3
---@field public Font QFont
---@field public FormatOnPaste bool
---@field public FormatOnType bool
---@field public FunctionNameColor Color3
---@field public HighlightCurrentLine bool
---@field public HighlightOccurances bool
---@field public HoverAnimateSpeed HoverAnimateSpeed
---@field public HoverBoxThickness float
---@field public HoverOverColor Color3
---@field public IndentUsingSpaces bool
---@field public KeywordColor Color3
---@field public LineThickness float
---@field public LocalAssetsFolder QDir
---@field public LuaDebuggerEnabled bool
---@field public LuaDebuggerEnabledAtStartup bool
---@field public LuauKeywordColor Color3
---@field public MainVolume float
---@field public MatchingWordBackgroundColor Color3
---@field public MaximumOutputLines int
---@field public MenuItemBackgroundColor Color3
---@field public MethodColor Color3
---@field public NumberColor Color3
---@field public OnlyPlayAudiofromWindowinFocus bool
---@field public OperatorColor Color3
---@field public OutputFont QFont
---@field public OutputLayoutMode OutputLayoutMode
---@field public PermissionLevelShown PermissionLevelShown
---@field public PhysicalDraggersSelectScopeByDefault bool
---@field public PivotSnapToGeometryColor Color3
---@field public PluginDebuggingEnabled bool
---@field public PluginsDir QDir
---@field public PrimaryTextColor Color3
---@field public PropertyColor Color3
---@field public RenderThrottlePercentage int
---@field public RespectStudioshortcutswhengamehasfocus bool
---@field public RulerColor Color3
---@field public Rulers string
---@field public RuntimeUndoBehavior RuntimeUndoBehavior
---@field public ScriptEditorColorPreset StudioScriptEditorColorPresets
---@field public ScriptEditorScrollbarBackgroundColor Color3
---@field public ScriptEditorScrollbarHandleColor Color3
---@field public ScriptEditorMenuBorderColor Color3
---@field public ScriptEditorShouldShowPluginMethods bool
---@field public ScriptTimeoutLength int
---@field public ScrollPastLastLine bool
---@field public SearchContentForCoreScripts bool
---@field public SecondaryTextColor Color3
---@field public SelectColor Color3
---@field public SelectHoverColor Color3
---@field public SelectedMenuItemBackgroundColor Color3
---@field public SelectedTextColor Color3
---@field public SelectionBackgroundColor Color3
---@field public SelectionColor Color3
---@field public SelectionHighlightThickness float
---@field public ServerAudioBehavior ServerAudioBehavior
---@field public SetPivotofImportedParts bool
---@field public ShowCoreGUIinExplorerwhilePlaying bool
---@field public ShowDeploymentWarnings bool
---@field public ShowDiagnosticsBar bool
---@field public ShowFileSyncService bool
---@field public ShowHiddenObjectsinExplorer bool
---@field public ShowHoverOver bool
---@field public ShowLightGuides bool
---@field public ShowNavigationLabels bool
---@field public ShowNavigationMesh bool
---@field public ShowPathfindingLinks bool
---@field public ShowPluginGUIServiceinExplorer bool
---@field public ShowQTwarningsinoutput bool
---@field public ShowWhitespace bool
---@field public ShowplusbuttononhoverinExplorer bool
---@field public ShowCorePackagesInExplorer bool
---@field public SkipClosingBracketsandQuotes bool
---@field public StringColor Color3
---@field public TabWidth int
---@field public TextColor Color3
---@field public TextWrapping bool
---@field public Theme Instance
---@field public UITheme UITheme
---@field public UseBoundingBoxMoveHandles bool
---@field public WarningColor Color3
---@field public WhitespaceColor Color3
---@field public ThemeChanged RBXScriptSignal.ThemeChanged
---The Studio object is a settings object that is exclusive to Roblox Studio. It
---can be found in Roblox Studio's settings under the Studio tab.
---
local Studio;
---
Studio.TODOColor = nil;
---
Studio.functionColor = nil;
---
Studio.localColor = nil;
---
Studio.nilColor = nil;
---
Studio.selfColor = nil;
---
Studio.ActiveColor = nil;
---
Studio.ActiveHoverOverColor = nil;
---If set to true, Roblox Studio will attempt to transfer script changes that
---were made during a Play Solo session to the opened place.
---
Studio.AlwaysSaveScriptChanges = nil;
---If set to true, the hover selection box that is shown when mousing over
---selectable objects in the `Workspace` will flash between
---`Studio/Hover Over Color` and `Studio/Select Color` based on the
---`Studio/Hover Animate Speed`.
---
Studio.AnimateHoverOver = nil;
---
Studio.AutoCleanEmptyLine = nil;
---
Studio.AutoClosingBrackets = nil;
---
Studio.AutoClosingQuotes = nil;
---
Studio.AutoIndentRule = nil;
---
Studio.AutoRecoveryEnabled = nil;
---
Studio.AutoRecoveryIntervalMinutes = nil;
---
Studio.AutoRecoveryPath = nil;
---Specifies the background color of Roblox Studio's script editor.
---
Studio.BackgroundColor = nil;
---Sets the scrolling mode of the `Advanced Objects` tab in Roblox Studio.
---
Studio.BasicObjectsDisplayMode = nil;
---
Studio.BoolColor = nil;
---
Studio.BracketColor = nil;
---Sets the color of built-in functions and keywords in the script editor.
---
Studio.BuiltinFunctionColor = nil;
---Sets how many studs the camera will move forward or backwards when using
---the mouse wheel.
---
Studio.CameraMouseWheelSpeed = nil;
---Sets the speed in studs/sec that the camera moves while holding down Shift
---with the movement keys.
---
Studio.CameraShiftSpeed = nil;
---Sets the speed in studs/sec that the camera moves when movement keys are
---pressed.
---
Studio.CameraSpeed = nil;
---
Studio.CameraZoomtoMousePosition = nil;
---If set to true, the output will be automatically cleared when game
---sessions are switched.
---
Studio.ClearOutputOnStart = nil;
---
Studio.CommandBarLocalState = nil;
---Specifies the color of comments in Roblox Studio's script editor.
---
Studio.CommentColor = nil;
---
Studio.CurrentLineHighlightColor = nil;
---
Studio.DebuggerCurrentLineColor = nil;
---
Studio.DebuggerErrorLineColor = nil;
---Specifies the default prompt directory that will be opened when the user
---activates the `Execute Script` button in Roblox Studio.
---
Studio.DefaultScriptFileDir = nil;
---If set to true, deprecated objects will be shown in the Advanced Objects
---window, as well as the Object Browser.
---
Studio.DeprecatedObjectsShown = nil;
---
Studio.DisplayLanguage = nil;
---
Studio.DocViewCodeBackgroundColor = nil;
---If set to true, the bounding box of a selection will be used for collision
---detection while dragging, instead of each individual part being checked.
---This makes the dragger perform smoother, but with notably less precision.
---
Studio.DragMultiplePartsAsSinglePart = nil;
---When set to true, the script editor and command bar will show an
---autocomplete menu while writing.
---
Studio.EnableAutocomplete = nil;
---
Studio.EnableAutocompleteDocView = nil;
---
Studio.EnableCoreScriptDebugger = nil;
---
Studio.EnableHttpSandboxing = nil;
---
Studio.EnableInternalBetaFeatures = nil;
---
Studio.EnableInternalFeatures = nil;
---
Studio.EnableScriptAnalysis = nil;
---
Studio.EnableScrollbarMarkers = nil;
---
Studio.EnableSignatureHelp = nil;
---
Studio.EnableSignatureHelpDocView = nil;
---
Studio.EnableTemporaryTabs = nil;
---
Studio.EnableTemporaryTabsInExplorer = nil;
---
Studio.EnableTypeHover = nil;
---
Studio.EnableOnTypeAutocomplete = nil;
---Specifies the color of the wavy underline shown when malformed code is
---detected in the script editor.
---
Studio.ErrorColor = nil;
---Sets the highlight color of matches in the script editor's Find Selection
---operation (Ctrl+F).
---
Studio.FindSelectionBackgroundColor = nil;
---Specifies the font used in the script editor.
---
Studio.Font = nil;
---
Studio.FormatOnPaste = nil;
---
Studio.FormatOnType = nil;
---
Studio.FunctionNameColor = nil;
---
Studio.HighlightCurrentLine = nil;
---
Studio.HighlightOccurances = nil;
---Specifies how frequently the hover animation flashes when the mouse is
---hovering over a selectable object in the `Workspace`.
---
Studio.HoverAnimateSpeed = nil;
---
Studio.HoverBoxThickness = nil;
---Specifies the color that the hover selection box uses.
---
Studio.HoverOverColor = nil;
---
Studio.IndentUsingSpaces = nil;
---Sets the text color of built-in Lua keywords.
---
Studio.KeywordColor = nil;
---Sets the thickness of the `Model/PrimaryPart` selection adornee. This
---value is constrained between 0 and 0.05.
---
Studio.LineThickness = nil;
---
Studio.LocalAssetsFolder = nil;
---Specifies whether or not the Lua Debugger feature is enabled.
---
Studio.LuaDebuggerEnabled = nil;
---
Studio.LuaDebuggerEnabledAtStartup = nil;
---
Studio.LuauKeywordColor = nil;
---
Studio.MainVolume = nil;
---Sets the highlight color of double-clicked variables in the script editor.
---
Studio.MatchingWordBackgroundColor = nil;
---The maximum number of lines that can be displayed in the output.
---
Studio.MaximumOutputLines = nil;
---
Studio.MenuItemBackgroundColor = nil;
---
Studio.MethodColor = nil;
---Specifies the color of numbers in Roblox Studio's script editor.
---
Studio.NumberColor = nil;
---If set to true, audio being played will only be heard if the game window
---is being focused on.
---
Studio.OnlyPlayAudiofromWindowinFocus = nil;
---Sets the text color of operator characters in the script editor.
---
Studio.OperatorColor = nil;
---Specifies the font used by the output.
---
Studio.OutputFont = nil;
---Sets the layout mode of the output.
---
Studio.OutputLayoutMode = nil;
---Sets the highest permission level that APIs have to have in order to be
---shown in the Object Browser. See `Enum/PermissionLevelShown` for more
---info.
---
Studio.PermissionLevelShown = nil;
---
Studio.PhysicalDraggersSelectScopeByDefault = nil;
---
Studio.PivotSnapToGeometryColor = nil;
---
Studio.PluginDebuggingEnabled = nil;
---The directory where local plugins are stored.
---
Studio.PluginsDir = nil;
---
Studio.PrimaryTextColor = nil;
---
Studio.PropertyColor = nil;
---Scales how much rendering will be throttled when the game window isn't
---being focused on. In practice, this property isn't very well understood,
---and is probably intended for internal use only.
---
Studio.RenderThrottlePercentage = nil;
---When set to true, Roblox Studio shortcuts will take priority over inputs
---being captured in the game window.
---
Studio.RespectStudioshortcutswhengamehasfocus = nil;
---
Studio.RulerColor = nil;
---
Studio.Rulers = nil;
---
Studio.RuntimeUndoBehavior = nil;
---
Studio.ScriptEditorColorPreset = nil;
---
Studio.ScriptEditorScrollbarBackgroundColor = nil;
---
Studio.ScriptEditorScrollbarHandleColor = nil;
---
Studio.ScriptEditorMenuBorderColor = nil;
---
Studio.ScriptEditorShouldShowPluginMethods = nil;
---The time (in seconds) a script can wait to be resumed before timing out.
---
Studio.ScriptTimeoutLength = nil;
---
Studio.ScrollPastLastLine = nil;
---
Studio.SearchContentForCoreScripts = nil;
---
Studio.SecondaryTextColor = nil;
---The color of the selection box used with object selections in the
---`Workspace`
---
Studio.SelectColor = nil;
---Sets the color of the `Model/PrimaryPart` selection box.
---
Studio.SelectHoverColor = nil;
---
Studio.SelectedMenuItemBackgroundColor = nil;
---
Studio.SelectedTextColor = nil;
---Sets the background color of selected text in the script editor.
---
Studio.SelectionBackgroundColor = nil;
---Sets the text color of selected text in the script editor.
---
Studio.SelectionColor = nil;
---
Studio.SelectionHighlightThickness = nil;
---An unused Roblox Studio setting that does not appear to have any
---functionality.
---
Studio.ServerAudioBehavior = nil;
---
Studio.SetPivotofImportedParts = nil;
---If set to true, the `CoreGui` will be visible in the Explorer while the
---game is running.
---
Studio.ShowCoreGUIinExplorerwhilePlaying = nil;
---
Studio.ShowDeploymentWarnings = nil;
---If set to true, basic diagnostic information is shown in the bottom right.
---
Studio.ShowDiagnosticsBar = nil;
---
Studio.ShowFileSyncService = nil;
---
Studio.ShowHiddenObjectsinExplorer = nil;
---If set to true, hovering over an object in the `Workspace` will show a
---selection box.
---
Studio.ShowHoverOver = nil;
---
Studio.ShowLightGuides = nil;
---
Studio.ShowNavigationLabels = nil;
---When set to true, the navigation mesh used by the `PathfindingService`
---will be visualized.
---
Studio.ShowNavigationMesh = nil;
---
Studio.ShowPathfindingLinks = nil;
---When set to true, the `PluginGuiService` will be shown in Roblox Studio's
---explorer.
---
Studio.ShowPluginGUIServiceinExplorer = nil;
---If set to true, certain internal error messages regarding the QT framework
---that Roblox uses will be shown in the output.
---
Studio.ShowQTwarningsinoutput = nil;
---
Studio.ShowWhitespace = nil;
---
Studio.ShowplusbuttononhoverinExplorer = nil;
---
Studio.ShowCorePackagesInExplorer = nil;
---
Studio.SkipClosingBracketsandQuotes = nil;
---Specifies the color of strings in the script editor.
---
Studio.StringColor = nil;
---Specifies how many spaces are used to represent a tab in the script
---editor.
---
Studio.TabWidth = nil;
---Specifies the color of normal text in the script editor.
---
Studio.TextColor = nil;
---If set to true, text in the script editor will be wrapped.
---
Studio.TextWrapping = nil;
---The Theme property is used to get/set the current `StudioTheme` used by
---`Studio`.
---
---This is intended for use within `Plugin|Plugins`, but will also execute in
---the Command Line. You can access the function via:
---
---```lua
---settings().Studio.Theme
---```
---
---For instance, if you would like to print the current Studio theme:
---
---```lua
---print("The current Studio theme is:", settings().Studio.Theme)
---```
---
Studio.Theme = nil;
---Specifies the color scheme of Roblox Studio.
---
Studio.UITheme = nil;
---
Studio.UseBoundingBoxMoveHandles = nil;
---Specifies the color of the wavy underline shown when the script analyzer
---picks up a problem that should be addressed in the script editor.
---
Studio.WarningColor = nil;
---
Studio.WhitespaceColor = nil;
---@return Array
---The **GetAvailableThemes()** function returns a list of
---`StudioTheme|StudioThemes` available in `Studio`. You can access the
---function via:
---
---```
---settings().Studio:GetAvailableThemes()
---```
---
Studio.GetAvailableThemes = function(self) end;
---@class RBXScriptSignal.ThemeChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ThemeChanged, callback: fun()): RBXScriptConnection
---The **ThemeChanged** event fires when Studio's `Studio/Theme|Theme`
---changes. The best use of this event is to get the colors from the theme
---that changed and update your plugin's UI accordingly.
---
Studio.ThemeChanged = nil;
---@class StudioAssetService : Instance
local StudioAssetService;
---@param instances Objects
---@return string
StudioAssetService.SerializeInstances = function(self, instances) end;
---@class StudioData : Instance
---@field public EnableScriptCollabByDefaultOnLoad bool
---@field public EnableTeamCreateStreamingOnLoad bool
---@field public SrcPlaceId int64
---@field public SrcUniverseId int64
local StudioData;
---
StudioData.EnableScriptCollabByDefaultOnLoad = nil;
---
StudioData.EnableTeamCreateStreamingOnLoad = nil;
---
StudioData.SrcPlaceId = nil;
---
StudioData.SrcUniverseId = nil;
---@class StudioDeviceEmulatorService : Instance
---@field public CurrentDeviceIdChanged RBXScriptSignal.CurrentDeviceIdChanged
---@field public OrientationChanged RBXScriptSignal.OrientationChanged
local StudioDeviceEmulatorService;
---@return string
StudioDeviceEmulatorService.GetCurrentDeviceId = function(self) end;
---@param orientation ScreenOrientation
---@return void
StudioDeviceEmulatorService.SetCurrentOrientation = function(self, orientation) end;
---@return ScreenOrientation
StudioDeviceEmulatorService.GetCurrentOrientation = function(self) end;
---@param deviceId string
---@return void
StudioDeviceEmulatorService.SetCurrentDeviceId = function(self, deviceId) end;
---@param deviceId string
---@param resolution Vector2
---@return bool
StudioDeviceEmulatorService.EmulatePCDeviceWithResolution = function(self, deviceId, resolution) end;
---@param deviceId string
---@return bool
StudioDeviceEmulatorService.HasDeviceWithId = function(self, deviceId) end;
---@class RBXScriptSignal.CurrentDeviceIdChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.CurrentDeviceIdChanged, callback: fun()): RBXScriptConnection
---
StudioDeviceEmulatorService.CurrentDeviceIdChanged = nil;
---@class RBXScriptSignal.OrientationChanged : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OrientationChanged, callback: fun()): RBXScriptConnection
---
StudioDeviceEmulatorService.OrientationChanged = nil;
---@class StudioHighDpiService : Instance
local StudioHighDpiService;
---@return bool
StudioHighDpiService.IsNotHighDPIAwareBuild = function(self) end;
---@class StudioPublishService : Instance
local StudioPublishService;
---@param placeName string
---@param universeName string
---@return void
StudioPublishService.SetUploadNames = function(self, placeName, universeName) end;
---@param universeId int64
---@param placeId int64
---@param groupId int64
---@param isPublish bool
---@param publishParameters Variant
---@return void
StudioPublishService.PublishAs = function(self, universeId, placeId, groupId, isPublish, publishParameters) end;
---@param shouldTurnOnTcOnPublish bool
---@param newPlaceName string
---@return void
StudioPublishService.SetTeamCreateOnPublishInfo = function(self, shouldTurnOnTcOnPublish, newPlaceName) end;
---@class StudioScriptDebugEventListener : Instance
local StudioScriptDebugEventListener;
---@class StudioService : Instance
---@field public ActiveScript Instance
---@field public AlignDraggedObjects bool
---@field public DraggerSolveConstraints bool
---@field public DrawConstraintsOnTop bool
---@field public GridSize float
---@field public HoverInstance Instance
---@field public InstalledPluginData string
---@field public PivotSnapToGeometry bool
---@field public RotateIncrement float
---@field public ShowActiveInstanceHighlight bool
---@field public ShowConstraintDetails bool
---@field public StudioLocaleId string
---@field public UseLocalSpace bool
---@field public GameNameUpdated RBXScriptSignal.GameNameUpdated
---@field public GamePublishFinished RBXScriptSignal.GamePublishFinished
---@field public OnConvertToPackageResult RBXScriptSignal.OnConvertToPackageResult
---@field public OnImportFromRoblox RBXScriptSignal.OnImportFromRoblox
---@field public OnOpenConvertToPackagePlugin RBXScriptSignal.OnOpenConvertToPackagePlugin
---@field public OnOpenGameSettings RBXScriptSignal.OnOpenGameSettings
---@field public OnOpenManagePackagePlugin RBXScriptSignal.OnOpenManagePackagePlugin
---@field public OnPluginInstalledFromToolbox RBXScriptSignal.OnPluginInstalledFromToolbox
---@field public OnPluginInstalledFromWeb RBXScriptSignal.OnPluginInstalledFromWeb
---@field public OnPublishAsPlugin RBXScriptSignal.OnPublishAsPlugin
---@field public OnPublishPlaceToRoblox RBXScriptSignal.OnPublishPlaceToRoblox
---@field public OnSaveOrPublishPlaceToRoblox RBXScriptSignal.OnSaveOrPublishPlaceToRoblox
---@field public OnSaveToRoblox RBXScriptSignal.OnSaveToRoblox
---@field public PromptTransformPluginCheckEnable RBXScriptSignal.PromptTransformPluginCheckEnable
---@field public SaveLocallyAsComplete RBXScriptSignal.SaveLocallyAsComplete
---StudioService provides access to configuration of Roblox Studio, allows
---importing files from the user's file system, and other miscellaneous
---information. It is intended to be used by `Plugin`s in order to provide a
---consistent user experience.
---
---- Plugins that allow the user to move objects may find
---  `StudioService/GridSize|GridSize`,
---  `StudioService/RotateIncrement|RotateIncrement` and
---  `StudioService/UseLocalSpace|UseLocalSpace` useful.
---- Plugins that require the user to import files should use
---  `StudioService/PromptImportFile|PromptImportFile` or
---  `StudioService/PromptImportFiles|PromptImportFiles` in order to receive
---  `File` objects.
---- Plugins that display icons of Instance classes can use
---  `StudioService/GetClassIcon|GetClassIcon`.
---- Plugins that care about which script is currently being edited (if any) can
---  read this from `StudioService/ActiveScript|ActiveScript`.
---
local StudioService;
---**ActiveScript** refers to the `LuaSourceContainer` currently being edited
---by the user. If the user is not editing a script, this will be `nil`.
---Below is an example that shows how you can use this property to measure
---for how long a script was active.
---
---```lua
---local startTime = os.time()
---local activeScript
---local function onActiveScriptChanged(newActiveScript)
---	if newActiveScript ~= activeScript then
---		local deltaTime = os.time() - startTime
---		print(("You edited %s for %d:%2.d"):format(activeScript.Name, math.floor(deltaTime / 60), deltaTime % 60))
---	end
---	startTime = os.time()
---	activeScript = newActiveScript
---end
---game:GetService("StudioService"):GetPropertyChangedSignal("ActiveScript"):Connect(onActiveScriptChanged)
---```
---
StudioService.ActiveScript = nil;
---
StudioService.AlignDraggedObjects = nil;
---
StudioService.DraggerSolveConstraints = nil;
---
StudioService.DrawConstraintsOnTop = nil;
---**GridSize** determines the distance in studs by which studio's drag and
---move tools move objects each tick. This is set by the user Model tab under
---the "Snap to Grid" section.
---
---![Studio "snap to grid" UI][1]
---
---[1]: /assets/blt8ea442f1baf0663d/SnapToGrid.jpg
---
StudioService.GridSize = nil;
---
StudioService.HoverInstance = nil;
---
StudioService.InstalledPluginData = nil;
---
StudioService.PivotSnapToGeometry = nil;
---**RotateIncrement** determines the angle in degrees by which studio's
---rotation tool will rotate selected objects each tick. This is set by the
---user Model tab under the "Snap to Grid" section.
---
---![Studio "snap to grid" UI][1]
---
---The table below shows how the rotation handles appear while dragging.
---Notice how lower values render more axles. In these images,
---`StudioService/UseLocalSpace|UseLocalSpace` is `true`.
---
---<table>
---<thead>
---<tr>
---  <td>RotateIncrement</td>
---  <td>Image</td>
---</tr>
---</thead>
---<tbody>
---<tr>
---  <td><code>22.5</code></td>
---  <td><img src="/assets/bltfbafe587b43fff88/StudioService.RotateIncrement.22.5.jpg" /></td>
---</tr>
---<tr>
---  <td><code>90.0</code></td>
---  <td><img src="/assets/blt72e458401421d679/StudioService.RotateIncrement.90.jpg" /></td>
---</tr>
---</tbody>
---</table>
---
---[1]: /assets/blt8ea442f1baf0663d/SnapToGrid.jpg
---
StudioService.RotateIncrement = nil;
---
StudioService.ShowActiveInstanceHighlight = nil;
---
StudioService.ShowConstraintDetails = nil;
---The **StudioLocaleId** property contains the locale currently in-use by
---Studio, e.g. `en_US`. It is useful when localizing plugins.
---
---Below is a trivial example of localization based on the value returned by
---this function.
---
---```lua
---local locale = game:GetService("StudioService").StudioLocaleId
---if locale == "en_US" then
---   print("Howdy, ya'll")
---elseif locale == "en_GB" then
---   print("'Ello, gov'na")
---elseif locale:sub(1, 2) == "en" then
---   print("Hello")
---elseif locale == "fr_FR" then
---   print("Bonjour")
---end
---```
---
StudioService.StudioLocaleId = nil;
---**UseLocalSpace** determines whether the studio movement/rotation tools
---will manipulate a part's `BasePart/CFrame|CFrame` using the local space of
---an object or global space. By default, this setting is toggled with
---<kbd>Ctrl-L</kbd>. Plugins can read from this property if they implement
---their own object movement tools.
---
---The table below shows how movement/rotation tools change when working with
---parts. Notice how when UseLocalSpace is false, the movement tools align
---with the global axes, and when true the movement tools align with the
---part's local axes.
---
---<table>
---<thead>
---<tr>
---<td>UseLocalSpace</td>
---<td>Movement</td>
---<td>Rotation</td>
---</tr>
---</thead>
---<tbody>
---<tr>
---<td><code>true</code></td>
---  <td><img src="/assets/blt430c3ecf09c42eec/StudioService.UseLocalSpace.true.jpg" /></td>
---  <td><img src="/assets/blta4d9732d2d9d6d85/StudioService.UseLocalSpace.true.rotation.jpg" /></td>
---</tr>
---<tr>
---<td><code>false</code></td>
---  <td><img src="/assets/blt8175598ca3ea1650/StudioService.UseLocalSpace.false.jpg" /></td>
---  <td><img src="/assets/bltc26cf9b88a51df6b/StudioService.UseLocalSpace.false.rotation.jpg" /></td>
---</tr>
---</tbody>
---</table>
---
StudioService.UseLocalSpace = nil;
---@param instances Objects
---@return string
StudioService.SerializeInstances = function(self, instances) end;
---@return int64
---Returns the studio user's userId if they're logged in, otherwise
---returns 0.
---
StudioService.GetUserId = function(self) end;
---@param stringToCopy string
---@return void
StudioService.CopyToClipboard = function(self, stringToCopy) end;
---@return bool
StudioService.GetUserIsInTeamCreateToggleRamp = function(self) end;
---@param assetId int64
---@return void
StudioService.UninstallPlugin = function(self, assetId) end;
---@param newName string
---@return void
StudioService.DEPRECATED_SetDocumentDisplayName = function(self, newName) end;
---@return void
StudioService.UpdatePluginManagement = function(self) end;
---@param newName string
---@return void
StudioService.SetUniverseDisplayName = function(self, newName) end;
---@param fileTypeFilter Array
---@return Instance
---This function prompts the current Studio user to select one file, which
---will then be loaded as a `File`.
---
---See also:
---
---- `StudioService/PromptImportFiles`, the same function but for loading a
---  list of files instead of a single file
---
StudioService.PromptImportFile = function(self, fileTypeFilter) end;
---@param placeId int64
---@return void
StudioService.ShowPlaceVersionHistoryDialog = function(self, placeId) end;
---@param turnOn bool
---@return void
StudioService.DEPRECATED_SetTurnOnTeamCreateOnPublish = function(self, turnOn) end;
---@return bool
StudioService.HasInternalPermission = function(self) end;
---@param fileTypeFilter Array
---@return Objects
---This function prompts the current Studio user to select one or more files,
---which will then be loaded as `File|Files`.
---
---Throws an error if the fileTypeFilter was an empty list.
---
---See also:
---
---- `StudioService/PromptImportFile`, the same function but for loading a
---  single file instead of a list of files
---
StudioService.PromptImportFiles = function(self, fileTypeFilter) end;
---@param assetId int64
---@return bool
StudioService.IsPluginInstalled = function(self, assetId) end;
---@param badgeId int64
---@return string
StudioService.GetBadgeConfigureUrl = function(self, badgeId) end;
---@param assetId int64
---@param currentAssetVersion int64
---@return bool
StudioService.IsPluginUpToDate = function(self, assetId, currentAssetVersion) end;
---@return string
StudioService.GetBadgeUploadUrl = function(self) end;
---@param url string
---@return void
StudioService.OpenInBrowser_DONOTUSE = function(self, url) end;
---@param className string
---@return Dictionary
---**GetClassIcon** provides a dictionary that allows the display of a class'
---Explorer window icon, e.g. calling this function with "Part" returns
---property values that display the part icon from the Explorer window.
---
---Below is a literal table representation of the value returned when this
---function is called with `"Part"`.
---
---```
---{
---	Image = "rbxasset://textures/ClassImages.png",
---	ImageRectOffset = Vector2.new(16, 0),
---	ImageRectSize = Vector2.new(16, 16)
---}
---```
---
---The utility function below may prove useful when displaying class icons:
---
---```lua
---local StudioService = game:GetService("StudioService")
---local imageLabel = script.Parent
---local function displayClassIcon(image, className)
---	for k, v in pairs(StudioService:GetClassIcon(className)) do
---		image[k] = v -- Set property
---	end
---end
---displayClassIcon(imageLabel, "Part")
---```
---
StudioService.GetClassIcon = function(self, className) end;
---@param universeId int64
---@param placeId int64
---@param groupId int64
---@return void
StudioService.PublishAs = function(self, universeId, placeId, groupId) end;
---@return bool
StudioService.GetPlaceIsPersistedToCloud = function(self) end;
---@param category string
---@return Dictionary
StudioService.GetResourceByCategory = function(self, category) end;
---@param assetId int64
---@param assetVersionId int64
---@return void
StudioService.TryInstallPlugin = function(self, assetId, assetVersionId) end;
---@param id int64
---@return void
StudioService.AnimationIdSelected = function(self, id) end;
---@return string
StudioService.GetTermsOfUseUrl = function(self) end;
---@return string
StudioService.GetStartupPluginId = function(self) end;
---@return void
StudioService.RefreshDocumentDisplayName = function(self) end;
---@param assetId int64
---@param state bool
---@return void
StudioService.SetPluginEnabled = function(self, assetId, state) end;
---@return string
StudioService.GetStartupAssetId = function(self) end;
---@param closeMode StudioCloseMode
---@return void
StudioService.RequestClose = function(self, closeMode) end;
---@return void
StudioService.EmitPlacePublishedSignal = function(self) end;
---@param uploadUrl string
---@return void
StudioService.ConvertToPackageUpload = function(self, uploadUrl) end;
---@param origin Vector3
---@param direction Vector3
---@param raycastParams RaycastParams
---@return RaycastResult
StudioService.GizmoRaycast = function(self, origin, direction, raycastParams) end;
---@param showGameSelect bool
---@param isPublish bool
---@param closeMode StudioCloseMode
---@return void
StudioService.ShowSaveOrPublishPlaceToRoblox = function(self, showGameSelect, isPublish, closeMode) end;
---@return void
StudioService.ShowPublishToRoblox = function(self) end;
---@class RBXScriptSignal.GameNameUpdated : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.GameNameUpdated, callback: fun(name: string)): RBXScriptConnection
---
StudioService.GameNameUpdated = nil;
---@class RBXScriptSignal.GamePublishFinished : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.GamePublishFinished, callback: fun(success: bool, gameId: int64)): RBXScriptConnection
---
StudioService.GamePublishFinished = nil;
---@class RBXScriptSignal.OnConvertToPackageResult : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnConvertToPackageResult, callback: fun(isSuccessful: bool, errorMessage: string)): RBXScriptConnection
---
StudioService.OnConvertToPackageResult = nil;
---@class RBXScriptSignal.OnImportFromRoblox : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnImportFromRoblox, callback: fun()): RBXScriptConnection
---
StudioService.OnImportFromRoblox = nil;
---@class RBXScriptSignal.OnOpenConvertToPackagePlugin : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnOpenConvertToPackagePlugin, callback: fun(instances: Objects, name: string)): RBXScriptConnection
---
StudioService.OnOpenConvertToPackagePlugin = nil;
---@class RBXScriptSignal.OnOpenGameSettings : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnOpenGameSettings, callback: fun(pageIdentifier: string)): RBXScriptConnection
---
StudioService.OnOpenGameSettings = nil;
---@class RBXScriptSignal.OnOpenManagePackagePlugin : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnOpenManagePackagePlugin, callback: fun(userId: int64, assetId: int64)): RBXScriptConnection
---
StudioService.OnOpenManagePackagePlugin = nil;
---@class RBXScriptSignal.OnPluginInstalledFromToolbox : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnPluginInstalledFromToolbox, callback: fun()): RBXScriptConnection
---
StudioService.OnPluginInstalledFromToolbox = nil;
---@class RBXScriptSignal.OnPluginInstalledFromWeb : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnPluginInstalledFromWeb, callback: fun(pluginId: string)): RBXScriptConnection
---
StudioService.OnPluginInstalledFromWeb = nil;
---@class RBXScriptSignal.OnPublishAsPlugin : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnPublishAsPlugin, callback: fun(instances: Objects)): RBXScriptConnection
---
StudioService.OnPublishAsPlugin = nil;
---@class RBXScriptSignal.OnPublishPlaceToRoblox : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnPublishPlaceToRoblox, callback: fun(isOverwritePublish: bool)): RBXScriptConnection
---
StudioService.OnPublishPlaceToRoblox = nil;
---@class RBXScriptSignal.OnSaveOrPublishPlaceToRoblox : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnSaveOrPublishPlaceToRoblox, callback: fun(showGameSelect: bool, isPublish: bool, closeMode: StudioCloseMode)): RBXScriptConnection
---
StudioService.OnSaveOrPublishPlaceToRoblox = nil;
---@class RBXScriptSignal.OnSaveToRoblox : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.OnSaveToRoblox, callback: fun(instances: Objects)): RBXScriptConnection
---
StudioService.OnSaveToRoblox = nil;
---@class RBXScriptSignal.PromptTransformPluginCheckEnable : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PromptTransformPluginCheckEnable, callback: fun()): RBXScriptConnection
---
StudioService.PromptTransformPluginCheckEnable = nil;
---@class RBXScriptSignal.SaveLocallyAsComplete : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.SaveLocallyAsComplete, callback: fun(success: bool)): RBXScriptConnection
---
StudioService.SaveLocallyAsComplete = nil;
---@class StudioTheme : Instance
local StudioTheme;
---@param styleguideitem StudioStyleGuideColor
---@param modifier StudioStyleGuideModifier
---@return Color3
---The **GetColor()** function returns the `DataType/Color3` corresponding to
---the arguments provided. For instance, if you would like to get the
---`DataType/Color3` of the Studio "MainButton" when it's **disabled**, you
---can use the following code:
---
---````lua
---settings().Studio.Theme:GetColor(Enum.StudioStyleGuideColor.MainButton, Enum.StudioStyleGuideModifier.Disabled)
---```lua
---
---See the `enum/StudioStyleGuideColor|StudioStyleGuideColor` reference for a list of Studio elements and `enum/StudioStyleGuideModifier|StudioStyleGuideModifier` for a list of modifiers.
---````
---
StudioTheme.GetColor = function(self, styleguideitem, modifier) end;
---@class SunRaysEffect : PostEffect, Instance
---@field public Intensity float
---@field public Spread float
---The **SunRaysEffect** renders a halo of light around sun. The halo is
---shaped/blocked by world objects between the `Workspace/CurrentCamera` and the
---sun.
---
---Like other post-processing effects, **SunRaysEffect** will only work while
---`PostEffect/Enabled|Enabled` and when parented to `Lighting` or
---`Workspace/CurrentCamera`. Also, it may not render on low-end devices, and it
---may render differently depending on your Studio settings (see the **Quality
---Level** settings in **Rendering** &rarr; **Performance**).
---
---For more details on this effect and others, see
---[Post-Processing Effects](/building-and-visuals/lighting-and-effects/post-processing-effects).
---
local SunRaysEffect;
---Intensity determines the opacity of the sun rays. Values closer to 0 are
---less visible, while values closer to 1 become more visible.
---
SunRaysEffect.Intensity = nil;
---Spread determines how wide the sun rays will spread across the sky. Its
---value should be set between 0 and 1 as values outside that range have
---undefined behavior.
---
SunRaysEffect.Spread = nil;
---@class SurfaceAppearance : Instance
---@field public AlphaMode AlphaMode
---@field public ColorMap Content
---@field public MetalnessMap Content
---@field public NormalMap Content
---@field public RoughnessMap Content
---@field public TexturePack Content
---SurfaceAppearance objects allow developers to override the appearance of a
---`MeshPart` with advanced graphics options. Most notably, a SurfaceAppearance
---can apply a set of PBR textures to a mesh.
---
---PBR is short for Physically Based Rendering, which refers to a common texture
---format for defining extra physical details in games. Because this format is
---widely used, it's easy to take meshes and textures made in 3rd party editing
---software and import them into Roblox. It's also easy to find PBR format
---content from various 3rd party stores such as [SketchFab][1], [TurboSquid][2],
---[CGTrader][3].
---
---For PBR textures to be visible in-game, when you change a texture property of
---SurfaceAppearance you should wait until you see the "Successfully uploaded
---compressed SurfaceAppearance." message in the output window. If your PBR
---textures are not visible, try changing a texture property.
---
---Here is a mesh with PBR textures [found on Turbosquid][5] imported into
---Roblox.
---
---![TextureId vs SurfaceAppearance][4]
---
---![Pine trees][6]
---
---SurfaceAppearance's `SurfaceAppearance/AlphaMode|AlphaMode` property can also
---be to improve the look of partially transparent textures on MeshParts by
---fixing various sorting issues.
---
---How a MeshPart with a SurfaceAppearance looks to users depends on their device
---and their graphics quality level. You may want to preview your content with
---different quality level settings.
---
---Note:
---
---- Most SurfaceAppearance properties cannot be modified by scripts in-game.
---  This is because the Roblox engine needs to do some pre-processing to display
---  a SurfaceAppearance, and this is usually too expensive to perform in-game.
---
---[1]:
---  https://sketchfab.com/search?q=pbr%20object&sort_by=-relevance&type=models
---[2]: https://www.turbosquid.com/Search/3D-Models/free/pbr
---[3]: http://cgtrader.com/pbr-3d-models?polygons=lt_5k
---[4]: /assets/bltd50936403ef1c135/meshpart-vs-sa.png
---[5]:
---  https://www.turbosquid.com/3d-models/3d-model-fantasy-sword---ready/1119210
---[6]: /assets/bltab4ab6ba1c003d12/pinetrees.png
---
local SurfaceAppearance;
---This property determines how the alpha channel of the
---`SurfaceAppearance/ColorMap` of a `SurfaceAppearance` is used.
---
---When AlphaMode is set to `Enum/AlphaMode|Transparency` and the
---`BasePart/Transparency|MeshPart.Transparency` is set to 0, opaque pixels
---in the SurfaceAppearance's ColorMap will render as completely opaque in
---the 3D scene. This solves various problems for textures with different
---transparent and opaque areas, such as foliage. When parts of the surface
---are fully opaque, the Roblox engine can render them with proper
---depth-based occlusion. Opaque surfaces also generally work better with
---depth-based effects like DepthOfField, glass and water refraction, and
---water reflection.
---
---MeshPart.TextureId vs SurfaceAppearance:
---
---![Foliage comparison][1]
---
---Here is an example of a fern color map. Only the pixels on the leaves have
---full alpha.
---
---![Alpha fern][2]
---
---[1]: /assets/bltc11b6d62483163b0/leaves-comparison.gif
---[2]: /assets/blt1a2e3175d2522842/fern-color.png
---
SurfaceAppearance.AlphaMode = nil;
---This property determines the color and opacity of the surface. This
---texture is sometimes called the albedo texture. The alpha channel of this
---texture controls its opacity, which behaves differently based on the
---`SurfaceAppearance/AlphaMode` setting.
---
SurfaceAppearance.ColorMap = nil;
---This property determines which parts of the surface are metal and are
---non-metal. A metalness map is a grayscale image where black pixels
---correspond to non-metals and white pixels correspond to metals.
---
---Metals only reflect light the same color as the metal, and they reflect
---much more light than non-metals. Most materials in the real world can be
---categorized either metals or non-metals. For this reason, most pixels in a
---metalness map will be either pure black or pure white. Values in between
---are typically used to simulate dirt or grunge on top of an underlying
---metal area.
---
---Here's an example of a piece of metal with a layer of paint on top. Most
---paints are non-metallic, so the metalness map is black everywhere except
---on unpainted metal parts and spots where the paint has chipped away and
---the underlying metal is visible.
---
---![Metalness jetpack][1]
---
---![Map explanation][2]
---
---#### Note
---
---- When `Lighting/EnvironmentSpecularScale` is 0, metalness has no effect.
---  For the most realistic reflections, setting EnvironmentSpecularScale and
---  `Lighting/EnvironmentDiffuseScale` to 1, and `Lighting/Ambient` and
---  `Lighting/OutdoorAmbient` to (0,0,0) is recommended.
---
---[1]: /assets/blt0a658c7367d5cdab/jetpack.gif
---[2]: /assets/blt96558be20f7b7a1a/metalness-explained.png
---
SurfaceAppearance.MetalnessMap = nil;
---This property modifies the lighting of the surface by adding bumps, dents,
---cracks, and curves without adding more polygons.
---
---Normal maps are RGB images that modify the surface's normal vector used
---for lighting calculations. The R, G, and B channels of the NormalMap
---correspond to the X, Y, and Z components of the local surface vector
---respectively, and byte values of 0 and 255 for each channel correspond
---linearly to normal vector components of -1 and 1.016 respectively. This
---range is stretched slightly from -1 to 1 so that a byte value of 127 maps
---to exactly 0. The normal vector's Z axis is always defined as the
---direction of the underlying mesh's normal. A uniform (127,127,255) image
---translates to a completely flat normal map where the normal is everywhere
---perpendicular to the mesh surface. This format is called “tangent space”
---normal maps. Roblox does not support world space or object space normal
---maps.
---
---Incorrectly flipped normal components can make bumps appear like indents.
---If you import a normal map and notice the lighting looks off, you may need
---to invert the G channel of the image. The X and Y axes of the tangent
---space frame correspond to the X and Y directions in the image after it's
---transformed by the mesh UVs. If you view your normal map in an image
---editor as if it were displayed on a surface, normals pointing towards the
---right side of the screen should appear more red, and normals pointing
---towards the top side of your screen should appear more green.
---
---![Bread normal map][1]
---
---The terms “DirectX format” and “OpenGL format” are sometimes used to
---describe whether the G channel of the normal map is inverted or not.
---Roblox expects the OpenGL format.
---
---#### Note
---
---Roblox expects imported meshes to include tangents. Modeling software may
---also refer to this as “tangent space” information. If you apply a normal
---map and it does not seem to make any visual difference, you may need to
---re-export your mesh along with its tangent information from modeling
---software.
---
---[1]: /assets/blt013e67a5f211cd0d/bread-nmap.png
---
SurfaceAppearance.NormalMap = nil;
---This property determines the apparent roughness across the surface. A
---roughness map is a grayscale image where black pixels correspond to a
---maximally smooth surface, and white pixels correspond to a maximally rough
---surface.
---
---Roughness refers to how much variation the surface has on a very small
---scale. Reflections on smooth surfaces are sharp and concentrated.
---Reflections on rough surfaces are more blurry and dispersed.
---
SurfaceAppearance.RoughnessMap = nil;
---
SurfaceAppearance.TexturePack = nil;
---@class SurfaceGui : LayerCollector, GuiBase2d, GuiBase, Instance
---@field public Active bool
---@field public Adornee Instance
---@field public AlwaysOnTop bool
---@field public Brightness float
---@field public CanvasSize Vector2
---@field public ClipsDescendants bool
---@field public Face NormalId
---@field public LightInfluence float
---@field public PixelsPerStud float
---@field public SizingMode SurfaceGuiSizingMode
---@field public ToolPunchThroughDistance float
---@field public ZOffset float
---**Note** SurfaceGuis must be descendants of PlayerGui in order to know the
---player who is interacting with it.Allows for the rendering of GUI elements
---onto a part's surface in the 3D world, whilst allowing for basic user
---interaction to occur.
---
---##### Caching static UI for performance improvements
---
---A Gui's appearance is cached until one of the following events occurs:
---
---- A descendant is added to the Gui.
---- A descendant is removed from the Gui.
---- A property of a descendant of the Gui changes.
---- A property of the Gui changes.
---
---If any of these events occur, the Gui's appearance will be recomputed the next
---frame it gets rendered.
---
local SurfaceGui;
---Whether or not mouse events will be passed to objects layered below.
---
SurfaceGui.Active = nil;
---Sets the object that the SurfaceGui is adorned too. In other words, this
---defines which `BasePart` the SurfaceGui is attached to.
---
SurfaceGui.Adornee = nil;
---Determines whether the SurfaceGui will render over top of 3D content, or
---be occluded by it.
---
---When set to false, the SurfaceGui will render like other 3D content, and
---will be occluded by other 3D objects.
---
---When set to true, it always renders on top of 3D content, and the
---appearance changes significantly:
---
---- Colors match how they appear inside a `ScreenGui`.
---- Text may appear sharper on high DPI devices.
---- `SurfaceGui/LightInfluence` is treated as though it was 0.
---- `SurfaceGui/Brightness` has no effect.
---
SurfaceGui.AlwaysOnTop = nil;
---**Brightness** determines the factor by which the GUI's emitted light is
---scaled. By default, this property is 1 and can be set to any number on the
---range [0, 1000].
---
---By modifying this property, the apparent brightness of a GUI can be better
---matched to its environment. For instance, a video billboard like those
---found in Times Square can be made brighter to be clearly visible on a
---bright day.
---
---This property won't produce any effect in the following scenarios wherein
---the GUI does not emit light.:
---
---- When `SurfaceGui/AlwaysOnTop|AlwaysOnTop` is true, the color of each
---  pixel is the color shown on-screen.
---- When `SurfaceGui/LightInfluence|LightInfluence` is 1, all light from the
---  GUI is reflected from the environment instead of being emit.
---
SurfaceGui.Brightness = nil;
---The size of a 'virtual screen', in 'virtual pixels', which makes
---SurfaceGuis pixel-to-pixel compatible with ScreenGuis.
---
SurfaceGui.CanvasSize = nil;
---When set to true, portions of GuiObjects that fall outside of the
---SurfaceGui's canvas borders will not be drawn.
---
---Even when this property is false, objects that are completely outside of
---the canvas of the SurfaceGui will not render.
---
SurfaceGui.ClipsDescendants = nil;
---The face that the SurfaceGui is rendered on.
---
SurfaceGui.Face = nil;
---Controls how much the SurfaceGui is influenced by the lighting in the game
---world.
---
SurfaceGui.LightInfluence = nil;
---**PixelsPerStud** determines the density of pixels used for each
---world-space stud to render the contents of the SurfaceGui.
---
---Higher values will cause the various `GuiObject` within to appear smaller
---if they are kept the same size. Conversely, lower values will cause
---objects to appear larger. However, if the GuiObjects are scaled
---proportionally (either by using a `UIScale` or modifying
---`GuiObject/Size|Size` or `TextLabel/TextSize` etc.), this property allows
---for higher definition to be used. It's important to select a value based
---on how far away you expect a player to view the SurfaceGui. Be mindful
---that a large pixel density could negatively affect performance if the face
---of the adorned part is large enough.
---
---![Three parts with SurfaceGuis, each including a 200x50 TextLabel within them. From left-to-right, their PixelsPerStud values are 25, 50 and 75. These values cause the apparent size of each TextLabel to change.][1]
---
---[1]: /assets/blt1fd89a45f9144a8b/SurfaceGui.PixelsPerStud.jpg
---
SurfaceGui.PixelsPerStud = nil;
---When set to `Enum/SurfaceGuiSizingMode/FixedSize`, SurfaceGui renders with
---a fixed size set using `SurfaceGui/CanvasSize`.
---
---When set to `Enum/SurfaceGuiSizingMode/PixelsPerStud`, SurfaceGui renders
---with a variable size based on `SurfaceGui/PixelsPerStud` and the
---SurfaceGui's size in studs.
---
SurfaceGui.SizingMode = nil;
---Sets the distance left clicking starts acting on the surface gui instead
---of the held tool. If a character is within this distance of the surface
---gui, then the tool will not activate on click.
---
SurfaceGui.ToolPunchThroughDistance = nil;
---Offsets the SurfaceGui relative to the normal of the surface it is
---attached to.
---
SurfaceGui.ZOffset = nil;
---@class SurfaceLight : Light, Instance
---@field public Angle float
---@field public Face NormalId
---@field public Range float
---A SurfaceLight is a light source that emits illumination of a specified
---`Light/Color` and `Light/Brightness` from a `SurfaceLight/Face` for a
---specified `SurfaceLight/Range`.
---
---In order for a SurfaceLight to provide illumination, it must be the direct
---child of a `BasePart` or `Attachment` (the part or attachment itself must be a
---descendant of the Workspace). If a SurfaceLight is parented to a part, then
---the light will emanate from the part's selected face(s). If parented to an
---attachment SurfaceLight is equivalent to a `SpotLight`.
---
---For more light types, please see the **see also** section.
---
---## See Also
---
---- `PointLight`
---- `SpotLight`
---
local SurfaceLight;
---The angle of which the light is shone from the SurfaceLight.
---
SurfaceLight.Angle = nil;
---Sets the side of the parent that the SurfaceLight comes from.
---
SurfaceLight.Face = nil;
---The distance from the SurfaceLight's face that will illuminate.
---
SurfaceLight.Range = nil;
---@class SurfaceSelection : PartAdornment, GuiBase3d, GuiBase, Instance
---@field public TargetSurface NormalId
---A **SurfaceSelection** highlights a particular face, the
---`SurfaceSelection/TargetSurface|TargetSurface`, of its
---`PartAdornment/Adornee|Adornee`. The highlight's color is configurable using
---the `GuiBase3d/Color3|Color3` property.
---
---<img src="/assets/blt883782a763fb7fbd/SurfaceSelection.jpg" alt="A screenshot of a SurfaceSelection" width="302" height="153" />
---
---The SurfaceSelection object is typically used by `Plugin` when the user is
---selecting the face of a Part. However, it is not limited to plugin use.
---
local SurfaceSelection;
---Sets which side the SurfaceSelection will appear on, on the adorned
---`BasePart`.
---
SurfaceSelection.TargetSurface = nil;
---@class TaskScheduler : Instance
---@field public SchedulerDutyCycle double
---@field public SchedulerRate double
---@field public ThreadPoolConfig ThreadPoolConfig
---@field public ThreadPoolSize int
---TaskScheduler is a read-only settings class responsible for the Task Scheduler
---feature. Can be found in Roblox Studio's settings with the name _Task
---Scheduler_.
---
local TaskScheduler;
---The average time divided by the average interval of the duty cycle.
---
TaskScheduler.SchedulerDutyCycle = nil;
---The current average rate of the task scheduler.
---
TaskScheduler.SchedulerRate = nil;
---The specified thread pooling configuration for the task scheduler.
---
TaskScheduler.ThreadPoolConfig = nil;
---The current size of the thread pool.
---
TaskScheduler.ThreadPoolSize = nil;
---@class Team : Instance
---@field public AutoAssignable bool
---@field public AutoColorCharacters bool
---@field public ChildOrder int
---@field public Score int
---@field public TeamColor BrickColor
---@field public PlayerAdded RBXScriptSignal.PlayerAdded
---@field public PlayerRemoved RBXScriptSignal.PlayerRemoved
---The `Team` class represents a faction in a Roblox place. The only valid parent
---for a Team is in the `Teams` service. Teams offer a range of features that are
---useful to developers that can be divided into two rough groups:
---
---- Features that work 'out of the box'
---- Features developers can program into their game.
---
---**Built-in Team Behavior **
---
---The following functionality of Teams exists by default and does not require
---the developer to program any custom behavior.
---
---- When part of a Team, the name above a `Player`'s character `Model` will be
---  colored to the `Team/TeamColor`
---- Changing `Player/TeamColor` will cause `Player/Team` to switch to the Team
---  with the corresponding `Team/TeamColor`
---- When using the default player list users will be grouped and displayed
---  together as a team
---- Setting `Player/Neutral` to true will cause the `Player` to be disassociated
---  with the team, however, it will not change `Player/Team` or
---  `Player/TeamColor`
---- When a `Player` joins a game, they will be allocated to the team with
---  `Team/AutoAssignable` set to true that has the fewest players. If no auto
---  assignable team is available, `Player/Neutral` will be set to true
---- When `SpawnLocation/Neutral` is set to false, only players whose
---  `Player/TeamColor` matches `SpawnLocation/TeamColor` can spawn on that
---  `SpawnLocation`
---- When `SpawnLocation/AllowTeamChangeOnTouch` is set to true, a `Player`'s
---  `Player/TeamColor` will change to `SpawnLocation/TeamColor` when their
---  character touches the `SpawnLocation`
---
---**Optional Extended Team Behaviors**
---
---Many developers chose to add the following features to teams in their own
---code.
---
---- Implement checks in weapon code to prevent friendly fire.
---- Implement checks in doors or other features that allow only certain teams to
---  use them
---- Periodically reassign teams to maintain team balance
---
local Team;
---This property determines whether `Player`s will be automatically placed
---onto the `Team` when joining. If multiple teams have this property set to
---true, Roblox will attempt to even the teams out when `Player`s are added.
---
---When a `Player` joins a game they will be assigned to the `Team` with
---`Team/AutoAssignable` set to true that has the fewest players. If no such
---team is available, `Player/Neutral` will be set to true.
---
---Note whilst using this property will help even out teams when players are
---added, it will not do anything when players are removed. For this reason
---developers may wish to implement their own team balancing system.
---
Team.AutoAssignable = nil;
---Historically set whether or not `Player` character models on a team would
---be colored to `Team/TeamColor`.
---
---Developers are advised not to use this property as the script which
---changed the team colors has since been removed from the default character.
---This property is deprecated and should not be used for new work.
---
Team.AutoColorCharacters = nil;
---
Team.ChildOrder = nil;
---This property can be used to store an integer value associated with the
---team. This property offers no additional functionality and is not used by
---any game services.
---
---This property is deprecated and should not be used by developers for new
---work.
---
Team.Score = nil;
---This property sets the color of the `Team`. Determines the
---`Player/TeamColor` property of players who are a member of the team.
---
---A lot of Roblox's default team functionality is based on the team color,
---rather than the name or object. For example, `SpawnLocation`s can be
---assigned to a team via `SpawnLocation/TeamColor`. For this reason it is
---recommended that developers ensure each `Team` has a unique TeamColor.
---
---Any player which is a part of a team will have their name color changed to
---the team's TeamColor property. They will also be put underneath the team
---heading on the player list.
---
Team.TeamColor = nil;
---@return Objects
---Returns a list of `Player`s who are assigned to the `Team`. A `Player` is
---considered assigned if their `Player/Team` property is equal to the `Team`
---and `Player/Neutral` is false.
---
---This function has a number of potential uses, including counting the
---number of players on a `Team` or giving every `Player` on a `Team` a
---`Tool`.
---
Team.GetPlayers = function(self) end;
---@class RBXScriptSignal.PlayerAdded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PlayerAdded, callback: fun(player: Player)): RBXScriptConnection
---Fires whenever a `Player` is assigned to the `Team`. A player is
---considered assigned if their `Player/Team` property is equal to the `Team`
---and `Player/Neutral` is false.
---
---This event is team specific and will only fire when a `Player` joints the
---specific `Team`. Any function connected to this event will be passed the
---`Player` object of the player who joined the team. For example:
---
---    Team.PlayerAdded:Connect(function(player)
---    	print(player.Name.." has joined the team")
---    end)
---
Team.PlayerAdded = nil;
---@class RBXScriptSignal.PlayerRemoved : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.PlayerRemoved, callback: fun(player: Player)): RBXScriptConnection
---Fires whenever a `Player` is removed from a `Team`. This can be due to the
---`Player` leaving the game, `Player/Neutral` being set to true or the
---`Player` joining a different team.
---
---This event is team specific and will only fire when a `Player` leaves the
---specific `Team`. Any function connected to this event will be passed the
---`Player` object of the player who left the team. For example:
---
---    Team.PlayerRemoved:Connect(function(player)
---    	print(player.Name.." has left the team")
---    end)
---
Team.PlayerRemoved = nil;
---@class Teams : Instance
---The Teams service holds a game's `Team` objects. `Team` objects must be
---parented to the Teams service.
---
---Teams offer a range of features that are useful to developers. These can
---broadly be divided into features that work out-of-the-box and features
---developers can program into their game.
---
---**Built-in team behaviour** The following functionality of Teams exists by
---default and does not require the developer to program any custom behaviour.
---
---- When part of a Team, the name above a `Player`'s character `Model` will be
---  colored to the `Team/TeamColor`
---- Changing `Player/TeamColor` will cause `Player/Team` switch to the Team with
---  the corresponding `Team/TeamColor`
---- When using the default player list users will be grouped and displayed by
---  team
---- Setting `Player/Neutral` to true will cause the `Player` to be
---  dis-associated with the team, but will not change `Player/Team` or
---  `Player/TeamColor`
---- When a `Player` joins a game, they will be allocated to the team with
---  `Team/AutoAssignable` set to true that has the fewest players. If no auto
---  assignable team is available, `Player/Neutral` will be set to true
---- When `SpawnLocation/Neutral` is set to false, only players whose
---  `Player/TeamColor` matches `SpawnLocation/TeamColor` can spawn on that
---  `SpawnLocation`
---- When `SpawnLocation/AllowTeamChangeOnTouch` is set to true, a `Player`'s
---  `Player/TeamColor` will change to `SpawnLocation/TeamColor` when their
---  character touches the `SpawnLocation`
---
---**Optional extended team behavior** Many developers chose to add the following
---features to teams in their own code.
---
---- Implement checks for team in weapon code to prevent team killing
---- Implement doors or other features that only certain teams can use
---- Periodically reassign teams to maintain team balance
---
local Teams;
---@return Objects
---The GetTeam function returns a table containing the game's `Team` objects.
---
---Note this will only return Team objects that are directly parented to the
---`Teams` service. For this reason it is recommended developers only parent
---`Team` objects to the `Teams` service and not to other `Instance`s (or to
---each other).
---
Teams.GetTeams = function(self) end;
---@return void
---Evens the number of people on each team. This function does not work
---correctly and should not be used.
---
Teams.RebalanceTeams = function(self) end;
---@class TeleportAsyncResult : Instance
---@field public PrivateServerId string
---@field public ReservedServerAccessCode string
---This class is an instance that is returned by the `TeleportAsync` function
---with information about the teleport.
---
local TeleportAsyncResult;
---The private server ID of the reserved server that the players are being
---teleported to. This field is populated only if the teleport is to a
---reserved server.
---
---This field is not the same as the private server ID of the server that
---initiated the teleport, please see: `DataModel/PrivateServerId`
---
---See also:
---
---For more information on how to teleport players between servers, take a
---look at the [Teleporting Between Places][1] article.
---
---[1]: https://developer.roblox.com/articles/Teleporting-Between-Places
---
TeleportAsyncResult.PrivateServerId = nil;
---The access code of the reserved server that the players are being
---teleported to. This field is populated only if the teleport is to a
---reserved server. This allows developers to perform subsequent teleports to
---this same reserved server.
---
---See also:
---
---For more information on how to teleport players between servers, take a
---look at the [Teleporting Between Places][1] article.
---
---[1]: https://developer.roblox.com/articles/Teleporting-Between-Places
---
TeleportAsyncResult.ReservedServerAccessCode = nil;
---@class TeleportOptions : Instance
---@field public ReservedServerAccessCode string
---@field public ServerInstanceId string
---@field public ShouldReserveServer bool
---This class is an optional parameter to the `TeleportService/TeleportAsync`
---function that allows developers to provide arguments for the teleport call.
---
---Certain arguments in this class are not compatible with each other and cause
---an error when passed to `TeleportService/TeleportAsync`:
---
---- ReservedServerAccessCode + ServerInstanceId
---- ShouldReserveServer + ServerInstanceId
---- ShouldReserveServer + ReservedServerAccessCode
---
---See also:
---
---For more information on how to teleport players between servers, take a look
---at the [Teleporting Between Places][1] article.
---
---[1]: https://developer.roblox.com/articles/Teleporting-Between-Places
---
local TeleportOptions;
---This property indicates the reserved server access code for the reserved
---server that the user(s) should be teleported to.
---
---See also:
---
---For more information on how to teleport players between servers, take a
---look at the [Teleporting Between Places][1] article.
---
---[1]: https://developer.roblox.com/articles/Teleporting-Between-Places
---
TeleportOptions.ReservedServerAccessCode = nil;
---This property indicates the `DataModel/JobId` of the server instance the
---user(s) should be teleported to.
---
---See also:
---
---For more information on how to teleport players between servers, take a
---look at the [Teleporting Between Places][1] article.
---
---[1]: https://developer.roblox.com/articles/Teleporting-Between-Places
---
TeleportOptions.ServerInstanceId = nil;
---This property indicates whether the teleport call should create a new
---reserved server. When set to true, a reserved server will be created and
---the player(s) will be teleported to the new server.
---
---If set to false, the player(s) will be teleported to the public server
---with the specified `TeleportOptions/ServerInstanceId` if provided. When
---`TeleportOptions/ServerInstanceId` is blank or no matching server is
---found, a new public server will be created to teleport the player(s) to.
---
---See also:
---
---For more information on how to teleport players between servers, take a
---look at the [Teleporting Between Places][1] article.
---
---[1]: https://developer.roblox.com/articles/Teleporting-Between-Places
---
TeleportOptions.ShouldReserveServer = nil;
---@return Variant
---This function returns the teleport data stored in the `TeleportOptions`
---instance by `TeleportOptions/SetTeleportData`.
---
---Once a player has teleported, teleport data can be retrieved using the
---`Player/GetJoinData` and `TeleportService/GetLocalPlayerTeleportData`
---functions.
---
---See also:
---
---For more information on how to teleport players between servers, take a
---look at the [Teleporting Between Places][1] article.
---
---[1]: https://developer.roblox.com/articles/Teleporting-Between-Places
---
TeleportOptions.GetTeleportData = function(self) end;
---@param teleportData Variant
---@return void
---This is a setter function for data to be passed to the destination place.
---On the destination place, this data can be retrieved using
---`Player/GetJoinData` or `TeleportService/GetLocalPlayerTeleportData`.
---
---For example, the following snippet would send the `DataModel/PlaceId` and
---`DataModel/JobId` in a dictionary passing the teleport data in a
---`TeleportOptions` instance using `TeleportOptions/SetTeleportData`:
---
---```lua
----- Server
---local teleportOptions = Instance.new(“TeleportOptions”)
---local teleportData = {
---    placeId = game.PlaceId,
---    jobId = game.JobId
---}
---teleportOptions:SetTeleportData(teleportData)
---TeleportService:TeleportAsync(game.PlaceId, {player}, teleportOptions)
---```
---
---This data could then be retrieved upon arrival using the
---GetLocalPlayerTeleportData() function as follows:
---
---```lua
----- Client
---local TeleportService = game:GetService("TeleportService")
---
---local teleportData = TeleportService:GetLocalPlayerTeleportData()
---if teleportData then
---    local placeId = teleportData.placeId
---    local jobId = teleportData.JobId
---end)
---```
---
---If no `teleportData` was set in the teleportation function this
---GetLocalPlayerTeleportData() will return `nil`.
---
---See also:
---
---For more information on how to teleport players between servers, take a
---look at the [Teleporting Between Places][1] article.
---
---[1]: https://developer.roblox.com/articles/Teleporting-Between-Places
---
TeleportOptions.SetTeleportData = function(self, teleportData) end;
---@class TeleportService : Instance
---@field public CustomizedTeleportUI bool
---@field public LocalPlayerArrivedFromTeleport RBXScriptSignal.LocalPlayerArrivedFromTeleport
---@field public TeleportInitFailed RBXScriptSignal.TeleportInitFailed
---TeleportService is responsible for transporting `Player`s between different
---[places](https://developer.roblox.com/articles/games-and-places) and servers.
---
---All teleporting functionality is consolidated into a single
---`TeleportService/TeleportAsync` function, which is used to:
---
---- Teleport players to a different place
---- Teleport players to a specific server
---- Teleport players to a reserved server
---
---## Studio limitation
---
---TeleportService does not work during playtesting in Studio. To test your
---game's use of TeleportService, you must publish the place and play it with the
---Roblox application.
---
---See also:
---
---For an in-depth guide on teleporting players, see the
---[Teleporting Between Places](https://developer.roblox.com/articles/Teleporting-Between-Places)
---article.
---
local TeleportService;
---This property used to control whether or not a `Message` would be shown by
---default. The default message has been removed, so this no longer does
---anything.
---
TeleportService.CustomizedTeleportUI = nil;
---@param setting string
---@param value Variant
---@return void
---This function stores a value under a given key that persists across all
---teleportations in the same game.
---
---This method is intended for use on the client only and should not be used
---on the server.
---
---The stored value can later be retrieved using
---`TeleportService/GetTeleportSetting`. This will work in the current place
---and any subsequent places the `Players/LocalPlayer` teleports to, provided
---they are in the same game.
---
---For example, in a game that allowed crouching you could save whether the
---user is currently crouching prior to teleporting as a teleport setting:
---
---```lua
---local TeleportService = game:GetService("TeleportService")
---
---local isCrouching = false
---TeleportService:SetTeleportSetting("isCrouching", isCrouching)
---```
---
---The stored value can take one of the following forms:
---
---- A table without mixed keys (all strings or all integers)
---- A string
---- A number
---- A bool
---
---If data is already stored under the given key, the previous value will be
---overwritten by the new value.
---
---#### Differences from GlobalDataStores
---
---Although they share some similarities, there are some key differences
---between teleport settings and datastores:
---
---- `GlobalDataStore/SetAsync` stores the data on Roblox servers whereas
---  SetTeleportSetting stores the data locally
---- Data stored in a `GlobalDataStore` is preserved after the user leaves
---  the game universe whereas teleport settings are not
---- `GlobalDataStore|GlobalDataStores` can only be accessed on the server,
---  whereas teleport settings can only be accessed on the client
---- `GlobalDataStore|GlobalDataStores` have usage limits, whereas teleport
---  settings do not
---
---In general teleport settings should be used to preserve client side
---information within a single play session across different places in a
---game. `GlobalDataStore|GlobalDataStores` should be used to save important
---player data that needs to be accessed across player sessions.
---
---#### Teleport settings and security
---
---As teleport settings are stored locally, it is possible they can be
---manipulated by malicious users. This risk can be mitigated by employing
---server side validation.
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
TeleportService.SetTeleportSetting = function(self, setting, value) end;
---@param setting string
---@return Variant
---This function retrieves a teleport setting saved using
---`TeleportService/SetTeleportSetting` using the given key.
---
---This method is intended for use on the client only and should not be used
---on the server.
---
---Teleport settings are preserved across teleportations within the same
---game. This means data can be saved using
---`TeleportService/SetTeleportSetting` in one place and retrieved using
---GetTeleportSetting in another place the user has been teleported to.
---
---For example, in a game that allowed crouching you could save whether the
---user is currently crouching prior to teleporting as a teleport setting.
---This could then be retrieved in the destination place after the
---teleportation:
---
---```lua
---local TeleportService = game:GetService("TeleportService")
---
---local isCrouching =  TeleportService:GetTeleportSetting("isCrouching")
---```
---
---If no teleport setting exists under the given key, this function will
---return _nil_.
---
---#### Differences from GlobalDataStores
---
---Although they share some similarities, there are some key differences
---between teleport settings and datastores:
---
---- `GlobalDataStore/SetAsync` stores the data on Roblox servers whereas
---  SetTeleportSetting stores the data locally
---- Data stored in a `GlobalDataStore` is preserved after the user leaves
---  the game universe whereas teleport settings are not
---- `GlobalDataStore|GlobalDataStores` can only be accessed on the server,
---  whereas teleport settings can only be accessed on the client
---- `GlobalDataStore|GlobalDataStores` have usage limits, whereas teleport
---  settings do not
---
---In general teleport settings should be used to preserve client side
---information within a single play session across different places in a
---game. `GlobalDataStore|GlobalDataStores` should be used to save important
---player data that needs to be accessed across player sessions.
---
---#### Teleport settings and security
---
---As teleport settings are stored locally, it is possible they can be
---manipulated by malicious users. This risk can be mitigated by employing
---server side validation.
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
TeleportService.GetTeleportSetting = function(self, setting) end;
---@return void
TeleportService.TeleportCancel = function(self) end;
---@param placeId int64
---@param players Objects
---@param teleportData Variant
---@param customLoadingScreen Instance
---@return string
---The numerous teleport functions have been combined into a single method,
---`TeleportService/TeleportAsync|TeleportAsync`, which should be used
---instead and may be used to:
---
---- Teleport any number of players to a Public Server
---- Follow a Friend to a Different Place
---- Teleport any number of Players to a Reserved Server
---
---This function teleports a group of `Player|Players` to the same server
---instance in the given place. It returns the `DataModel/JobId` of the
---server instance the players were teleported to.
---
---This function can only be called from the server.
---
---You may only use this function to teleport to a place in the same game.
---This function can not teleport more than 50 `Player|Players` in a single
---party.
---
---Currently this function may not work reliably when teleporting
---`Player|Players` to the same place they are currently in.
---
---#### Teleport data
---
---A _teleportData_ parameter can be specified. This is data the clients will
---transmit to the destination place and can be retrieved using
---`TeleportService/GetLocalPlayerTeleportData`.
---
---The _teleportData_ can take any of the following forms:
---
---- A table without mixed keys (all keys are strings or integers)
---- A string
---- A number
---- A bool
---
---As the _teleportData_ is transmitted by the client it is not secure. For
---this reason it should only be used for local settings and not sensitive
---items (such as the users' score or in-game currency).
---
---#### Loading screen
---
---A _customLoadingScreen_ argument can be specified. This is a `ScreenGui`
---that is copied (without scripts) into the `CoreGui` of the destination
---place. It can be retrieved at the destination place using
---`TeleportService/GetArrivingTeleportGui` and will not be used if the
---destination place is in a different game.
---
---You are advised to instead set the loading screen on the client using
---`TeleportService/SetTeleportGui`. The loading `ScreenGui` should also be
---parented to the `Player|Players'` `PlayerGui|PlayerGuis` a few seconds
---before the teleport to ensure a smooth transition using a `RemoteEvent`.
---For an example of this see
---`TeleportService/SetTeleportGui|SetTeleportGui`.
---
---#### Teleport failure
---
---In some circumstances a teleport may fail. This can be due to the
---developer configuring the teleport incorrectly or issues with Roblox's
---servers.
---
---- If a teleportation request is rejected the
---  `TeleportService/TeleportInitFailed` event will fire the error message
---  and a `Enum/TeleportResult` enumerator describing the issue
---- Teleports can fail 'in transit', after the user has left the server, due
---  to issues with Roblox's servers. In this case the user will be shown an
---  error message and be required to rejoin the game
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
---See also:
---
---- `Player/GetJoinData` to get the `Player/UserId|UserIds` of
---  `Player|Players` teleported together
---
TeleportService.TeleportPartyAsync = function(self, placeId, players, teleportData, customLoadingScreen) end;
---@param placeId int64
---@param instanceId string
---@param player Instance
---@param spawnName string
---@param teleportData Variant
---@param customLoadingScreen Instance
---@return void
---The numerous teleport functions have been combined into a single method,
---`TeleportService/TeleportAsync|TeleportAsync`, which should be used
---instead and may be used to:
---
---- Teleport any number of players to a Public Server
---- Follow a Friend to a Different Place
---- Teleport any number of Players to a Reserved Server
---
---This function teleports a `Player` to the place instance associated with
---the given _placeId_ and _instanceId_. It can only be used to teleport to
---places in the same game.
---
---The _placeId_ is the `DataModel/PlaceId` of the server and the
---_instanceId_ is the `DataModel/JobId|JobId`.
---
---This function can not be used to teleport `Player|Players` to servers
---created using `TeleportService/ReserveServer` (reserved servers). For
---this, see `TeleportService/TeleportToPrivateServer`.
---
---#### Spawn name
---
---An optional _spawnName_ parameter can be provided, which will cause the
---`Player` to initially spawn at the `SpawnLocation` of that name in the
---destination place. The `SpawnLocation` must be valid for the `Player` to
---spawn on. For example, it must be `SpawnLocation/Neutral|neutral` or set
---to the same `SpawnLocation/TeamColor|TeamColor` as the `Team` the `Player`
---will be assigned to upon joining the game.
---
---#### Teleport data
---
---A _teleportData_ parameter can be specified. This is data the client will
---transmit to the destination place and can be retrieved using
---`TeleportService/GetLocalPlayerTeleportData`.
---
---The _teleportData_ can take any of the following forms:
---
---- A table without mixed keys (all keys are strings or integers)
---- A string
---- A number
---- A bool
---
---As the _teleportData_ is transmitted by the client it is not secure. For
---this reason it should only be used for local settings and not sensitive
---items (such as the users' score or in-game currency).
---
---If you need teleport data to persist across multiple teleports, you can
---use `TeleportService/SetTeleportSetting` and
---`TeleportService/GetTeleportSetting`.
---
---#### Loading screen
---
---A _customLoadingScreen_ argument can be specified. This is a `ScreenGui`
---that is copied (without scripts) into the `CoreGui` of the destination
---place.
---
---Note, `TeleportService/SetTeleportGui` is the preferred alternative to the
---_customLoadingScreen_ argument as it can be called prior to the teleport.
---
---The loading `ScreenGui` can be obtained in the destination place using
---`TeleportService/GetArrivingTeleportGui`, where developers can parent it
---to the `PlayerGui`.
---
---#### Teleport failure
---
---In some circumstances a teleport may fail. This can be due to the
---developer configuring the teleport incorrectly or issues with Roblox's
---servers.
---
---- If a teleportation request is rejected the
---  `TeleportService/TeleportInitFailed` event will fire the error message
---  and a `Enum/TeleportResult` enumerator describing the issue
---- Teleports can fail 'in transit', after the user has left the server, due
---  to issues with Roblox's servers. In this case the user will be shown an
---  error message and be required to rejoin the game
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
TeleportService.TeleportToPlaceInstance = function(self, placeId, instanceId, player, spawnName, teleportData, customLoadingScreen) end;
---@param placeId int64
---@param player Instance
---@param teleportData Variant
---@param customLoadingScreen Instance
---@return void
---The numerous teleport functions have been combined into a single method,
---`TeleportService/TeleportAsync|TeleportAsync`, which should be used
---instead and may be used to:
---
---- Teleport any number of players to a Public Server
---- Follow a Friend to a Different Place
---- Teleport any number of Players to a Reserved Server
---
---This function teleports a `Player` to the place associated with the given
---_placeId_.
---
---Teleport can be called both from the client and the server (see examples
---below).
---
---When teleporting from the client, as only the `Players/LocalPlayer` can be
---teleported, no _player_ argument is required.
---
---You may only teleport players to places within the same game or active
---start places for other games.
---
---#### Teleport data
---
---A _teleportData_ parameter can be specified. This is data the client will
---transmit to the destination place and can be retrieved using
---`TeleportService/GetLocalPlayerTeleportData`.
---
---The _teleportData_ can take any of the following forms:
---
---- A table without mixed keys (all keys are strings or integers)
---- A string
---- A number
---- A bool
---
---As the _teleportData_ is transmitted by the client it is not secure. For
---this reason it should only be used for local settings and not sensitive
---items (such as the users' score or in-game currency).
---
---If you need teleport data to persist across multiple teleports, you can
---use `TeleportService/SetTeleportSetting` and
---`TeleportService/GetTeleportSetting`.
---
---#### Loading screen
---
---A _customLoadingScreen_ argument can be specified. This is a `ScreenGui`
---that is copied (without scripts) into the `CoreGui` of the destination
---place.
---
---Note, `TeleportService/SetTeleportGui` is the preferred alternative to the
---_customLoadingScreen_ argument as it can be called prior to the teleport.
---
---The loading `ScreenGui` can be obtained in the destination place using
---`TeleportService/GetArrivingTeleportGui`, where developers can parent it
---to the `PlayerGui`. It will not be used if the destination place is in a
---different game.
---
---#### Teleport failure
---
---In some circumstances a teleport may fail. This can be due to the
---developer configuring the teleport incorrectly or issues with Roblox's
---servers.
---
---- If a teleportation request is rejected the
---  `TeleportService/TeleportInitFailed` event will fire the error message
---  and a `Enum/TeleportResult` enumerator describing the issue
---- Teleports can fail 'in transit', after the user has left the server, due
---  to issues with Roblox's servers. In this case the user will be shown an
---  error message and be required to rejoin the game
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
TeleportService.Teleport = function(self, placeId, player, teleportData, customLoadingScreen) end;
---@param gui Instance
---@return void
---This function sets the custom `ScreenGui|teleport GUI` that will be shown
---to the local user during teleportation, prior to the teleport being
---invoked.
---
---Note, the `ScreenGui|teleport GUI` will not be used if the destination
---place is in a different game. It will also not persist across multiple
---teleports and will need to be set prior to each one.
---
---This function should only be used on the client. If the teleportation
---function is called from the server (as is the case with
---`TeleportService/TeleportAsync`) then this function should be called on
---the client prior to this. One way of doing this is listening to a
---`RemoteEvent` that fires several seconds before teleportation.
---
---#### Loading screen
---
---During a teleport, whilst the destination place is loading, the
---_customLoadingScreen_ is parented to the `CoreGui`. Once the place has
---loaded the `ScreenGui|loading screen` is `Instance/Parent|parented` to
---_nil_.
---
---This `ScreenGui` can be fetched at the destination place using
---`TeleportService/GetArrivingTeleportGui`, allowing you to parent it to the
---`PlayerGui` and perform your own transitions.
---
---You are advised to also `Instance/Parent|parent` the `ScreenGui` to the
---`PlayerGui` in the start place whilst the teleport is initiating.
---
---#### Studio Limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
TeleportService.SetTeleportGui = function(self, gui) end;
---@return Instance
---This function returns the _customLoadingScreen_ the
---`Players/LocalPlayer|LocalPlayer` arrived into the place with.
---
---Note, the _customLoadingScreen_ will not be used if the destination place
---is in a different game.
---
---#### Loading screen
---
---During a teleport, whilst the destination place is loading, the
---_customLoadingScreen_ is parented to the `CoreGui`. Once the place has
---loaded the `ScreenGui|loading screen` is `Instance/Parent|parented` to
---_nil_.
---
---If you wish to preserve the _customLoadingScreen_ and perform your own
---transitions, you will need to parent it to the
---`Players/LocalPlayer|LocalPlayer's` `PlayerGui`. For an example of this,
---see the code sample below.
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
TeleportService.GetArrivingTeleportGui = function(self) end;
---@param placeId int64
---@param players Objects
---@param teleportOptions Instance
---@return Instance
---This function serves as the all-encompassing method to teleport a player
---or group of players from one server to another.
---
---All forms of player teleportation are consolidated into this single
---function, which is used to:
---
---- Teleport players to a different place
---- Teleport players to a specific server
---- Teleport players to a reserved server
---
---**Group Teleport Limitations**
---
---- Groups of players can only be teleported within a single experience.
---- No more than 50 players can be teleported with a single
---  `TeleportService/TeleportAsync` call.
---
---#### Potential Errors
---
---This is a list of potential reasons a teleport may fail, ranging from
---invalid teleports to network issues.
---
---<table>
---    <thead>
---        <tr>
---            <th>Error</th>
---           	<th>Description</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td>Invalid placeId</td>
---            <td>The provided placeId is below 0.</td>
---        </tr>
---        <tr>
---            <td>Players empty</td>
---            <td>The provided list of players to teleport is empty.</td>
---        </tr>
---        <tr>
---            <td>List of players instances is incorrect</td>
---            <td>Any of the provided players is not a Player object.</td>
---        </tr>
---        <tr>
---            <td>TeleportOptions not of correct type</td>
---            <td>The provided teleportOption is not a TeleportOptions object.</td>
---        </tr>
---        <tr>
---            <td>TeleportAsync called from Client</td>
---            <td>The client called TeleportAsync, which can only be called from the server.</td>
---        </tr>
---        <tr>
---            <td>Incompatible Parameters</td>
---            <td>
---            Conflicting teleport options were used and TeleportService doesn't know where to send the player:
---            
---               - ReservedServerAccessCode + ServerInstanceId
---               - ShouldReserveServer + ServerInstanceId
---               - ShouldReserveServer + ReservedServerAccessCode
---            
---            </td>
---        </tr>
---    </tbody>
---</table>
---
---See also:
---
---For an in-depth guide on teleporting players and properly handling
---teleport failures, see the
---[Teleporting Between Places](https://developer.roblox.com/articles/Teleporting-Between-Places)
---article.
---
TeleportService.TeleportAsync = function(self, placeId, players, teleportOptions) end;
---@param placeId int64
---@return Tuple
---This function returns an access code that can be used to teleport players
---to a reserved server, along with the `DataModel/PrivateServerId` for it.
---
---ReserveServer can only be called on the server.
---
---#### Reserved Servers
---
---The following are characteristics of reserved servers:
---
---- They can only be accessed using
---  `TeleportService/TeleportToPrivateServer`, with the access code
---  ReserveServer returns
---- A game server is started when the access code is first used
---- Access codes remain valid indefinitely, meaning reserved servers can
---  still be joined if no game server is running (in this case a new game
---  server will be started)
---
---You can see if the current server is a reserved server by using the
---following code:
---
---```lua
---local isReserved = game.PrivateServerId ~= "" and game.PrivateServerOwnerId == 0
---```
---
---The `DataModel/PrivateServerId` is constant across all server instances
---associated with the server access code, the `DataModel/JobId` is not.
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
---#### Cross-Platform Play
---
---Players on Xbox One with cross-platform play disabled will arrive in a
---different server with players with cross-platform play enabled. This can
---cause multiple game servers with the same PrivateServerId to exist."
---
TeleportService.ReserveServer = function(self, placeId) end;
---@param userId int64
---@return Tuple
---This function returns the `DataModel/PlaceId|PlaceId` and
---`DataModel/JobId|JobId` of the server the user with the given
---`Player/UserId|UserId` is in, provided it is in the same game as the
---current place.
---
---Then, `TeleportService/TeleportToPlaceInstance` can be called with this
---information to allow a user to join the target user's server.
---
---Upon a successful lookup, the function returns the following values:
---
---<table>
---	<thead>
---		<tr>
---			<th>#</th>
---			<th>Name</th>
---			<th>Type</th>
---			<th>Description</th>
---		</tr>
---	</thead>
---	<tbody>
---		<tr>
---			<td><b>1</b></td>
---   			<td> currentInstance</td>
---			<td>bool</td>
---			<td>A bool indicating if the user was found in the current instance</td>
---		</tr>
---		<tr>
---			<td><b>2</b></td>
---   			<td>error</td>
---			<td>string</td>
---			<td>An error message in the event of the lookup failing</td>
---		</tr>
---		<tr>
---			<td><b>3</b></td>
---   			<td>placeId</td>
---			<td>int64</td>
---			<td>The PlaceId of the server the user is in</td>
---		</tr>
---		<tr>
---			<td><b>4</b></td>
---   			<td>instanceId</td>
---			<td>string</td>
---			<td>The JobId of the server the user is in</td>
---		</tr>
---	</tbody>
---</table>
---
---If there is a problem during lookup, such as the user being offline, an
---error is thrown. It is recommended that you wrap calls to this function in
---`pcall`.
---
---#### Limitations
---
---You should be aware of the following limitations when using this function:
---
---- This function can only be called by the server
---- This function may fail to return the correct information if the user is
---  teleporting
---- It is possible for this function to throw an error, hence developers
---  should wrap it in a [pcall][1] (see example below)
---- As this function returns the JobId of the server and not the access code
---  returned by `TeleportService/ReserveServer`, the id returned is not
---  appropriate for use with reserved servers
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
---See also:
---
---- For the `DataModel/PlaceId|PlaceIds` and `DataModel/JobId|JobIds` of a
---  `Player|Player's` friends, use `Player/GetFriendsOnline`
---
---[1]: /reference/engine/libraries/Lua-Globals#functions
---
TeleportService.GetPlayerPlaceInstanceAsync = function(self, userId) end;
---@return Variant
---This function returns the teleport data the `Players/LocalPlayer` arrived
---with. It can only be called from the client.
---
---Exploiters can spoof teleport data. Send secure data such as player
---currency through a server-side service such as `DataStoreService` to
---prevent tampering.
---
TeleportService.GetLocalPlayerTeleportData = function(self) end;
---@param placeId int64
---@param reservedServerAccessCode string
---@param players Objects
---@param spawnName string
---@param teleportData Variant
---@param customLoadingScreen Instance
---@return void
---The numerous teleport functions have been combined into a single method,
---`TeleportService/TeleportAsync|TeleportAsync`, which should be used
---instead and may be used to:
---
---- Teleport any number of players to a Public Server
---- Follow a Friend to a Different Place
---- Teleport any number of Players to a Reserved Server
---
---This function teleports one or more `Player|Players` to a reserved server
---created using `TeleportService/ReserveServer`.
---
---The _reservedServerAccessCode_ parameter is the access code returned by
---`TeleportService/ReserveServer|ReserveServer`.
---
---TeleportToPrivateServer can only be called on the server.
---
---#### Spawn name
---
---An optional _spawnName_ parameter can be provided, which will cause the
---`Player|Players` to initially spawn at the `SpawnLocation` of that name in
---the destination place. The `SpawnLocation` must be valid for the
---`Player|Players` to spawn on. For example, it must be
---`SpawnLocation/Neutral|neutral` or set to the same
---`SpawnLocation/TeamColor|TeamColor` as the `Team` the `Player|Players`
---will be assigned to upon joining the game.
---
---#### Teleport data
---
---A _teleportData_ parameter can be specified. This is data the clients will
---transmit to the destination place and can be retrieved using
---`TeleportService/GetLocalPlayerTeleportData`.
---
---The _teleportData_ can take any of the following forms:
---
---- A table without mixed keys (all keys are strings or integers)
---- A string
---- A number
---- A bool
---
---As the _teleportData_ is transmitted by the client it is not secure. For
---this reason it should only be used for local settings and not sensitive
---items (such as the users' score or in-game currency).
---
---If you need teleport data to persist across multiple teleports, you can
---use `TeleportService/SetTeleportSetting` and
---`TeleportService/GetTeleportSetting`.
---
---#### Loading screen
---
---A _customLoadingScreen_ argument can be specified. This is a `ScreenGui`
---that is copied (without scripts) into the `CoreGui` of the destination
---place.
---
---You are advised to instead set the loading screen on the client using
---`TeleportService/SetTeleportGui`. The loading `ScreenGui` should also be
---parented to the `Player|Player's` `PlayerGui` a few seconds before the
---teleport to ensure a smooth transition using a `RemoteEvent`. For an
---example of this see `TeleportService/SetTeleportGui|SetTeleportGui`
---
---The loading `ScreenGui` can be obtained in the destination place using
---`TeleportService/GetArrivingTeleportGui`, where developers can parent it
---to the `PlayerGui`.
---
---#### Teleport failure
---
---In some circumstances a teleport may fail. This can be due to the
---developer configuring the teleport incorrectly or issues with Roblox's
---servers.
---
---- If a teleportation request is rejected the
---  `TeleportService/TeleportInitFailed` event will fire the error message
---  and a `Enum/TeleportResult` enumerator describing the issue
---- Teleports can fail 'in transit', after the user has left the server, due
---  to issues with Roblox's servers. In this case the user will be shown an
---  error message and be required to rejoin the game
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
TeleportService.TeleportToPrivateServer = function(self, placeId, reservedServerAccessCode, players, spawnName, teleportData, customLoadingScreen) end;
---@param placeId int64
---@param spawnName string
---@param player Instance
---@param teleportData Variant
---@param customLoadingScreen Instance
---@return void
---The numerous teleport functions have been combined into a single method,
---`TeleportService/TeleportAsync|TeleportAsync`, which should be used
---instead and may be used to:
---
---- Teleport any number of players to a Public Server
---- Follow a Friend to a Different Place
---- Teleport any number of Players to a Reserved Server
---
---This function behaves the same as `TeleportService/Teleport` with the
---exception that it includes a _spawnName_ parameter, causing the `Player`
---to spawn at the `SpawnLocation` of that name at the destination place.
---
---The `SpawnLocation` must be valid for the `Player` to spawn on. For
---example, it must be `SpawnLocation/Neutral|neutral` or set to the same
---`SpawnLocation/TeamColor|TeamColor` as the `Team` the `Player` will be
---assigned to upon joining the game.
---
---The `Player` will still spawn at the correct `SpawnLocation` even the
---teleport is to a place in a different universe. The spawn will also be
---correct if `Players/CharacterAutoLoads` is false in the destination place
---and the `Player/Character|Character` is loaded manually using
---`Player/LoadCharacter|LoadCharacter`.
---
---The teleportation will only affect the `SpawnLocation` used initially. If
---the `Player` respawns again subsequently it will not necessarily be at
---this `SpawnLocation`.
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
TeleportService.TeleportToSpawnByName = function(self, placeId, spawnName, player, teleportData, customLoadingScreen) end;
---@class RBXScriptSignal.LocalPlayerArrivedFromTeleport : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.LocalPlayerArrivedFromTeleport, callback: fun(loadingGui: Instance, dataTable: Variant)): RBXScriptConnection
---This function fires when the `Players/LocalPlayer` enters the place
---following a teleport. The _teleportData_ and _customLoadingScreen_ are
---provided as arguments.
---
---When fetching _teleportData_ and the _customLoadingScreen_ you are advised
---to use `TeleportService/GetLocalPlayerTeleportData` and
---`TeleportService/GetArrivingTeleportGui` instead. This is because these
---functions can be called immediately without having to wait for this event
---to fire.
---
---This event should be connected immediately in a `LocalScript` parented to
---`ReplicatedFirst`. Otherwise, when the connection is made the event may
---have already fired.
---
---#### Loading screen
---
---During a teleport, whilst the destination place is loading, the
---_customLoadingScreen_ is parented to the `CoreGui`. Once the place has
---loaded the `ScreenGui|loading screen` is `Instance/Parent|parented` to
---_nil_.
---
---If you wish to preserve the _customLoadingScreen_ and perform your own
---transitions, you will need to parent it to the
---`Players/LocalPlayer|LocalPlayer's` `PlayerGui`. For example, using the
---following code inside a `LocalScript` in `ReplicatedFirst`:
---
---```lua
---local TeleportService = game:GetService("TeleportService")
---local Players = game:GetService("Players")
---local ReplicatedFirst = game:GetService("ReplicatedFirst")
---
---TeleportService.LocalPlayerArrivedFromTeleport:Connect(function(customLoadingScreen, teleportData)
---    local playerGui = Players.LocalPlayer:WaitForChild("PlayerGui")
---    ReplicatedFirst:RemoveDefaultLoadingScreen()
---
---    customLoadingScreen.Parent = playerGui
---    -- animate screen here
---    wait(5)
---    -- destroy screen
---    customLoadingScreen:Destroy()
---end)
---```
---
---The _customLoadingScreen_ will not be used if the destination place is in
---a different game.
---
---#### Studio limitation
---
---This service does not work during playtesting in Roblox Studio &mdash; To
---test aspects of your game using it, you must publish the game and play it
---in the Roblox application.
---
TeleportService.LocalPlayerArrivedFromTeleport = nil;
---@class RBXScriptSignal.TeleportInitFailed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.TeleportInitFailed, callback: fun(player: Instance, teleportResult: TeleportResult, errorMessage: string, placeId: int64, teleportOptions: Instance)): RBXScriptConnection
---This event fires on both the client and the server when a request to
---teleport from a function such as `TeleportService/TeleportAsync` fails and
---the player does not leave the current server. It provides a reason for the
---failure, as well as all of the information necessary to retry the
---teleport. If a group teleport fails, the event will fire once per player.
---
---#### TeleportOptions
---
---The `TeleportOptions` object provided by this event is not identical to
---the one passed to the original `TeleportService/TeleportAsync` call. It is
---a new object populated with the necessary parameters to retry the teleport
---and send the player to the exact same destination. This is especially
---important for facilitating group teleports when they fail.
---
---<table>
---    <thead>
---        <tr>
---            <th>Original Teleport Type</th>
---	          <th>Teleport Data</th>
---	          <th>ReservedServerAccessCode</th>
---	          <th>ServerInstanceId</th>
---	          <th>ShouldReserveServer</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td>Individual player to place</td>
---            <td>Original value</td>
---            <td>None</td>
---            <td>None</td>
---            <td>false</td>
---        </tr>
---        <tr>
---            <td>Player(s) to reserved server</td>
---            <td>Original value</td>
---            <td>Original value, or the code generated if ShouldReserveServer was originally true</td>
---            <td>None</td>
---            <td>false</td>
---        </tr>
---        <tr>
---            <td>Player(s) to specific server</td>
---            <td>Original value</td>
---            <td>None</td>
---            <td>Original value</td>
---            <td>false</td>
---        </tr>
---        <tr>
---            <td>Players to place</td>
---            <td>Original value</td>
---            <td>None</td>
---            <td>Same destination ID as the other players in the original teleport</td>
---            <td>false</td>
---        </tr>
---    </tbody>
---</table>
---
---See also:
---
---For an in-depth guide on teleporting players and properly handling
---teleport failures, see the
---[Teleporting Between Places](https://developer.roblox.com/articles/Teleporting-Between-Places)
---article.
---
TeleportService.TeleportInitFailed = nil;
---@class TemporaryCageMeshProvider : Instance
local TemporaryCageMeshProvider;
---@class TemporaryScriptService : Instance
local TemporaryScriptService;
---@class Terrain : BasePart, PVInstance, Instance
---@field public Decoration bool
---@field public IsSmooth bool
---@field public LastUsedModificationMethod TerrainAcquisitionMethod
---@field public MaterialColors BinaryString
---@field public MaxExtents Region3int16
---@field public WaterColor Color3
---@field public WaterReflectance float
---@field public WaterTransparency float
---@field public WaterWaveSize float
---@field public WaterWaveSpeed float
---Terrain lets you create dynamically morphable environments with little to no
---lag. It is currently based on a 4&times;4&times;4 grid of cells, where each
---cell has a number between 0 and 1 representing how much the geometry should
---occupy the cell, and the material of the cell. The occupancy determines how
---the cell will morph together with surrounding cells, and the result is the
---illusion of having no grid constraint.
---
---For more information, see [Terrain](/building-and-visuals/modeling/terrain).
---
local Terrain;
---Currently enables or disables geometric grass on the **Grass** terrain
---material, although future modifications of this property may control
---additional decorative features.
---
Terrain.Decoration = nil;
---Returns true if the current game is using the smooth terrain system. The
---legacy terrain engine has been removed, so this property will always be
---true.
---
Terrain.IsSmooth = nil;
---
Terrain.LastUsedModificationMethod = nil;
---MaterialColors represents the editor for the Material Color feature, and
---**cannot be edited by scripts**.
---
---To get the color of a material, use: `Terrain/GetMaterialColor`
---
---To set the color of a material, use: `Terrain/SetMaterialColor`
---
Terrain.MaterialColors = nil;
---Displays the boundaries of the largest possible editable region.
---
Terrain.MaxExtents = nil;
---The tint of the Terrain water.
---
Terrain.WaterColor = nil;
---Controls how opaque the Terrain's water reflections are.
---
Terrain.WaterReflectance = nil;
---The transparency of the Terrain water.
---
Terrain.WaterTransparency = nil;
---Sets the maximum height of the Terrain water waves in studs. This is
---currently constrained to between 0 and 1.
---
Terrain.WaterWaveSize = nil;
---Sets how many times the Terrain water waves will move up and down per
---minute. This is currently constrained to between 0 and 100.
---
Terrain.WaterWaveSpeed = nil;
---@param region Region3
---@param resolution float
---@param material Material
---@return void
---Fills a <a href="/reference/engine/datatypes/Region3">Region3</a> space
---with smooth terrain.
---
Terrain.FillRegion = function(self, region, resolution, material) end;
---@return int
---Returns the number of non-empty cells in the Terrain.
---
Terrain.CountCells = function(self) end;
---@param position Vector3
---@return Vector3
---Returns the grid cell location that contains the point **position**.
---
Terrain.WorldToCell = function(self, position) end;
---@param region Region3
---@param resolution float
---@return Tuple
---Returns a certain region of
---<a href="https://developer.roblox.com/articles/Intro-To-Terrain">smooth
---terrain</a> in
---<a href="https://developer.roblox.com/articles/Scripting-With-Terrain#reading-and-writing-voxels">table
---format</a>. Both of the returned arrays have an additional `Size`
---property, a `datatype/Vector3`.
---
Terrain.ReadVoxels = function(self, region, resolution) end;
---@param center Vector3
---@param radius float
---@param material Material
---@return void
---Fills a ball of smooth terrain in a given space.
---
Terrain.FillBall = function(self, center, radius, material) end;
---@param region Region3int16
---@return void
---_(OBSOLETE)_ No longer does anything.
---
Terrain.AutowedgeCells = function(self, region) end;
---@param cframe CFrame
---@param size Vector3
---@param material Material
---@return void
---**FillWedge** fills a wedge-shaped volume of Terrain with the given
---`enum/Material` and the area's CFrame and Size. The orientation of the
---wedge is the same as an equivalent `WedgePart`.
---
---<img src="/assets/bltb36cd8e98c2f3f2f/Terrain.FillWedge.jpg" alt="The results of a call to Terrain:FillWedge with CFrame (0, 50, 0), Size (20, 20, 20), and Material Asphalt" width="537" height="415" />
---
---In the image above, a floating chunk of Terrain was created by calling
---this function as in the following code. A transparent, pink part with the
---Front surface marked with a Motor indicates the provided CFrame and Size.
---
---```lua
---workspace.Terrain:FillWedge(CFrame.new(0, 50, 0), Vector3.new(20, 20, 20), Enum.Material.Asphalt)
---```
---
Terrain.FillWedge = function(self, cframe, size, material) end;
---@param region Region3
---@param resolution float
---@param materials Array
---@param occupancy Array
---@return void
---Sets a certain region of
---<a href="https://developer.roblox.com/articles/Intro-To-Terrain">smooth
---terrain</a> using the
---<a href="https://developer.roblox.com/articles/Intro-To-Terrain#Reading_and_writing_voxels">table
---format</a>
---
Terrain.WriteVoxels = function(self, region, resolution, materials, occupancy) end;
---@param x int
---@param y int
---@param z int
---@return Tuple
---Returns the closest CellMaterial from the legacy terrain engine that
---matches the smooth terrain voxel specified. CellBlock will always be
---''Solid'' and CellOrientation will always be ''NegZ''.
---
Terrain.GetCell = function(self, x, y, z) end;
---@param region Region3int16
---@param material CellMaterial
---@param block CellBlock
---@param orientation CellOrientation
---@return void
---Sets the occupancy of all terrain voxels in the specified region to 1, and
---sets their materials to the closest smooth terrain material that matches
---the CellMaterial.
---
---CellBlock and CellOrientation have no effect.
---
Terrain.SetCells = function(self, region, material, block, orientation) end;
---@param position Vector3
---@return Vector3
---Returns the grid cell location that contains the point position,
---preferring empty grid cells when position is on a grid edge.
---
Terrain.WorldToCellPreferEmpty = function(self, position) end;
---@param x int
---@param y int
---@param z int
---@param force WaterForce
---@param direction WaterDirection
---@return void
---Sets the specified terrain voxel's material to ''Water'' and sets its
---occupancy to 1. _WaterDirection_ and _WaterForce_ no longer have any
---effect.
---
---_Note:_ This API was intended for Roblox's old terrain system, which has
---since been removed from the engine.
---
Terrain.SetWaterCell = function(self, x, y, z, force, direction) end;
---@param x int
---@param y int
---@param z int
---@return Vector3
---Returns the world position of the center of the terrain cell (x, y, z).
---
Terrain.CellCenterToWorld = function(self, x, y, z) end;
---@param position Vector3
---@return Vector3
---Returns the grid cell location that contains the point position,
---preferring non-empty grid cells when position is on a grid edge.
---
Terrain.WorldToCellPreferSolid = function(self, position) end;
---@param x int
---@param y int
---@param z int
---@param material CellMaterial
---@param block CellBlock
---@param orientation CellOrientation
---@return void
---Sets the occupancy of the specified terrain voxel to 1, and sets it's
---material to the closest smooth terrain material that matches the
---CellMaterial.
---
---CellBlock and CellOrientation have no effect.
---
Terrain.SetCell = function(self, x, y, z, material, block, orientation) end;
---@param material Material
---@param value Color3
---@return void
---Sets current terrain material color for specified terrain material.
---Terrain material will shift its base color toward specified color.
---
Terrain.SetMaterialColor = function(self, material, value) end;
---@param x int
---@param y int
---@param z int
---@return Vector3
---Returns the position of the lower-left-forward corner of the grid cell (x,
---y, z).
---
Terrain.CellCornerToWorld = function(self, x, y, z) end;
---@param region Region3
---@param resolution float
---@param sourceMaterial Material
---@param targetMaterial Material
---@return void
---ReplaceMaterial replaces terrain of a certain `enum/Material` within a
---`datatype/Region3` with another material. Essentially, it is a
---find-and-replace operation on `Terrain` materials.
---
---#### Constraints
---
---When calling this method, the `resolution` parameter must be exactly 4.
---Additionally, the Region3 must be aligned to the terrain materials grid,
---i.e. the components of the Region3's minimum and maximum points must be
---divisible by 4. Use `Region3:ExpandToGrid` to make a region compatible
---with this function.
---
Terrain.ReplaceMaterial = function(self, region, resolution, sourceMaterial, targetMaterial) end;
---@param x int
---@param y int
---@param z int
---@return Tuple
---Returns if the cell is a water cell. The WaterForce parameter will always
---be _None_ and the WaterDirection will always be _NegX_.
---
Terrain.GetWaterCell = function(self, x, y, z) end;
---@return void
---Clears the terrain.
---
Terrain.Clear = function(self) end;
---@param region TerrainRegion
---@param corner Vector3int16
---@param pasteEmptyCells bool
---@return void
---Applies a chunk of terrain to the Terrain object. Note: `TerrainRegion`
---data does not replicate between server and client.
---
Terrain.PasteRegion = function(self, region, corner, pasteEmptyCells) end;
---@param cframe CFrame
---@param height float
---@param radius float
---@param material Material
---@return void
---Fills a cylinder of smooth terrain in a given space. The space is defined
---using a CFrame, height, and radius.
---
---#### Usage
---
---```lua
---workspace.Terrain:FillCylinder(CFrame.new(0, 50, 0), 5, 30, Enum.Material.Asphalt)
---```
---
Terrain.FillCylinder = function(self, cframe, height, radius, material) end;
---@return void
---Transforms the legacy terrain engine into the new terrain engine.
---
---All places now automatically use the new terrain engine, so this method is
---obsolete.
---
Terrain.ConvertToSmooth = function(self) end;
---@param cframe CFrame
---@param size Vector3
---@param material Material
---@return void
---Fills a block of smooth terrain with a given location, rotation, size, and
---material.
---
Terrain.FillBlock = function(self, cframe, size, material) end;
---@param x int
---@param y int
---@param z int
---@return bool
---_(OBSOLETE)_ No longer does anything.
---
Terrain.AutowedgeCell = function(self, x, y, z) end;
---@param region Region3int16
---@return TerrainRegion
---Stores a chunk of terrain into a `TerrainRegion` object so it can be
---loaded back later. Note: `TerrainRegion` data does not replicate between
---server and client.
---
Terrain.CopyRegion = function(self, region) end;
---@param material Material
---@return Color3
---Returns the current terrain material color for the specified terrain
---material.
---
Terrain.GetMaterialColor = function(self, material) end;
---@class TerrainDetail : Instance
---@field public ColorMap Content
---@field public Face TerrainFace
---@field public MaterialPattern MaterialPattern
---@field public MetalnessMap Content
---@field public NormalMap Content
---@field public RoughnessMap Content
---@field public StudsPerTile float
---TerrainDetail has to be a child of a `MaterialVariant|MaterialVariant` object.
---The `MaterialVariant/BaseMaterial` property of the parent MaterialVariant
---object need to be one of the supported terrain Material, for example, it can
---be Basalt but not Plastic.
---
---Terrain renders with different textures for it's top(+y), bottom(-y), and
---side(horizontal to y axis) faces. If a MaterialVariant has no TerrainDetail
---children, all faces are rendered as MaterialVariant specified. At most 3
---TerrainDetail objects can be added to MaterialVariant, one for each face.
---TerrainDetail overrides the terrain appearance of a certain face.
---
---For example, it can achieve this kind of effect: the top surface of Grass has
---lots of grass. On side surfaces, there are less grass. On bottom surfaces
---there are no grass.
---
local TerrainDetail;
---This property determines the color of the surface. This texture is
---sometimes called the albedo texture. The alpha channel is not used.
---
TerrainDetail.ColorMap = nil;
---Face that this TerrainDetail overrides. When more than one TerrainDetail
---objects with the same face exsit under a MaterialVariant, only one of them
---works.
---
TerrainDetail.Face = nil;
---Determines texture tiling method.
---
TerrainDetail.MaterialPattern = nil;
---This property determines which parts of the surface are metal and are
---non-metal. A metalness map is a grayscale image where black pixels
---correspond to non-metals and white pixels correspond to metals.
---
---Metals only reflect light the same color as the metal, and they reflect
---much more light than non-metals. Most materials in the real world can be
---categorized either metals or non-metals. For this reason, most pixels in a
---metalness map will be either pure black or pure white. Values in between
---are typically used to simulate dirt or grunge on top of an underlying
---metal area.
---
---Here's an example of a piece of metal with a layer of paint on top. Most
---paints are non-metallic, so the metalness map is black everywhere except
---on unpainted metal parts and spots where the paint has chipped away and
---the underlying metal is visible.
---
---![Metalness jetpack][1]
---
---![Map explanation][2]
---
---When `Lighting/EnvironmentSpecularScale` is 0, metalness has no effect.
---For the most realistic reflections, setting EnvironmentSpecularScale and
---`Lighting/EnvironmentDiffuseScale` to 1, and `Lighting/Ambient` and
---`Lighting/OutdoorAmbient` to (0,0,0) is recommended.
---
---[1]: /assets/blt0a658c7367d5cdab/jetpack.gif
---[2]: /assets/blt96558be20f7b7a1a/metalness-explained.png
---
TerrainDetail.MetalnessMap = nil;
---This property modifies the lighting of the surface by adding bumps, dents,
---cracks, and curves without adding more polygons.
---
---Normal maps are RGB images that modify the surface's normal vector used
---for lighting calculations. The R, G, and B channels of the NormalMap
---correspond to the X, Y, and Z components of the local surface vector
---respectively, and byte values of 0 and 255 for each channel correspond
---linearly to normal vector components of -1 and 1.016 respectively. This
---range is stretched slightly from -1 to 1 so that a byte value of 127 maps
---to exactly 0. The normal vector's Z axis is always defined as the
---direction of the underlying mesh's normal. A uniform (127,127,255) image
---translates to a completely flat normal map where the normal is everywhere
---perpendicular to the mesh surface. This format is called “tangent space”
---normal maps. Roblox does not support world space or object space normal
---maps.
---
---Incorrectly flipped normal components can make bumps appear like indents.
---If you import a normal map and notice the lighting looks off, you may need
---to invert the G channel of the image. The X and Y axes of the tangent
---space frame correspond to the X and Y directions in the image after it's
---transformed by the mesh UVs. If you view your normal map in an image
---editor as if it were displayed on a surface, normals pointing towards the
---right side of the screen should appear more red, and normals pointing
---towards the top side of your screen should appear more green.
---
---![Bread normal map][1]
---
---The terms “DirectX format” and “OpenGL format” are sometimes used to
---describe whether the G channel of the normal map is inverted or not.
---Roblox expects the OpenGL format.
---
---Roblox expects imported meshes to include tangents. Modeling software may
---also refer to this as “tangent space” information. If you apply a normal
---map and it does not seem to make any visual difference, you may need to
---re-export your mesh along with its tangent information from modeling
---software.
---
---[1]: /assets/blt013e67a5f211cd0d/bread-nmap.png
---
TerrainDetail.NormalMap = nil;
---This property determines the apparent roughness across the surface. A
---roughness map is a grayscale image where black pixels correspond to a
---maximally smooth surface, and white pixels correspond to a maximally rough
---surface.
---
---Roughness refers to how much variation the surface has on a very small
---scale. Reflections on smooth surfaces are sharp and concentrated.
---Reflections on rough surfaces are more blurry and dispersed.
---
TerrainDetail.RoughnessMap = nil;
---Determines the scale of textures. Larger values for this property will
---lead to the textures appearing larger, and repeating less frequently.
---
TerrainDetail.StudsPerTile = nil;
---@class TerrainRegion : Instance
---@field public IsSmooth bool
---@field public SizeInCells Vector3
---A TerrainRegion is a snapshot of `Terrain` retrieved from the
---`Terrain:CopyRegion()` method. Can be later pasted into the Terrain using
---`Terrain:PasteRegion()`.
---
local TerrainRegion;
---The state of this property shows whether or not this `TerrainRegion`
---contains _smooth terrain_.
---
TerrainRegion.IsSmooth = nil;
---The size of this TerrainRegion in cells.
---
TerrainRegion.SizeInCells = nil;
---@return void
---Calling this method transforms the TerrainRegion into a `TerrainRegion`
---usable for `Terrain`. This can only be done from a plugin, when in edit
---mode.
---
---The game can't be running, nor can it have a `NetworkServer`.
---
TerrainRegion.ConvertToSmooth = function(self) end;
---@class TestService : Instance
---@field public AutoRuns bool
---@field public Description string
---@field public ErrorCount int
---@field public ExecuteWithStudioRun bool
---@field public Is30FpsThrottleEnabled bool
---@field public IsPhysicsEnvironmentalThrottled bool
---@field public IsSleepAllowed bool
---@field public NumberOfPlayers int
---@field public SimulateSecondsLag double
---@field public TestCount int
---@field public Timeout double
---@field public WarnCount int
---@field public ServerCollectConditionalResult RBXScriptSignal.ServerCollectConditionalResult
---@field public ServerCollectResult RBXScriptSignal.ServerCollectResult
---The TestService is a service used by Roblox internally to run analytical tests
---on their engine. It makes it possible to write sophisticated tests right
---inside a game.
---
---## Macros
---
---Scripts that are executed inside of the TestService (via `TestService/Run`)
---have access to special macros that directly invoke functions under the
---TestService. Macros are essentially substitutions for large blocks of code
---that shouldn't need to be rewritten each time you want to call them.
---
---### RBX_CHECK
---
---This macro does tests with calls to the `TestService/Check` function.
---
---<table>
---	<tr>
---		<th>Macro</th>
---		<th>Test Condition</th>
---	</tr>
---	<tr>
---		<td>RBX_CHECK(cond)</td>
---		<td>cond == true</td>
---	</tr>
---	<tr>
---		<td>RBX_CHECK_MESSAGE(cond, failMsg)</td>
---		<td>cond == true</td>
---	</tr>
---	<tr>
---		<td>RBX_CHECK_THROW(CODE)</td>
---		<td>pcall(function () CODE end) == false</td>
---	</tr>
---	<tr>
---		<td>RBX_CHECK_NO_THROW(CODE)</td>
---		<td>pcall(function () CODE end) == true</td>
---	</tr>
---	<tr>
---		<td>RBX_CHECK_EQUAL(a,b)</td>
---		<td>a == b</td>
---	</tr>
---	<tr>
---		<td>RBX_CHECK_NE(a,b)</td>
---		<td>a ~= b</td>
---	</tr>
---	<tr>
---		<td>RBX_CHECK_GE(a,b)</td>
---		<td>a &gt;= b</td>
---	</tr>
---	<tr>
---		<td>RBX_CHECK_LE(a,b)</td>
---		<td>a &lt;= b</td>
---	</tr>
---	<tr>
---		<td>RBX_CHECK_GT(a,b)</td>
---		<td>a &gt; b</td>
---	</tr>
---	<tr>
---		<td>RBX_CHECK_LT(a,b)</td>
---		<td>a &lt; b</td>
---	</tr>
---</table>
---
---### RBX_REQUIRE
---
---This macro does tests with calls to the `TestService/Require` function.
---
---<table>
---	<tr>
---		<th>Macro</th>
---		<th>Test Condition</th>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE(cond)</td>
---		<td>cond == true</td>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE_MESSAGE(cond, failMsg)</td>
---		<td>cond == true</td>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE_THROW(CODE)</td>
---		<td>pcall(function () CODE end) == false</td>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE_NO_THROW(CODE)</td>
---		<td>pcall(function () CODE end) == true</td>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE_EQUAL(a,b)</td>
---		<td>a == b</td>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE_NE(a,b)</td>
---		<td>a ~= b</td>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE_GE(a,b)</td>
---		<td>a &gt;= b</td>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE_LE(a,b)</td>
---		<td>a &lt;= b</td>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE_GT(a,b)</td>
---		<td>a &gt; b</td>
---	</tr>
---	<tr>
---		<td>RBX_REQUIRE_LT(a,b)</td>
---		<td>a &lt; b</td>
---	</tr>
---</table>
---
---### RBX_WARN
---
---This macro does tests with calls to the `TestService/Warn` function.
---
---<table>
---	<tr>
---		<th>Macro</th>
---		<th>Test Condition</th>
---	</tr>
---	<tr>
---		<td>RBX_WARN(cond)</td>
---		<td>cond == true</td>
---	</tr>
---	<tr>
---		<td>RBX_WARN_MESSAGE(cond, failMsg)</td>
---		<td>cond == true</td>
---	</tr>
---	<tr>
---		<td>RBX_WARN_THROW(CODE)</td>
---		<td>pcall(function () CODE end) == false</td>
---	</tr>
---	<tr>
---		<td>RBX_WARN_NO_THROW(CODE)</td>
---		<td>pcall(function () CODE end) == true</td>
---	</tr>
---	<tr>
---		<td>RBX_WARN_EQUAL(a,b)</td>
---		<td>a == b</td>
---	</tr>
---	<tr>
---		<td>RBX_WARN_NE(a,b)</td>
---		<td>a ~= b</td>
---	</tr>
---	<tr>
---		<td>RBX_WARN_GE(a,b)</td>
---		<td>a &gt;= b</td>
---	</tr>
---	<tr>
---		<td>RBX_WARN_LE(a,b)</td>
---		<td>a &lt;= b</td>
---	</tr>
---	<tr>
---		<td>RBX_WARN_GT(a,b)</td>
---		<td>a &gt; b</td>
---	</tr>
---	<tr>
---		<td>RBX_WARN_LT(a,b)</td>
---		<td>a &lt; b</td>
---	</tr>
---</table>
---
---### Additional Macros
---
---<table>
---<tr>
---<th>Macro</th>
---<th>Description</th>
---</tr>
---<tr>
---<td>RBX_ERROR(msg)</td>
---<td>Directly calls the `TestService/Error` function.</td>
---</tr>
---<tr>
---<td>RBX_FAIL(msg)</td>
---<td>Directly calls the `TestService/Fail` function.</td>
---</tr>
---<tr>
---<td>RBX_MESSAGE(msg)</td>
---<td>Directly calls the `TestService/Message` function.</td>
---</tr>
---</table>
---
---See also:
---
---- <a href="http://blog.roblox.com/2012/04/speeding-roblox-development-with-continuous-testing">Speeding
---  Roblox Development with Continuous Testing</a>
---
local TestService;
---If set to true, the game will start running when the TestService's
---`TestService/Run` method is called.
---
TestService.AutoRuns = nil;
---A description of the test being executed.
---
TestService.Description = nil;
---Measures how many errors have been recorded in the test session.
---
TestService.ErrorCount = nil;
---When set to true, the TestService will be executed when using the _Run_
---action in Roblox Studio.
---
---Note:
---
---- If the `TestService/NumberOfPlayers` property is set to a value above 0,
---  running the game will open `NumberOfPlayers + 1` studio windows, where
---  one window is a server, and the rest are players connected to that
---  server.
---- Try to keep this value within a rational range (1 to 8 players at most),
---  or else your computer's CPU will get overloaded.
---
TestService.ExecuteWithStudioRun = nil;
---Sets whether or not the physics engine should be throttled to 30 FPS while
---the test is being ran.
---
TestService.Is30FpsThrottleEnabled = nil;
---Sets whether or not the physics environment should be throttled while
---running this test.
---
TestService.IsPhysicsEnvironmentalThrottled = nil;
---Sets whether or not physics objects will be allowed to fall asleep while
---the test simulation is running.
---
TestService.IsSleepAllowed = nil;
---The number of players expected in this test, if any.
---
TestService.NumberOfPlayers = nil;
---Sets a specific amount of additional latency experienced by players during
---the test session.
---
TestService.SimulateSecondsLag = nil;
---Measures how many test calls have been recorded in the test session.
---
TestService.TestCount = nil;
---The maximum amount of time that tests are allowed to run for.
---
TestService.Timeout = nil;
---Measures how many warning calls have been recorded in the test session.
---
TestService.WarnCount = nil;
---@param description string
---@param source Instance
---@param line int
---@return void
---Prints a red message to the output, prefixed by `TestService: `.
---
TestService.Error = function(self, description, source, line) end;
---@param condition bool
---@param description string
---@param source Instance
---@param line int
---@return void
---If `condition` is true, prints `Require passed: `, followed by
---`description`, to the output in blue text. Otherwise, prints
---`Require failed. Test ended: `, followed by `description`, to the output
---in red text.
---
TestService.Require = function(self, condition, description, source, line) end;
---@return void
---Runs scripts which are parented to TestService.
---
TestService.Run = function(self) end;
---@return Dictionary
TestService.ScopeTime = function(self) end;
---@param text string
---@param source Instance
---@param line int
---@return void
---Prints "<samp>Test checkpoint: </samp>", followed by <var>text</var>, to
---the output, in blue text.
---
TestService.Checkpoint = function(self, text, source, line) end;
---@param name string
---@return bool
TestService.isFeatureEnabled = function(self, name) end;
---@param condition bool
---@param description string
---@param source Instance
---@param line int
---@return void
---If <var>condition</var> is true, prints <samp>Warning passed: </samp>,
---followed by <var>description</var>, to the output, in blue text.
---Otherwise, prints <samp>Warning: </samp>, followed by
---<var>description</var>, to the output, in yellow text.
---
TestService.Warn = function(self, condition, description, source, line) end;
---@return void
---Prints <samp>Testing Done</samp> to the output, in blue text.
---
TestService.Done = function(self) end;
---@param text string
---@param source Instance
---@param line int
---@return void
---Prints <samp>Test message</samp>, followed by <var>text</var> to the
---output, in blue text.
---
TestService.Message = function(self, text, source, line) end;
---@param condition bool
---@param description string
---@param source Instance
---@param line int
---@return void
---If condition is true, prints "Check passed: ", followed by description to
---the output, in blue text. Otherwise, prints "Check failed: ", again,
---followed by description, but in red text.
---
TestService.Check = function(self, condition, description, source, line) end;
---@param description string
---@param source Instance
---@param line int
---@return void
---Indicates a fatal error in a TestService run. If this is called inside of
---a script running inside of the TestService, this will initiate a
---breakpoint on the line that invoked the error.
---
TestService.Fail = function(self, description, source, line) end;
---@class RBXScriptSignal.ServerCollectConditionalResult : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ServerCollectConditionalResult, callback: fun(condition: bool, text: string, script: Instance, line: int)): RBXScriptConnection
---Fired when the server should collect a conditional test result.
---
TestService.ServerCollectConditionalResult = nil;
---@class RBXScriptSignal.ServerCollectResult : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ServerCollectResult, callback: fun(text: string, script: Instance, line: int)): RBXScriptConnection
---Fired when the server should collect a test result.
---
TestService.ServerCollectResult = nil;
---@class TextBox : GuiObject, GuiBase2d, GuiBase, Instance
---@field public ClearTextOnFocus bool
---@field public ContentText string
---@field public CursorPosition int
---@field public EnableRealtimeFilteringHints bool
---@field public Font Font
---@field public FontFace Font
---@field public FontSize FontSize
---@field public LineHeight float
---@field public ManualFocusRelease bool
---@field public MaxVisibleGraphemes int
---@field public MultiLine bool
---@field public OverlayNativeInput bool
---@field public PlaceholderColor3 Color3
---@field public PlaceholderText string
---@field public ReturnKeyType ReturnKeyType
---@field public RichText bool
---@field public SelectionStart int
---@field public ShowNativeInput bool
---@field public Text string
---@field public TextBounds Vector2
---@field public TextColor BrickColor
---@field public TextColor3 Color3
---@field public TextEditable bool
---@field public TextFits bool
---@field public TextInputType TextInputType
---@field public TextScaled bool
---@field public TextSize float
---@field public TextStrokeColor3 Color3
---@field public TextStrokeTransparency float
---@field public TextTransparency float
---@field public TextTruncate TextTruncate
---@field public TextWrap bool
---@field public TextWrapped bool
---@field public TextXAlignment TextXAlignment
---@field public TextYAlignment TextYAlignment
---@field public FocusLost RBXScriptSignal.FocusLost
---@field public Focused RBXScriptSignal.Focused
---@field public ReturnPressedFromOnScreenKeyboard RBXScriptSignal.ReturnPressedFromOnScreenKeyboard
---<img src="/assets/blt1aeb8750aa338cd7/TextBox.gif" alt="A TextBox being clicked on and typed into in Roblox Studio"  />
---
---A **TextBox** allows the player to provide text input. It behaves similarly to
---a `TextButton`, except that a single TextBox can be put in focus by clicking,
---tapping or gamepad selection. While in focus, the player can use a keyboard to
---change the `TextBox/Text|Text` property.
---
---- If there is no text, the `TextBox/PlaceholderText|PlaceholderText` will be
---  visible. This is useful prompting players of the kind or format of data they
---  should input.
---- By default, the `TextBox/ClearTextOnFocus|ClearTextOnFocus` property is
---  enabled and ensures there is no existing text when a TextBox is focused.
---  This may not be desirable for text that should be editable by the player.
---- The `TextBox/MultiLine|MultiLine` property allows players to enter multiple
---  lines of text with newline characters (`\n`).
---
---The `ContextActionService` honors TextBox keybinds and will automatically
---prevent key press events from being passed to actions bound with
---`ContextActionService/BindAction`. `UserInputService/InputBegan` and related
---events will still fire while a TextBox is in focus.
---
---## Focus State
---
---It is possible to detect and change the focus state of a TextBox:
---
---- You can use `TextBox/CaptureFocus|CaptureFocus` when a dialogue appears so
---  that the player doesn't have to click on a TextBox when it becomes
---  available; you can use `ContextActionService/BindAction` to bind a certain
---  key to focus a TextBox using this function. When a TextBox comes into focus,
---  the `TextBox/Focused|Focused` event fires.
---- You can detect if a certain TextBox is in focus by using
---  `TextBox/IsFocused|IsFocused`. Alternatively,
---  `UserInputService/GetFocusedTextBox` can be used to check if any TextBox is
---  in focus.
---- When the player is done inputting text, the `TextBox/FocusLost|FocusLost`
---  event fires, indicating if the user pressed <kbd>Enter</kbd> to submit text
---  along with the `InputObject` that caused the loss of focus. When using on
---  screen keyboards on mobile and console,
---  `TextBox/ReturnPressedFromOnScreenKeyboard|ReturnPressedFromOnScreenKeyboard`
---  may also fire.
---- If some more important matter comes up during gameplay, you can
---  `TextBox/ReleaseFocus|ReleaseFocus` of the TextBox so that a player's
---  keyboard input returns to your game.
---
---## Text Editing
---
---<img src="/assets/blte51c1caa1e82699e/TextBox-Selection.gif" alt="A TextBox with text being selected, copied and pasted" />
---
---A TextBox supports text selection through its
---`TextBox/CursorPosition|CursorPosition` and
---`TextBox/SelectionStart|SelectionStart` properties. Using
---`Instance/GetPropertyChangedSignal|GetPropertyChangedSignal`, you can detect
---when a selection changes. Additionally, it is possible for players to copy and
---paste text within a TextBox, enabling basic clipboard support.
---
---**Text Filtering Notice** Games that facilitate player-to-player communication
---using text, such as custom chat or nametags, must properly filter such text
---using `TextService/FilterStringAsync` or `Chat/FilterStringAsync`. If this is
---not properly done, your game may receive moderation action.
---
local TextBox;
---Determines whether clicking on the TextBox will clear its `TextBox/Text`
---property
---
TextBox.ClearTextOnFocus = nil;
---
TextBox.ContentText = nil;
---**CursorPosition** determines the offset of the text cursor in bytes, or
----1 if the TextBox is not currently being edited. A value of 1 represents
---the beginning, the position before the first byte in the
---`TextBox/Text|Text` property. When used in conjunction with the
---`TextBox/SelectionStart|SelectionStart` property, it is possible to both
---get and set selected text within a TextBox.
---
---![A visual explanation of how CursorPosition works][1]
---
---It should be noted that the units of this property is **bytes** and that
---many unicode characters such as emoji are **longer than 1 byte**. For
---instance, if a player types into the TextBox "Hello👋" &ndash; "Hello"
---immediately followed by the waving hand sign &ndash; the cursor position
---would be 10, not 7, since the emoji uses 4 bytes.
---
---[1]: /assets/blteef3c173301b0338/TextBox.CursorPosition.jpg
---
TextBox.CursorPosition = nil;
---
TextBox.EnableRealtimeFilteringHints = nil;
---The Font property selects one of several pre-defined `Enum/Font|fonts`
---with which the UI element will render its text. Some fonts have bold,
---italic and/or light variants (as there is no font-weight or font-style
---properties).
---
---With the exception of the "Legacy" font, each font will render text with
---the line height equal to the `TextBox/TextSize` property. The "Code" font
---is the only monospace font. It has the unique property that each character
---has the exact same width and height ratio of 1:2. The width of each
---character is approximately half the `TextBox/TextSize` property.
---
TextBox.Font = nil;
---
TextBox.FontFace = nil;
---This property determines the font size of a `TextBox|GUI` object.
---
TextBox.FontSize = nil;
---Controls the height of lines, as a multiple of the font's em square size,
---by scaling the spacing between lines of text in the `TextBox`. Valid
---values range from 1.0 to 3.0, defaulting to 1.0.
---
TextBox.LineHeight = nil;
---
TextBox.ManualFocusRelease = nil;
---This property controls the maximum number of graphemes (or units of text)
---that are shown on the `TextBox`, regardless of whether it's showing the
---`TextBox/PlaceholderText` or `TextBox/Text`.
---
---Changing the property does not change the position or size of the visible
---graphemes - the layout will be calculated as if all graphemes are visible.
---
---Setting the property to -1 disables the limit and shows the entirety of
---the `TextBox/Text`.
---
TextBox.MaxVisibleGraphemes = nil;
---When set to true, text inside a TextBox is able to move onto multiple
---lines. This also enables players to use the enter key to move onto a new
---line.
---
TextBox.MultiLine = nil;
---
TextBox.OverlayNativeInput = nil;
---Sets the text color that gets used when no text has been entered into the
---TextBox yet.
---
TextBox.PlaceholderColor3 = nil;
---Sets the text that gets displayed when no text has been entered into the
---TextBox yet.
---
TextBox.PlaceholderText = nil;
---
TextBox.ReturnKeyType = nil;
---This property determines whether the `TextBox` renders the `TextBox/Text`
---string using rich text formatting. Rich text uses simple markup tags to
---style sections of the string in bold, italics, specific colors, and more.
---
---To use rich text, simply include formatting tags in the `TextBox/Text`
---string.
---
---Note that when the `TextBox` has this property enabled and the box gains
---focus, the user will be able to edit and interact with the complete XML
---string, including all of the formatting tags. When focus is lost, the text
---will automatically parse and render the tags as rich text.
---
TextBox.RichText = nil;
---Determines the starting position of a text selection, or -1 if the TextBox
---has no range of selected text. If the value is -1 or equivalent to
---`TextBox/CursorPosition|CursorPosition`, there is no range of text
---selected. This property uses the same positioning logic as CursorPosition.
---SelectionStart will be greater than CursorPosition if the cursor is at the
---beginning of a selection, and less than CursorPosition if the cursor is at
---the end.
---
TextBox.SelectionStart = nil;
---If set to true, input native to the platform is used instead of Roblox's
---built-in keyboard.
---
TextBox.ShowNativeInput = nil;
---The Text property determines the content rendered by the UI element. The
---visual properties of the string rendered to the screen is determined by
---`TextBox/TextColor3`, `TextBox/TextTransparency`, `TextBox/TextSize`,
---`TextBox/Font`, `TextBox/TextScaled`, `TextBox/TextWrapped`,
---`TextBox/TextXAlignment` and `TextBox/TextYAlignment`.
---
---It is possible to render emoji (for example, 😃) and other symbols. These
---special symbols aren't affected by the `TextBox/TextColor3` property.
---These can be pasted into `Script` and `LocalScript` objects, as well as
---the field within the Properties window.
---
---This property may contain newline characters, however, it is not possible
---to type newline characters within the Properties window. Similarly, this
---property may contain a tab character, but it will render as a space
---instead.
---
TextBox.Text = nil;
---The read-only property TextBounds reflects the absolute size of rendered
---text in offsets. In other words, if you were to try to fit text into a
---rectangle, this property would reflect the minimum dimensions of the
---rectangle you would need in order to fit the text.
---
---Using `TextService/GetTextSize`, you can predict what TextBounds will be
---on a TextLabel given a string, `TextBox/Font`, `TextBox/TextSize` and
---frame size.
---
TextBox.TextBounds = nil;
---
TextBox.TextColor = nil;
---This property determines the color of all the text rendered by a
---`GuiObject|GUI` element. This property along with `TextBox/Font`,
---`TextBox/TextSize` and `TextBox/TextTransparency` will determine the
---visual properties of text. Text is rendered after the text stroke
---(`TextBox/TextStrokeColor3`).
---
---It's important that text is easily read by players! Be sure to choose
---colors with little-to-no saturation, like white, grey, or black. Make sure
---the color of your text is contrasted by the `TextBox/BackgroundColor3` of
---the UI element. If the element has a transparent background, try applying
---a black `TextBox/TextStrokeColor3` to help contrast the text with the 3D
---world behind it.
---
TextBox.TextColor3 = nil;
---**TextEditable** determines whether the user can change the
---`TextBox/Text|Text` through input. It is recommended to disable
---`TextBox/ClearTextOnFocus|ClearTextOnFocus` when this property is
---disabled, otherwise the Text could be cleared on-focus. This property is
---useful to make read-only TextBoxes from which content can be copied
---in-game.
---
TextBox.TextEditable = nil;
---Whether the text fits within the constraints of the TextBox.
---
TextBox.TextFits = nil;
---
TextBox.TextInputType = nil;
---Rather than using TextScaled, we recommend you consider using
---`GuiObject/AutomaticSize|AutomaticSize`, a new method to dynamically size
---UI that will give you the best visual result possible.
---
---The TextScaled property determines whether text is scaled so that it fills
---the entire UI element's space. When this is enabled, `TextBox/TextSize` is
---ignored and `TextBox/TextWrapped` is automatically enabled. This property
---is useful for text-rendering UI elements within
---`BillboardGui|BillboardGuis`.
---
---When this property is used for screen-space UI, it may be desirable to use
---a `UITextSizeConstraint` to restrict the range of possible text sizes.
---
---#### TextScaled and AutomaticSize
---
---It's recommended that developers avoid usage of TextScaled and adjust UI
---to take advantage of the AutomaticSize property instead. Here are the core
---differences between the two properties:
---
---- TextScaled scales the content (text) to accommodate the UI. Without
---  careful consideration, some text may become unreadable if scaled too
---  small.
---- AutomaticSize resizes the UI to accommodate content.
---
---With AutomaticSize, you're able to adjust your UI to accommodate the
---content (text) while maintaining a consistent font size. For more
---information on how to use automatic sizing, see the UI Automatic Size
---article.
---
---We suggest that you don't apply both TextScaled and AutomaticSize on the
---same UI object. If you apply both properties:
---
---- AutomaticSize determines the maximum amount of available space that a
---  `GuiObject` can use (in this case, text)
---- TextScaled uses the available space determined by AutomaticSize, to
---  scale the font size to fit the available space, which will expand up to
---  the maximum font size (100), if there are no size constraints
---- The end result will be: text goes to 100 font size and the UI object
---  will expand to fit that text
---
---Using both AutomaticSize and TextScaled at the same time can result in
---significant scaling differences than when AutomaticSize is off. Here is an
---example of an automatically sized TextLabel (with no minimum size) that
---has TextScaled enabled:
---
---![TextScaled Demo][1]
---
---Note how automatic size changes the TextLabel's size relative to the
---parent frame's size. Subsequently, as the TextLabel is resized, the
---TextScaled property scales the text to the maximum amount of space
---available by the automatically sized TextLabel.
---
---[1]: /assets/blt09c403ee1409b090/TextScaledDemo.gif
---
TextBox.TextScaled = nil;
---The TextSize property determines the height in offsets of one line of
---rendered text. The unit is in offsets, not points (which is used in most
---document editing programs). The "Legacy" font does not hold this property.
---
TextBox.TextSize = nil;
---The TextStrokeColor3 property sets the color of the stroke, or outline, of
---rendered text. This property and `TextBox/TextStrokeTransparency`
---determine the visual properties of the text stroke.
---
---Text stroke is rendered before normal text and is simply 4 renderings of
---the same text in +/- 1 pixel offsets in each direction. Text stroke
---rendering works independently and identically to `TextBox/TextColor3` and
---`TextBox/TextTransparency`.
---
TextBox.TextStrokeColor3 = nil;
---The TextStrokeTransparency property sets the transparency of the stroke,
---or outline, of rendered text. This property and `TextBox/TextStrokeColor3`
---determine the visual properties of the text stroke.
---
---Text stroke is rendered before normal text and is simply 4 renderings of
---the same text in +/- 1 pixel offsets in each direction. Text stroke
---rendering works independently and identically to `TextBox/TextColor3` and
---`TextBox/TextTransparency`. Since text stroke is simply multiple
---renderings of the same transparency, this property is essentially
---multiplicative on itself four times over (e.g. a TextStrokeTransparency of
---0.5 appears about the same as TextTransparency of 0.0625, or 0.5^4).
---Therefore, it's recommended to set TextStrokeTransparency to a value in
---the range of 0.75 to 1 for more a more subtle effect.
---
TextBox.TextStrokeTransparency = nil;
---The TextColor3 property determines the transparency of all the text
---rendered by a UI element. This property along with `TextBox/Font`,
---`TextBox/TextSize` and `TextBox/TextColor3` will determine the visual
---properties of text. Text is rendered after the text stroke
---(`TextBox/TextStrokeTransparency`).
---
---Fading text in using a numeric for-loop is a fantastic way to draw a
---player's attention to text appearing on screen.
---
---```
----- Count backwards from 1 to 0, decrementing by 0.1
---for i = 1, 0, -.1 do
---   textLabel.TextTransparency = i
---   wait(.1)
---end
---```
---
TextBox.TextTransparency = nil;
---Controls the truncation of the text displayed in this TextBox.
---
TextBox.TextTruncate = nil;
---
TextBox.TextWrap = nil;
---When enabled, this property will render text on multiple lines within a
---`TextBox|GUI` element's space so that `TextBox/TextBounds` will never
---exceed the `GuiBase2d/AbsoluteSize` of the GUI element.
---
---This is achieved by breaking long lines of text into multiple lines. Line
---breaks will prefer whitespace; should a long unbroken word exceed the
---width of the element, that word will be broken into multiple lines.
---
---If further line breaks would cause the vertical height of the text (the Y
---component of `TextBox/TextBounds`) to exceed the vertical height of the
---element (the Y component of `GuiBase2d/AbsoluteSize`), then that line will
---not be rendered at all.
---
TextBox.TextWrapped = nil;
---TextXAlignment determines the horizontal alignment (X-axis) of text
---rendered within a UI element's space. It functions similarly to the CSS
---text-align property, with left, right and center values (there is no
---justify option). For Left and Right, text is rendered such that the
---left/right text bounds just touch the edge of the UI element rectangle.
---For Center, each line of text is centered on the very center of the UI
---element rectangle.
---
---This property is used in conjunction with `TextBox/TextYAlignment` to
---fully determine text alignment on both axes. This property won't affect
---the read-only properties `TextBox/TextBounds` and `TextBox/TextFits`.
---
TextBox.TextXAlignment = nil;
---TextYAlignment determines the vertical alignment (Y-axis) of text rendered
---within a UI element's space. For Top and Bottom, text is rendered such
---that the top/bottom text bounds just touch the edge of the UI element
---rectangle. For Center, text is rendered such that there is an equal space
---from the top bounds of the text to the top of the element and the bottom
---bounds of the text to the bottom of the element.
---
---This property is used in conjunction with `TextBox/TextXAlignment` to
---fully determine text alignment on both axes. This property won't affect
---the read-only properties `TextBox/TextBounds` and `TextBox/TextFits`.
---
TextBox.TextYAlignment = nil;
---@return bool
---Returns true if the textbox is focused, or false if it is not.
---
TextBox.IsFocused = function(self) end;
---@return void
TextBox.ResetKeyboardMode = function(self) end;
---@return void
---Forces the client to focus on the TextBox.
---
TextBox.CaptureFocus = function(self) end;
---@param text string
---@return void
TextBox.SetTextFromInput = function(self, text) end;
---@param submitted bool
---@return void
---Forces the client to unfocus the TextBox. The `submitted` parameter allows
---you to over-ride the `enterPressed` parameter in the `TextBox/FocusLost`
---event.
---
---This item should be used with a `LocalScript` in order to work as expected
---in online mode.
---
---The code shown below will force the client to unfocus the 'TextBox' 5
---seconds after it's selected:
---
---```lua
---local TextBox = script.Parent
---TextBox.Focused:Connect(function()
---	wait(5)
---	TextBox:ReleaseFocus()
---end)
---```
---
---Please be aware that the above example assumes that it's in a LocalScript,
---as a child of a TextBox.
---
TextBox.ReleaseFocus = function(self, submitted) end;
---@class RBXScriptSignal.FocusLost : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.FocusLost, callback: fun(enterPressed: bool, inputThatCausedFocusLoss: InputObject)): RBXScriptConnection
---The FocusLost event fires when the client lets their focus off the
---TextBox - typically when a client clicks/taps on a TextBox to begin text
---entry. This also fires if a TextBox forces focus on the user.
---
---It can be used alongside `TextBox.Focus` to track when a TextBox gains and
---loses focus.
---
---See also the `UserInputService/TextBoxFocused` and
---`UserInputService/TextBoxFocusReleased` for similar functions that rely on
---the UserInputService service.
---
---This event will only fire when used in a `LocalScript`.
---
TextBox.FocusLost = nil;
---@class RBXScriptSignal.Focused : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Focused, callback: fun()): RBXScriptConnection
---The Focused event fires when the `TextBox` gains focus - typically when a
---client clicks/taps on a TextBox to begin text entry. This also fires if a
---TextBox forces focus on the user.
---
---It can be used alongside `TextBox.FocusLost` to track when a TextBox gains
---and loses focus.
---
---See also the `UserInputService/TextBoxFocused` and
---`UserInputService/TextBoxFocusReleased` for similar functions that rely on
---the UserInputService service.
---
---This event will only fire when used in a `LocalScript`.
---
TextBox.Focused = nil;
---@class RBXScriptSignal.ReturnPressedFromOnScreenKeyboard : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ReturnPressedFromOnScreenKeyboard, callback: fun()): RBXScriptConnection
---
TextBox.ReturnPressedFromOnScreenKeyboard = nil;
---@class TextBoxService : Instance
local TextBoxService;
---@class TextButton : GuiButton, GuiObject, GuiBase2d, GuiBase, Instance
---@field public ContentText string
---@field public Font Font
---@field public FontFace Font
---@field public FontSize FontSize
---@field public LineHeight float
---@field public LocalizedText string
---@field public MaxVisibleGraphemes int
---@field public RichText bool
---@field public Text string
---@field public TextBounds Vector2
---@field public TextColor BrickColor
---@field public TextColor3 Color3
---@field public TextFits bool
---@field public TextScaled bool
---@field public TextSize float
---@field public TextStrokeColor3 Color3
---@field public TextStrokeTransparency float
---@field public TextTransparency float
---@field public TextTruncate TextTruncate
---@field public TextWrap bool
---@field public TextWrapped bool
---@field public TextXAlignment TextXAlignment
---@field public TextYAlignment TextYAlignment
---A TextButton behaves similarly to `TextLabel` in regards to rendering with the
---additional behaviors of a `GuiButton`. It defines the same text-rendering
---properties as a `TextLabel` does.
---
---You can disable text rendering by setting `TextButton/TextTransparency` to 1.
---This will leave you with a plain rectangle that can be used as a button.
---
local TextButton;
---This property provides a copy of `TextButton/Text` that contains exactly
---what is being rendered by the `TextButton`. This is useful for eliminating
---style tags used for rich text.
---
---#### Example
---
---When `TextButton/RichText` is enabled, the `TextButton/ContentText`
---property shows the text as it appears to the player.
---
---<table>
---    <thead>
---        <tr>
---            <th>RichText</th>
---            <th>Text</th>
---            <th>ContentText</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td>false</td>
---            <td>&lt;b&gt;Hello,&lt;br/&gt; world!&lt;/b&gt;</td>
---            <td>&lt;b&gt;Hello,&lt;br/&gt; world!&lt;/b&gt;</td>
---        </tr>
---        <tr>
---            <td>true</td>
---            <td>&lt;b&gt;Hello,&lt;br/&gt; world!&lt;/b&gt;</td>
---            <td>Hello,<br/> world!</td>
---        </tr>
---    </tbody>
---  </table>
---
TextButton.ContentText = nil;
---The Font property selects one of several pre-defined fonts with which the
---UI element will render its text. Some fonts have bold, italic and/or light
---variants (as there is no font-weight or font-style properties).
---
---With the exception of the "Legacy" font, each font will render text with
---the line height equal to the `TextButton/TextSize` property. The "Code"
---font is the only monospace font. It has the unique property that each
---character has the exact same width and height ratio of 1:2. The width of
---each character is approximately half the `TextButton/TextSize` property.
---
TextButton.Font = nil;
---
TextButton.FontFace = nil;
---This property determines the font size to be used.
---
TextButton.FontSize = nil;
---Controls the height of lines, as a multiple of the font's em square size,
---by scaling the spacing between lines of text in the `TextButton`. Valid
---values range from 1.0 to 3.0, defaulting to 1.0.
---
TextButton.LineHeight = nil;
---This property sets whether a `TextButton` should be `GuiBase2d/Localize`
---or not.
---
TextButton.LocalizedText = nil;
---This property controls the maximum number of graphemes (or units of text)
---that are shown on the `TextButton`. It is primarily provided as an easy
---way to create a "typewriter effect" where the characters appear one at a
---time.
---
---Changing the property does not change the position or size of the visible
---graphemes - the layout will be calculated as if all graphemes are visible.
---
---Setting the property to -1 disables the limit and shows the entirety of
---the `TextButton/Text`.
---
TextButton.MaxVisibleGraphemes = nil;
---This property determines whether the `TextButton` renders the
---`TextButton/Text` string using rich text formatting. Rich text uses simple
---markup tags to style sections of the string in bold, italics, specific
---colors, and more.
---
---To use rich text, simply include formatting tags in the `TextButton/Text`
---string.
---
TextButton.RichText = nil;
---The Text property determines the content rendered by the UI element. The
---visual properties of the string rendered to the screen is determined by
---`TextButton/TextColor3`, `TextButton/TextTransparency`,
---`TextButton/TextSize`, `TextButton/Font`, `TextButton/TextScaled`,
---`TextButton/TextWrapped`, `TextButton/TextXAlignment` and
---`TextButton/TextYAlignment`.
---
---It is possible to render emoji (for example, 😃) and other symbols. These
---special symbols aren't affected by the `TextButton/TextColor3` property.
---These can be pasted into `Script` and `LocalScript` objects, as well as
---the field within the Properties window.
---
---This property may contain newline characters, however, it is not possible
---to type newline characters within the Properties window. Similarly, this
---property may contain a tab character, but it will render as a space
---instead.
---
TextButton.Text = nil;
---The read-only property TextBounds reflects the absolute size of rendered
---text in offsets. In other words, if you were to try to fit text into a
---rectangle, this property would reflect the minimum dimensions of the
---rectangle you would need in order to fit the text.
---
---Using `TextService/GetTextSize`, you can predict what TextBounds will be
---on a TextLabel given a string, `TextButton/Font`, `TextButton/TextSize`
---and frame size.
---
TextButton.TextBounds = nil;
---This property determines the color of text.
---
TextButton.TextColor = nil;
---This property determines the color of all the text rendered by a
---`TextButton|GUI` element. This property along with `TextButton/Font`,
---`TextButton/TextSize` and `TextButton/TextTransparency` will determine the
---visual properties of text. Text is rendered after the text stroke
---(`TextButton/TextStrokeColor3`).
---
---It's important that text is easily read by players! Be sure to choose
---colors with little-to-no saturation, like white, grey, or black. Make sure
---the color of your text is contrasted by the `TextButton/BackgroundColor3`
---of the UI element. If the element has a transparent background, try
---applying a black `TextButton/TextStrokeColor3` to help contrast the text
---with the 3D world behind it.
---
TextButton.TextColor3 = nil;
---A boolean representation of whether the TextButton's text fits within the
---size of it.
---
TextButton.TextFits = nil;
---Rather than using TextScaled, we recommend you consider using
---`GuiObject/AutomaticSize|AutomaticSize`, a new method to dynamically size
---UI that will give you the best visual result possible.
---
---The TextScaled property determines whether text is scaled so that it fills
---the entire UI element's space. When this is enabled, `TextButton/TextSize`
---is ignored and `TextButton/TextWrapped` is automatically enabled. This
---property is useful for text-rendering UI elements within
---`BillboardGui|BillboardGuis`.
---
---When this property is used for screen-space UI, it may be desirable to use
---a `UITextSizeConstraint` to restrict the range of possible text sizes.
---
---#### TextScaled and AutomaticSize
---
---It's recommended that developers avoid usage of TextScaled and adjust UI
---to take advantage of the AutomaticSize property instead. Here are the core
---differences between the two properties:
---
---- TextScaled scales the content (text) to accommodate the UI. Without
---  careful consideration, some text may become unreadable if scaled too
---  small.
---- AutomaticSize resizes the UI to accommodate content.
---
---With AutomaticSize, you're able to adjust your UI to accommodate the
---content (text) while maintaining a consistent font size. For more
---information on how to use automatic sizing, see the UI Automatic Size
---article.
---
---We suggest that you don't apply both TextScaled and AutomaticSize on the
---same UI object. If you apply both properties:
---
---- AutomaticSize determines the maximum amount of available space that a
---  `GuiObject` can use (in this case, text)
---- TextScaled uses the available space determined by AutomaticSize, to
---  scale the font size to fit the available space, which will expand up to
---  the maximum font size (100), if there are no size constraints
---- The end result will be: text goes to 100 font size and the UI object
---  will expand to fit that text
---
---Using both AutomaticSize and TextScaled at the same time can result in
---significant scaling differences than when AutomaticSize is off. Here is an
---example of an automatically sized TextLabel (with no minimum size) that
---has TextScaled enabled:
---
---![TextScaled Demo][1]
---
---Note how automatic size changes the TextLabel's size relative to the
---parent frame's size. Subsequently, as the TextLabel is resized, the
---TextScaled property scales the text to the maximum amount of space
---available by the automatically sized TextLabel.
---
---[1]: /assets/blt09c403ee1409b090/TextScaledDemo.gif
---
TextButton.TextScaled = nil;
---The TextSize property determines the height in offsets of one line of
---rendered text. The unit is in offsets, not points (which is used in most
---document editing programs). The "Legacy" font does not hold this property.
---
TextButton.TextSize = nil;
---The TextStrokeColor3 property sets the color of the stroke, or outline, of
---rendered text. This property and `TextButton/TextStrokeTransparency`
---determine the visual properties of the text stroke.
---
---Text stroke is rendered before normal text and is simply 4 renderings of
---the same text in +/- 1 pixel offsets in each direction. Text stroke
---rendering works independently and identically to `TextButton/TextColor3`
---and `TextButton/TextTransparency`.
---
TextButton.TextStrokeColor3 = nil;
---The TextStrokeTransparency property sets the transparency of the stroke,
---or outline, of rendered text. This property and
---`TextButton/TextStrokeColor3` determine the visual properties of the text
---stroke.
---
---Text stroke is rendered before normal text and is simply 4 renderings of
---the same text in +/- 1 pixel offsets in each direction. Text stroke
---rendering works independently and identically to `TextButton/TextColor3`
---and `TextButton/TextTransparency`. Since text stroke is simply multiple
---renderings of the same transparency, this property is essentially
---multiplicative on itself four times over (e.g. a TextStrokeTransparency of
---0.5 appears about the same as TextTransparency of 0.0625, or 0.5^4).
---Therefore, it's recommended to set TextStrokeTransparency to a value in
---the range of 0.75 to 1 for more a more subtle effect.
---
TextButton.TextStrokeTransparency = nil;
---The TextColor3 property determines the transparency of all the text
---rendered by a UI element. This property along with `TextButton/Font`,
---`TextButton/TextSize` and `TextButton/TextColor3` will determine the
---visual properties of text. Text is rendered after the text stroke
---(`TextButton/TextStrokeTransparency`).
---
---Fading text in using a numeric for-loop is a fantastic way to draw a
---player's attention to text appearing on screen.
---
---```
----- Count backwards from 1 to 0, decrementing by 0.1
---for i = 1, 0, -.1 do
---   textLabel.TextTransparency = i
---   wait(.1)
---end
---```
---
TextButton.TextTransparency = nil;
---Controls the truncation of the text displayed in this TextButton.
---
TextButton.TextTruncate = nil;
---This property determines whether or not text should wrap at the edges of
---the object.
---
TextButton.TextWrap = nil;
---When enabled, this property will render text on multiple lines within a
---`TextButton|GUI` element's space so that `TextButton/TextBounds` will
---never exceed the `GuiBase2d/AbsoluteSize` of the UI element.
---
---This is achieved by breaking long lines of text into multiple lines. Line
---breaks will prefer whitespace; should a long unbroken word exceed the
---width of the element, that word will be broken into multiple lines.
---
---If further line breaks would cause the vertical height of the text (the Y
---component of `TextButton/TextBounds`) to exceed the vertical height of the
---element (the Y component of `GuiBase2d/AbsoluteSize`), then that line will
---not be rendered at all.
---
TextButton.TextWrapped = nil;
---TextXAlignment determines the horizontal alignment (X-axis) of text
---rendered within a UI element's space. It functions similarly to the CSS
---text-align property, with left, right and center values (there is no
---justify option). For Left and Right, text is rendered such that the
---left/right text bounds just touch the edge of the UI element rectangle.
---For Center, each line of text is centered on the very center of the UI
---element rectangle.
---
---This property is used in conjunction with `TextButton/TextYAlignment` to
---fully determine text alignment on both axes. This property won't affect
---the read-only properties `TextButton/TextBounds` and
---`TextButton/TextFits`.
---
TextButton.TextXAlignment = nil;
---TextYAlignment determines the vertical alignment (Y-axis) of text rendered
---within a UI element's space. For Top and Bottom, text is rendered such
---that the top/bottom text bounds just touch the edge of the UI element
---rectangle. For Center, text is rendered such that there is an equal space
---from the top bounds of the text to the top of the element and the bottom
---bounds of the text to the bottom of the element.
---
---This property is used in conjunction with `TextButton/TextXAlignment` to
---fully determine text alignment on both axes. This property won't affect
---the read-only properties `TextButton/TextBounds` and
---`TextButton/TextFits`.
---
TextButton.TextYAlignment = nil;
---@param text string
---@return void
TextButton.SetTextFromInput = function(self, text) end;
---@class TextChannel : Instance
---@field public MessageReceived RBXScriptSignal.MessageReceived
---Represents a text chat channel.
---
---Contains `TextSource`s as descendants.
---
---To send a chat message to the `TextChannel`, call `TextChannel:SendAsync` from
---a `LocalScript`. The corresponding `TextSource` of the user with
---`TextSource.CanSend = true` must be in that channel.
---
local TextChannel;
---@param systemMessage string
---@param metadata string
---@return TextChatMessage
---Displays a system message to user. This can only be used in a
---`LocalScript`. Messages are only visible to that user and are not
---automatically filtered or localized.
---
TextChannel.DisplaySystemMessage = function(self, systemMessage, metadata) end;
---@param userId int64
---@return Tuple
---Adds a `TextSource` to the `TextChannel` given userId of the user (with
---`Player.UserId`).
---
---This can only be used in a `Script`.
---
---If a `TextSource` representing the user does not exist, this adds a
---`TextSource`.
---
---If a
---'TextSource`representing the user does exist, this returns the`TextSource`.
---
---If the user has chat off or isn't in the server, this returns a tuple
---`nil`, `false`.
---
TextChannel.AddUserAsync = function(self, userId) end;
---@param message string
---@param metadata string
---@return TextChatMessage
---Sends a `TextChatMessage` to the server. This can only be used in a
---`LocalScript`.
---
TextChannel.SendAsync = function(self, message, metadata) end;
---@class RBXScriptSignal.MessageReceived : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.MessageReceived, callback: fun(incomingMessage: TextChatMessage)): RBXScriptConnection
---Fires when a `TextChannel:SendAsync` response is received by the server or
---`TextChannel:DisplaySystemMessage` is invoked.
---
---Use `TextChatMessage` parameter to get the `TextSource` and the text of
---the message (with `TextChatMessage.Text`).
---
---The `TextChatMessage` parameter can be mutated by any functions bound to
---`TextChatMessage.OnIncomingMessage` and `TextChannel.OnIncomingMessage`.
---
TextChannel.MessageReceived = nil;
---@class TextChatCommand : Instance
---@field public Enabled bool
---@field public PrimaryAlias string
---@field public SecondaryAlias string
---@field public Triggered RBXScriptSignal.Triggered
---Represents a text chat command. It must be parented to `TextChatService` as a
---descendant to function properly.
---
local TextChatCommand;
---Determines whether the `TextChatCommand` is enabled.
---
---When disabled, messages that match "/{PrimaryAlias}" or
---"/{SecondaryAlias}" is not sunk and is sent to other users.
---
---Use this to disable default commands on a case-by-case basis.
---
TextChatCommand.Enabled = nil;
---A primary alias used to trigger the `TextChatCommand`.
---
---If a user sends a message with `TextChannel:SendAsync` that matches
---"/{`TextChatCommand.PrimaryAlias`}", then the message is not sent and
---instead `TextChatCommand.Triggered` is fired.
---
TextChatCommand.PrimaryAlias = nil;
---A secondary alias used to trigger the `TextChatCommand`.
---
TextChatCommand.SecondaryAlias = nil;
---@class RBXScriptSignal.Triggered : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Triggered, callback: fun(originTextSource: TextSource, unfilteredText: string)): RBXScriptConnection
---An event that developers can bind to execute commands.
---
---When a user sends a message to the server via `TextChannel:SendAsync`, the
---message is intercepted by the `TextChatCommand` and not replicated to
---other users if the content of the message matches
---"/{`TextChatCommand.PrimaryAlias`}" or
---"/{`TextChatCommand.SecondaryAlias`}".
---
---For example, for a `TextChatCommand` with `TextChatCommand.PrimaryAlias`
---as "mute", if a user sends "/mute SomeUserName", then the relevant
---`TextChatCommand` for mute will fire its `TextChatCommand.Triggered`. The
---message "/mute SomeUserName" is not replicated to other users.
---
TextChatCommand.Triggered = nil;
---@class TextChatConfigurations : Instance
local TextChatConfigurations;
---@class TextChatMessage : Instance
---@field public MessageId string
---@field public Metadata string
---@field public PrefixText string
---@field public Status TextChatMessageStatus
---@field public Text string
---@field public TextChannel TextChannel
---@field public TextSource TextSource
---@field public Timestamp DateTime
---Immutable data object representing a text chat message.
---
local TextChatMessage;
---A unique identifier for the `TextChatMessage`.
---
TextChatMessage.MessageId = nil;
---A general purpose field for storing miscellaneous data about the
---`TextChatMessage`. The second argument of `TextChannel:SendAsync` and
---`TextChannel:DisplaySystemMessage` is used to populate this field.
---
---If `TextChatService.CreateDefaultTextChannels` is `true`, default system
---messages sent to the system channel have unique `TextChatMessage.Metadata`
---values.
---
---Use this field to apply additional formatting for special messages within
---`TextChatService.OnIncomingMessage` and `TextChannel.OnIncomingMessage`
---callbacks.
---
TextChatMessage.Metadata = nil;
---A prefix to add to a user's message. This supports Rich Text, so
---developers can set custom properties for this text to support chat tags.
---
---By default, `TextChatMessage.PrefixText` is the name of the `TextSource`,
---which is the `Player.DisplayName` of the user associated with the
---`TextSource` via `TextSource.UserId`.
---
TextChatMessage.PrefixText = nil;
---Indicates the status of the `TextChatMessage`.
---
TextChatMessage.Status = nil;
---The filtered text message for the user. Different users may receive
---different strings from this property based on filtering rules. It can be
---an empty string.
---
TextChatMessage.Text = nil;
---A reference to the origin `TextChannel`.
---
TextChatMessage.TextChannel = nil;
---A reference to the origin `TextSource`.
---
TextChatMessage.TextSource = nil;
---A timestamp of when the message was originally sent.
---
TextChatMessage.Timestamp = nil;
---@class TextChatMessageProperties : Instance
---@field public PrefixText string
---@field public Text string
---Overrides `TextChatMessage` properties when returned by callbacks defined in
---`TextChatService.OnIncomingMessage` or `TextChannel.OnIncomingMessage`.
---
---`TextChatMessageProperties` overrides the matching properties of the
---corresponding `TextChatMessage`.
---
---This can be used to add rich text tags to a message.
---
local TextChatMessageProperties;
---The `TextChatMessage.PrefixText` to override.
---
TextChatMessageProperties.PrefixText = nil;
---The `TextChatMessage.Text` to override.
---
TextChatMessageProperties.Text = nil;
---@class TextChatService : Instance
---@field public ChatVersion ChatVersion
---@field public CreateDefaultCommands bool
---@field public CreateDefaultTextChannels bool
---@field public MessageReceived RBXScriptSignal.MessageReceived
---@field public SendingMessage RBXScriptSignal.SendingMessage
---A service handling in-experience text chat. TextChatService handles various
---text chat related tasks, such as managing channels, decorating messages,
---filtering text, creating commands, and developing custom chats interfaces.
---
local TextChatService;
---Determines whether `TextChatService` should be fully enabled or allow
---legacy
---[Lua Chat System](https://developer.roblox.com/en-us/articles/Lua-Chat-System)
---behavior.
---
---Setting to this property to `enum/ChatVersion/LegacyChatService`
---effectively disables `TextChatService`.
---
TextChatService.ChatVersion = nil;
---Determines whether `TextChatService` should create default
---`TextChatCommand`s.
---
---If true, the following `TextChatCommand`s are created and put in a
---`Folder` named **TextChatCommands** inside `TextChatService`:
---
---| Name              | PrimaryAlias | SecondaryAlias | Description                                                                                   | Usage Example  |
---| :---------------- | :----------- | :------------- | :-------------------------------------------------------------------------------------------- | :------------- |
---| RBXConsoleCommand | console      |                | Opens the [Developer Console](https://developer.roblox.com/en-us/articles/Developer-Console). | `\console`     |
---| RBXEmoteCommand   | emote        | e              | Plays avatar emote.                                                                           | `\e dance`     |
---| RBXHelpCommand    | help         | ?              | Shows a list of chat commands.                                                                | `\help`        |
---| RBXMuteCommand    | mute         | m              | Mutes a user by user's `Player.Name` or `Player.DisplayName` in all `TextChannel`s.           | `\m Username`  |
---| RBXUnmuteCommand  | unmute       | um             | Unmutes a user by user's `Player.Name` or `Player.DisplayName` in all `TextChannel`s.         | `\um Username` |
---| RBXVersionCommand | version      | v              | Shows the chat version.                                                                       | `\version`     |
---
---Developers can edit, create, and remove `TextChatCommand`s as even if
---`TextChatService.CreateDefaultCommands` is `true`.
---
TextChatService.CreateDefaultCommands = nil;
---Determines whether `TextChatService` should create default `TextChannel`s.
---
---If true, `Team` based `TextChannel`s are automatically created (and
---removed when `Team`s are removed), along with the following `TextChannel`s
---in a `Folder` named **TextChannels** inside `TextChatService`:
---
---| Name                       | Description                                                                                                                                                                       |
---| :------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
---| RBXGeneral                 | For all messages.                                                                                                                                                                 |
---| RBXSystem                  | For system messages.                                                                                                                                                              |
---| RBXTeam<`BrickColor.Name`> | For team messages. Name of the `TextChannel` is the string "RBXTeam" followed by the name of `Team.BrickColor`. (Ex: "RBXTeamNavy blue" for a team with "Navy blue" `BrickColor`) |
---
---If false, `Team` based `TextChannel`s are **not** automatically created
---and destroyed.
---
---Developers can edit, create, and remove `TextChannel`s even if
---`TextChatService.CreateDefaultTextChannels` is `true`.
---
TextChatService.CreateDefaultTextChannels = nil;
---@class RBXScriptSignal.MessageReceived : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.MessageReceived, callback: fun(textChatMessage: TextChatMessage)): RBXScriptConnection
---Fires when `TextChannel:SendAsync` response is received by the server or
---`TextChannel:DisplaySystemMessage` is invoked.
---
---Use `TextChatMessage` parameter to get the `TextSource` and the text of
---the message (with `TextChatMessage.Text`).
---
---The `TextChatMessage` parameter is the final result of any functions bound
---to `TextChatMessage.OnIncomingMessage`.
---
TextChatService.MessageReceived = nil;
---@class RBXScriptSignal.SendingMessage : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.SendingMessage, callback: fun(textChatMessage: TextChatMessage)): RBXScriptConnection
---Fires when `TextChannel:SendAsync` is called by the sending client.
---
---Use this to allow placeholder messages to be shown to the user while
---waiting for server response to `TextChannel:SendAsync`.
---
TextChatService.SendingMessage = nil;
---@class TextFilterResult : Instance
---Represents the result of a call to `TextService/FilterStringAsync`. Used to
---distribute a filtered string accordingly.
---
local TextFilterResult;
---@param toUserId int64
---@return string
---Returns the text in a properly filtered manner for the specified
---`Player/UserId`. This should be used in the context of non-chat text that
---another user can see, such as the name of a pet.
---
TextFilterResult.GetNonChatStringForUserAsync = function(self, toUserId) end;
---@param toUserId int64
---@return string
---The GetChatForUserAsync function returns the text in a properly filtered
---manner for the specified `Player/UserId`. This should be used in the
---context of chats between players, although there are some other cases
---where text filtering is required.
---
---This function returns the string appropriate for sending and displaying to
---a target user (specified by _toUserId_) from the original sender using the
---least restrictive filtering appropriate for the target user, with `Chat`
---privacy settings of both users enforced. This string should only be shown
---to the target user, as it might not be appropriate for all users.
---
---This method throws an error if the two users are not allowed to chat (that
---is, if `Chat/CanUserChatAsync` would return false for the given sender and
---receiver). If this method throws the string should not be displayed to the
---user. In addition, this function will throw an error if CanUserChatAsync
---would return false, so CanUserChatAsync should be called first to check.
---
---This function currently throws an error if the user with the id _toUserId_
---is not online on the current server.
---
---If text can be used for real-time or near real-time communication it
---should use this method.
---
---This function will return immediately in most cases. The only time it will
---yield is if the target user is offline or has just joined the server and
---their filtering info is not yet loaded.
---
TextFilterResult.GetChatForUserAsync = function(self, toUserId) end;
---@return string
---Returns the text in a properly filtered manner for all users.
---
TextFilterResult.GetNonChatStringForBroadcastAsync = function(self) end;
---@class TextLabel : GuiLabel, GuiObject, GuiBase2d, GuiBase, Instance
---@field public ContentText string
---@field public Font Font
---@field public FontFace Font
---@field public FontSize FontSize
---@field public LineHeight float
---@field public LocalizedText string
---@field public MaxVisibleGraphemes int
---@field public RichText bool
---@field public Text string
---@field public TextBounds Vector2
---@field public TextColor BrickColor
---@field public TextColor3 Color3
---@field public TextFits bool
---@field public TextScaled bool
---@field public TextSize float
---@field public TextStrokeColor3 Color3
---@field public TextStrokeTransparency float
---@field public TextTransparency float
---@field public TextTruncate TextTruncate
---@field public TextWrap bool
---@field public TextWrapped bool
---@field public TextXAlignment TextXAlignment
---@field public TextYAlignment TextYAlignment
---A TextLabel renders a rectangle, like a `Frame`, with styled text. The
---rectangle can be used to define text boundaries, text scaling
---(`TextLabel/TextScaled`) and wrapping (`TextLabel/TextWrapped`,
---`TextLabel/TextXAlignment`, `TextLabel/TextYAlignment`).
---
---This class contains properties that control the display of the text, such as
---`TextLabel/Font` and `TextLabel/TextColor3`. All text rendered by a single
---text label will have the same visual properties; multiple TextLabel objects
---must be used in order to render multiple styles of text. To display only text
---and hide the rectangle, set `GuiObject/BackgroundTransparency` to 1.
---
---`TextService/GetTextSize` can be used to get the size (bounds) of text that
---would be rendered in a TextLabel given a font size, font, and frame size.
---
---A `UITextSizeConstraint` object can be used to constrain the size of text with
---`TextLabel/TextScaled` enabled. It is recommended that the size of text is no
---lower than 9, otherwise it may not be visible to most users.
---
local TextLabel;
---This property provides a copy of `TextLabel/Text` that contains exactly
---what is being rendered by the `TextLabel`. This is useful for eliminating
---style tags used for rich text.
---
---#### Example
---
---When `TextLabel/RichText` is enabled, the `TextLabel/ContentText` property
---shows the text as it appears to the player.
---
---<table>
---    <thead>
---        <tr>
---            <th>RichText</th>
---            <th>Text</th>
---            <th>ContentText</th>
---        </tr>
---    </thead>
---    <tbody>
---        <tr>
---            <td>false</td>
---            <td>&lt;b&gt;Hello,&lt;br/&gt; world!&lt;/b&gt;</td>
---            <td>&lt;b&gt;Hello,&lt;br/&gt; world!&lt;/b&gt;</td>
---        </tr>
---        <tr>
---            <td>true</td>
---            <td>&lt;b&gt;Hello,&lt;br/&gt; world!&lt;/b&gt;</td>
---            <td>Hello,<br/> world!</td>
---        </tr>
---    </tbody>
---</table>
---
TextLabel.ContentText = nil;
---The Font property selects one of several pre-defined fonts with which the
---UI element will render its text. Some fonts have bold, italic and/or light
---variants (as there is no font-weight or font-style properties).
---
---With the exception of the "Legacy" font, each font will render text with
---the line height equal to the `TextLabel/TextSize` property. The "Code"
---font is the only monospace font. It has the unique property that each
---character has the exact same width and height ratio of 1:2. The width of
---each character is approximately half the `TextLabel/TextSize` property.
---
TextLabel.Font = nil;
---
TextLabel.FontFace = nil;
---This property determines the height in offsets of one line of text.
---
TextLabel.FontSize = nil;
---Controls the height of lines, as a multiple of the font's em square size,
---by scaling the spacing between lines of text in the `TextLabel`. Valid
---values range from 1.0 to 3.0, defaulting to 1.0.
---
TextLabel.LineHeight = nil;
---This property sets whether a `TextLabel` should be `GuiBase2d/Localize` or
---not.
---
TextLabel.LocalizedText = nil;
---This property controls the maximum number of graphemes (or units of text)
---that are shown on the `TextLabel`. It is primarily provided as an easy way
---to create a "typewriter effect" where the characters appear one at a time.
---
---Changing the property does not change the position or size of the visible
---graphemes - the layout will be calculated as if all graphemes are visible.
---
---Setting the property to -1 disables the limit and shows the entirety of
---the `TextLabel/Text`.
---
TextLabel.MaxVisibleGraphemes = nil;
---This property determines whether the `TextLabel` renders the
---`TextLabel/Text` string using rich text formatting. Rich text uses simple
---markup tags to style sections of the string in bold, italics, specific
---colors, and more.
---
---To use rich text, simply include formatting tags in the `TextLabel/Text`
---string.
---
TextLabel.RichText = nil;
---The Text property determines the content rendered by the UI element. The
---visual properties of the string rendered to the screen is determined by
---`TextLabel/TextColor3`, `TextLabel/TextTransparency`,
---`TextLabel/TextSize`, `TextLabel/Font`, `TextLabel/TextScaled`,
---`TextLabel/TextWrapped`, `TextLabel/TextXAlignment` and
---`TextLabel/TextYAlignment`.
---
---It is possible to render emoji (for example, 😃) and other symbols. These
---special symbols aren't affected by the `TextLabel/TextColor3` property.
---These can be pasted into `Script` and `LocalScript` objects, as well as
---the field within the Properties window.
---
---This property may contain newline characters, however, it is not possible
---to type newline characters within the Properties window. Similarly, this
---property may contain a tab character, but it will render as a space
---instead.
---
TextLabel.Text = nil;
---The read-only property TextBounds reflects the absolute size of rendered
---text in offsets. In other words, if you were to try to fit text into a
---rectangle, this property would reflect the minimum dimensions of the
---rectangle you would need in order to fit the text.
---
---Using `TextService/GetTextSize`, you can predict what TextBounds will be
---on a TextLabel given a string, `TextLabel/Font`, `TextLabel/TextSize` and
---frame size.
---
TextLabel.TextBounds = nil;
---
TextLabel.TextColor = nil;
---This property determines the color of all the text rendered by a
---`TextLabel|GUI` element. This property along with `TextLabel/Font`,
---`TextLabel/TextSize` and `TextLabel/TextTransparency` will determine the
---visual properties of text. Text is rendered after the text stroke
---(`TextLabel/TextStrokeColor3`).
---
---It's important that text is easily read by players! Be sure to choose
---colors with little-to-no saturation, like white, grey, or black. Make sure
---the color of your text is contrasted by the `TextLabel/BackgroundColor3`
---of the GUI element. If the element has a transparent background, try
---applying a black `TextLabel/TextStrokeColor3` to help contrast the text
---with the 3D world behind it.
---
TextLabel.TextColor3 = nil;
---The TextFits is a read-only property that is false if `TextLabel/Text`
---content does not fit within the `GuiBase2d/AbsoluteSize` when rendered. If
---`TextLabel/TextWrapped` is true, a false value indicates that some text is
---truncated and not rendering. Otherwise, it indicates if the line of text
---is rendering outside the UI element's rectangle. If `TextLabel/TextScaled`
---is enabled, this property will be disabled when text must be scaled down
---in order to fit.
---
TextLabel.TextFits = nil;
---Rather than using TextScaled, we recommend you consider using
---`GuiObject/AutomaticSize|AutomaticSize`, a new method to dynamically size
---UI that will give you the best visual result possible.
---
---The TextScaled property determines whether text is scaled so that it fills
---the entire UI element's space. When this is enabled, `TextLabel/TextSize`
---is ignored and `TextLabel/TextWrapped` is automatically enabled. This
---property is useful for text-rendering UI elements within
---`BillboardGui|BillboardGuis`.
---
---When this property is used for screen-space UI, it may be desirable to use
---a `UITextSizeConstraint` to restrict the range of possible text sizes.
---
---#### TextScaled and AutomaticSize
---
---It's recommended that developers avoid usage of TextScaled and adjust UI
---to take advantage of the AutomaticSize property instead. Here are the core
---differences between the two properties:
---
---- TextScaled scales the content (text) to accommodate the UI. Without
---  careful consideration, some text may become unreadable if scaled too
---  small.
---- AutomaticSize resizes the UI to accommodate content.
---
---With AutomaticSize, you're able to adjust your UI to accommodate the
---content (text) while maintaining a consistent font size. For more
---information on how to use automatic sizing, see the UI Automatic Size
---article.
---
---We suggest that you don't apply both TextScaled and AutomaticSize on the
---same UI object. If you apply both properties:
---
---- AutomaticSize determines the maximum amount of available space that a
---  `GuiObject` can use (in this case, text)
---- TextScaled uses the available space determined by AutomaticSize, to
---  scale the font size to fit the available space, which will expand up to
---  the maximum font size (100), if there are no size constraints
---- The end result will be: text goes to 100 font size and the UI object
---  will expand to fit that text
---
---Using both AutomaticSize and TextScaled at the same time can result in
---significant scaling differences than when AutomaticSize is off. Here is an
---example of an automatically sized TextLabel (with no minimum size) that
---has TextScaled enabled:
---
---![TextScaled Demo][1]
---
---Note how automatic size changes the TextLabel's size relative to the
---parent frame's size. Subsequently, as the TextLabel is resized, the
---TextScaled property scales the text to the maximum amount of space
---available by the automatically sized TextLabel.
---
---[1]: /assets/blt09c403ee1409b090/TextScaledDemo.gif
---
TextLabel.TextScaled = nil;
---The TextSize property determines the height in offsets of one line of
---rendered text. The unit is in offsets, not points (which is used in most
---document editing programs). It's worth noting that the "Legacy" font's
---line height behaves differently, and won't match this property exactly.
---
---This property and `TextLabel/TextColor3`, `TextLabel/TextTransparency`,
---`TextLabel/TextStrokeColor3` and `TextLabel/TextStrokeTransparency` each
---influence the way text is rendered.
---
---This property supersedes `TextLabel/FontSize` since it is a number and not
---an enum. Internally, Roblox uses several sets of pre-rendered character
---images for each size of each font. It chooses the closest size to
---TextSize, then scales that set of character images to render text. Before
---the introduction of this property, you could only pick from the
---pre-rendered sizes, which were listed by the `Enum/FontSize` enum.
---
TextLabel.TextSize = nil;
---The TextStrokeColor3 property sets the color of the stroke, or outline, of
---rendered text. This property and `TextLabel/TextStrokeTransparency`
---determine the visual properties of the text stroke.
---
---Text stroke is rendered before normal text and is simply 4 renderings of
---the same text in +/- 1 pixel offsets in each direction. Text stroke
---rendering works independently and identically to `TextLabel/TextColor3`
---and `TextLabel/TextTransparency`.
---
TextLabel.TextStrokeColor3 = nil;
---The TextStrokeTransparency property sets the transparency of the stroke,
---or outline, of rendered text. This property and
---`TextLabel/TextStrokeColor3` determine the visual properties of the text
---stroke.
---
---Text stroke is rendered before normal text and is simply 4 renderings of
---the same text in +/- 1 pixel offsets in each direction. Text stroke
---rendering works independently and identically to `TextLabel/TextColor3`
---and `TextLabel/TextTransparency`. Since text stroke is simply multiple
---renderings of the same transparency, this property is essentially
---multiplicative on itself four times over (e.g. a TextStrokeTransparency of
---0.5 appears about the same as TextTransparency of 0.0625, or 0.5^4).
---Therefore, it's recommended to set TextStrokeTransparency to a value in
---the range of 0.75 to 1 for more a more subtle effect.
---
TextLabel.TextStrokeTransparency = nil;
---The TextColor3 property determines the transparency of all the text
---rendered by a UI element. This property along with `TextLabel/Font`,
---`TextLabel/TextSize` and `TextLabel/TextColor3` will determine the visual
---properties of text. Text is rendered after the text stroke
---(`TextLabel/TextStrokeTransparency`).
---
---Fading text in using a numeric for-loop is a fantastic way to draw a
---player's attention to text appearing on screen.
---
---```
----- Count backwards from 1 to 0, decrementing by 0.1
---for i = 1, 0, -.1 do
---   textLabel.TextTransparency = i
---   wait(.1)
---end
---```
---
TextLabel.TextTransparency = nil;
---Controls the truncation of the text displayed in this TextLabel.
---
TextLabel.TextTruncate = nil;
---This property determines if text wraps to multiple lines within the
---`TextLabel|GUI` element space, truncating excess text.
---
TextLabel.TextWrap = nil;
---When enabled, this property will render text on multiple lines within a
---`TextLabel|GUI` element's space so that `TextLabel/TextBounds` will never
---exceed the `GuiBase2d/AbsoluteSize` of the UI element.
---
---This is achieved by breaking long lines of text into multiple lines. Line
---breaks will prefer whitespace; should a long unbroken word exceed the
---width of the element, that word will be broken into multiple lines.
---
---If further line breaks would cause the vertical height of the text (the Y
---component of `TextLabel/TextBounds`) to exceed the vertical height of the
---element (the Y component of `GuiBase2d/AbsoluteSize`), then that line will
---not be rendered at all.
---
TextLabel.TextWrapped = nil;
---TextXAlignment determines the horizontal alignment (X-axis) of text
---rendered within a UI element's space. It functions similarly to the CSS
---text-align property, with left, right and center values (there is no
---justify option). For Left and Right, text is rendered such that the
---left/right text bounds just touch the edge of the UI element rectangle.
---For Center, each line of text is centered on the very center of the UI
---element rectangle.
---
---This property is used in conjunction with `TextLabel/TextYAlignment` to
---fully determine text alignment on both axes. This property won't affect
---the read-only properties `TextLabel/TextBounds` and `TextLabel/TextFits`.
---
TextLabel.TextXAlignment = nil;
---TextYAlignment determines the vertical alignment (Y-axis) of text rendered
---within a UI element's space. For Top and Bottom, text is rendered such
---that the top/bottom text bounds just touch the edge of the UI element
---rectangle. For Center, text is rendered such that there is an equal space
---from the top bounds of the text to the top of the element and the bottom
---bounds of the text to the bottom of the element.
---
---This property is used in conjunction with `TextLabel/TextXAlignment` to
---fully determine text alignment on both axes. This property won't affect
---the read-only properties `TextLabel/TextBounds` and `TextLabel/TextFits`.
---
TextLabel.TextYAlignment = nil;
---@param text string
---@return void
TextLabel.SetTextFromInput = function(self, text) end;
---@class TextService : Instance
---The TextService is a service internally responsible for handling the display
---of text in the game.
---
---This class has two member functions,
---
---The `TextService/GetTextSize` function gives developers the ability to
---calculate the space required for a specific text string with specified
---formatting, returning a `DataType/Vector2` pixel size.
---
---The `TextService/FilterStringAsync` function is required to properly filter
---user specified text (such as chat messages or other inputs) in the interests
---of user safety. Developers not using the Roblox default `Chat`, or allowing
---users to otherwise input text must use this function.
---
---For more information on text filtering please see [this article][1].
---
---[1]: https://developer.roblox.com/articles/Text-and-Chat-Filtering
---
local TextService;
---@param string string
---@param fontSize int
---@param font Font
---@param frameSize Vector2
---@return Vector2
---Computes the `DataType/Vector2` dimensions (in pixels) that will be taken
---up with text when using the specified formatting parameters and size
---constraints.
---
---Note, the fontSize parameter will not accept the `Enum/FontSize` Enum.
---Instead the integer size corresponding with the `Enum/FontSize` Enum
---should be used. This is not equal to the value of the `Enum/FontSize`
---Enum. For example, for _Size11_ font, the integer _11_ should be used.
---
---This function is a useful alternative to the `TextLabel/TextBounds`
---property of the `TextLabel` and `TextButton` objects. Using the
---`TextLabel/TextBounds` property to calculate the dimensions text requires
---is often impractical as it requires a `TextLabel` object to be created.
---
---With GetTextSize, the dimensions required by a particular text string in a
---particular `TextLabel` or `TextButton` can be calculated before any object
---is created or text property set.
---
---Developers are recommended to add a pixel of padding to the result to
---ensure no text is cut off.
---
TextService.GetTextSize = function(self, string, fontSize, font, frameSize) end;
---@param stringToFilter string
---@param fromUserId int64
---@param textContext TextFilterContext
---@return Instance
---The FilterStringAsync function filters a string being received from a
---user, using the `TextService`, and returns a `TextFilterResult` which can
---be used to distribute the correctly filtered text accordingly.
---
---#### Usage
---
---This method should be called once each time a user submits a message. Do
---not cache the results of this function and re-use them for separate
---messages. If a user submits the same text multiple times this method must
---be called again each time the message is sent. If the results are cached
---and reused spam detection and many forms of context-aware filtering will
---be broken and potentially put user safety at risk. Games that improperly
---use cached results may face moderation.
---
---However, it is encouraged to keep these result objects to display the same
---message to users who join the server later. For example: this can be used
---to safely and efficiently implement a server chat log that always uses the
---least restrictive filtering for users who join later, or for efficiently
---displaying text like a pet name to a user who joins the game after the pet
---was first spawned and name filtered.
---
---The optional `Enum/TextFilterContext` parameter will not impact the
---filtered result of the query. This value will be used to improve Roblox's
---text filtering.
---
---Private text is anything that is seen only by specific players, rather
---than every player. For example, if the chat is seen by a single player, or
---by a selected group of players, then the chat is considered private. Chat
---for teams or chat that is potentially visible to a wider group, such as
---the server, is considered public. If you are unsure what your text
---qualifies as, leave the optional field blank.
---
---Note:
---
---- This method always yields to make a text filtering service call
---- This method may throw if there is a service error that can not be
---  resolved. If this function throws an error please do not retry the
---  request; this method implements it's own retry logic internally. If this
---  method fails do not display the text to any user.
---- This method currently throws if _fromUserId_ is not online on the
---  current server. We plan to support users who are offline or on a
---  different server in the future.
---
TextService.FilterStringAsync = function(self, stringToFilter, fromUserId, textContext) end;
---@param scale float
---@return void
TextService.SetResolutionScale = function(self, scale) end;
---@param assetId Content
---@return Dictionary
TextService.GetFamilyInfoAsync = function(self, assetId) end;
---@class TextSource : Instance
---@field public CanSend bool
---@field public UserId int64
---Represents a speaker in a `TextChannel`.
---
---`TextSource`s provide details on permissions users have in `TextChannel`s.
---There may be multiple `TextSource`s for a user if that user belongs in
---multiple `TextChannel`s.
---
---Create `TextSource`s with `TextChannel:AddUserAsync`, which adds a
---`TextSource` to the `TextChannel` as a descendant.
---
---Remove `TextSource`s by calling `TextSource.Destroy`.
---
---Name of a `TextSource` is the `Player.DisplayName` of the user associated with
---the `TextSource` via `TextSource.UserId`.
---
local TextSource;
---Determines whether the user can send messages to the `TextChannel`.
---
---If `false`, user can only read messages in the `TextChannel`.
---
TextSource.CanSend = nil;
---UserId of the user represented by the `TextSource`.
---
---Support for non-user entities may be added in the future via passing in
---negative numbers for this property.
---
TextSource.UserId = nil;
---@class Texture : Decal, FaceInstance, Instance
---@field public OffsetStudsU float
---@field public OffsetStudsV float
---@field public StudsPerTileU float
---@field public StudsPerTileV float
---A Texture object applies a repeating texture to the face of a `BasePart`.
---
---## How does a Texture work?
---
---A Texture will apply an image to the `BasePart` it is parented to. The surface
---this image is applied to is dependent on the `FaceInstance/Face` property.
---When the `BasePart` is resized, the image will repeat. The size of the
---repeating textures is determined by the `Texture/StudsPerTileU` and
---`StudsPerTileV` properties.
---
---```
---local texture = Instance.new("Texture")
---texture.Texture = "http://www.roblox.com/asset/?id=732339893" -- roblox logo
----- 1x1 studs repeating texture
---texture.StudsPerTileU = 1
---texture.StudsPerTileV = 1
---```
---
---The image a Texture applies is determined by its `Decal/Texture` property.
---Images can be uploaded to Roblox provided they adhere to the community
---guidelines. For information on how to upload images, see
---[Textures and Decals](/building-and-visuals/modeling/textures-and-decals).
---
---## What is the difference between Textures and Decals?
---
---The texture object is very similar to the `Decal` object. However, whereas the
---image applied by a `Decal` scales when the `BasePart` is resized, the image
---applied by a Texture repeats.
---
---Repeating textures have a wide range of applications such as floor tiles and
---wall textures.
---
---## Alternatives to Textures
---
---Although Decals have a wide variety of applications, in some cases developers
---may wish to pick one of the following classes instead.
---
---- For non repeating images `Decal` object should be used
---- To apply GUI elements, the `SurfaceGui` object should be used
---- If the effect of lighting on the image needs to be altered, the `SurfaceGui`
---  object should be used
---
---[1]: /building-and-visuals/modeling/textures-and-decals
---
local Texture;
---**OffsetStudsU** determines how far the rendered texture is offset on the
---horizontal axis in studs.
---
---#### Example
---
---<img src="/assets/blt66f9641010756afb/Texture.OffsetStudsUV.0.jpg"  />
---<img src="/assets/blt58d09e6bace617d7/Texture.OffsetStudsUV.1.jpg"  />
---
---In the screenshots above, a Part with a Texture is visible. On the left,
---OffsetStudsU/OffsetStudsV are both 0, so the rendered texture tiling
---aligns with the top-left corner of the part. On the right, both properties
---are set to 1 which causes the tiling to start in the center of the
---texture.
---
---See also:
---
---- `Texture/OffsetStudsV|OffsetStudsV`
---
Texture.OffsetStudsU = nil;
---**OffsetStudsV** determines how far the rendered texture is offset on the
---horizontal axis in studs.
---
---#### Example
---
---<img src="/assets/blt66f9641010756afb/Texture.OffsetStudsUV.0.jpg"  />
---<img src="/assets/blt58d09e6bace617d7/Texture.OffsetStudsUV.1.jpg"  />
---
---In the screenshots above, a Part with a Texture is visible. On the left,
---OffsetStudsU/OffsetStudsV are both 0, so the rendered texture tiling
---aligns with the top-left corner of the part. On the right, both properties
---are set to 1 which causes the tiling to start in the center of the
---texture.
---
---See also:
---
---- `Texture/OffsetStudsU|OffsetStudsU`
---
Texture.OffsetStudsV = nil;
---Sets the horizontal size, in studs, of the tiled image applied by the
---`Texture`.
---
---Larger values for this property will lead to the `Texture` appearing
---larger, and repeating less frequently. Unlike with `Decal`s, the size of
---the repeated image is unaffected by the dimensions of the `BasePart`.
---Instead, resizing the `BasePart` only increases the number of times the
---texture repeats.
---
---See the code snippet below for an example of how this property can be
---used.
---
---```
---local texture = Instance.new("Texture")
---texture.Texture = "http://www.roblox.com/asset/?id=732339893" -- roblox logo
----- 1x1 studs repeating texture
---texture.StudsPerTileU = 1
---texture.StudsPerTileV = 1
---```
---
---Note:
---
---- This property can be set to very low values, but not zero
---- The horisontal / vertical distinction is relative to the `BasePart`s
---  axis. Therefore, the `Texture` will rotate along with the `BasePart`.
---
Texture.StudsPerTileU = nil;
---Sets the vertical size, in studs, of the tiled image applied by the
---`Texture`.
---
---Larger values for this property will lead to the `Texture` appearing
---larger, and repeating less frequently. Unlike with `Decal`s, the size of
---the repeated image is unaffected by the dimensions of the `BasePart`.
---Instead, resizing the `BasePart` only increases the number of times the
---texture repeats.
---
---See the code snippet below for an example of how this property can be
---used.
---
---```
---local texture = Instance.new("Texture")
---texture.Texture = "http://www.roblox.com/asset/?id=732339893" -- roblox logo
----- 1x1 studs repeating texture
---texture.StudsPerTileU = 1
---texture.StudsPerTileV = 1
---```
---
---Note:
---
---- This property can be set to very low values, but not zero
---- The horisontal / vertical distinction is relative to the `BasePart`s
---  axis. Therefore, the `Texture` will rotate along with the `BasePart`.
---
Texture.StudsPerTileV = nil;
---@class ThirdPartyUserService : Instance
---@field public ActiveGamepadAdded RBXScriptSignal.ActiveGamepadAdded
---@field public ActiveGamepadRemoved RBXScriptSignal.ActiveGamepadRemoved
---@field public ActiveUserSignedOut RBXScriptSignal.ActiveUserSignedOut
---An internal service that is used to handle third-party related users. This
---service only works on consoles, and is only intended to be used by Roblox.
---
local ThirdPartyUserService;
---@return void
ThirdPartyUserService.ReturnToEngagement = function(self) end;
---@return string
ThirdPartyUserService.GetUserPlatformName = function(self) end;
---@return bool
ThirdPartyUserService.HaveActiveUser = function(self) end;
---@return string
ThirdPartyUserService.GetUserPlatformId = function(self) end;
---@return void
ThirdPartyUserService.ShowAccountPicker = function(self) end;
---@param gamepadId UserInputType
---@return int
ThirdPartyUserService.RegisterActiveUser = function(self, gamepadId) end;
---@class RBXScriptSignal.ActiveGamepadAdded : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ActiveGamepadAdded, callback: fun()): RBXScriptConnection
---
ThirdPartyUserService.ActiveGamepadAdded = nil;
---@class RBXScriptSignal.ActiveGamepadRemoved : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ActiveGamepadRemoved, callback: fun()): RBXScriptConnection
---
ThirdPartyUserService.ActiveGamepadRemoved = nil;
---@class RBXScriptSignal.ActiveUserSignedOut : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.ActiveUserSignedOut, callback: fun(signOutStatus: int)): RBXScriptConnection
---
ThirdPartyUserService.ActiveUserSignedOut = nil;
---@class ThreadState : Instance
---@field public FrameCount int
---@field public Populated bool
---@field public ThreadId int
---@field public ThreadName string
local ThreadState;
---
ThreadState.FrameCount = nil;
---
ThreadState.Populated = nil;
---
ThreadState.ThreadId = nil;
---
ThreadState.ThreadName = nil;
---@param index int
---@return Instance
ThreadState.GetFrame = function(self, index) end;
---@class TimerService : Instance
---An internal service responsible for scheduling timed events. It is used by the
---`Debris` class. Its functionality can not be accessed by developers.
---
local TimerService;
---@class ToastNotificationService : Instance
local ToastNotificationService;
---@param notificationId string
---@return void
ToastNotificationService.HideNotification = function(self, notificationId) end;
---@param message string
---@param notificationId string
---@return void
ToastNotificationService.ShowNotification = function(self, message, notificationId) end;
---@class Tool : BackpackItem, Instance
---@field public CanBeDropped bool
---@field public Enabled bool
---@field public Grip CFrame
---@field public GripForward Vector3
---@field public GripPos Vector3
---@field public GripRight Vector3
---@field public GripUp Vector3
---@field public ManualActivationOnly bool
---@field public RequiresHandle bool
---@field public ToolTip string
---@field public Activated RBXScriptSignal.Activated
---@field public Deactivated RBXScriptSignal.Deactivated
---@field public Equipped RBXScriptSignal.Equipped
---@field public Unequipped RBXScriptSignal.Unequipped
---Tools are objects that a `Humanoid` object can equip. For players, they are
---stored in a `Backpack` object parented to a `Player` object. In-game, players
---may have multiple tools which appear as icons at the bottom of the screen.
---Equipping a tool moves it from the Backpack and into a player's
---`Character|character` model in the `Workspace`. By default, tools are held in
---the right hand and have a handle in them, which is a `BasePart|Part` named
---"Handle" inside (though one is not required if `Tool/RequiresHandle` is off).
---Tools that are to be provided to (re)spawning players ought to be stored in
---the `StarterPack`.
---
---On desktop, pressing a number key (1, 2, 3...) will equip a tool. Equipped
---tools can be dropped into the Workspace by pressing Backspace. It's
---recommended that you turn `Tool/CanBeDropped` off so it is not possible to
---drop a tool, die, respawn and drop again to duplicate tools. On gamepads, LB
---and RB buttons will equip tools. You can disable activation via left click (or
---right trigger on gamepad) by setting `Tool/ManualActivationOnly` on. Doing so
---requires that you call Activate yourself through some sort of other user
---input.
---
---Tools are not the only way to capture user input. You can also use
---`ContextActionService`, `UserInputService` or `Player/GetMouse`. If you need a
---Tool to have multiple actions, such as pressing a key while the Tool is
---equipped, you should use ContextActionService's
---`ContextActionService/BindAction|BindAction` and
---`ContextActionService/UnbindAction|UnbindAction` in the
---`Tool/Equipped|Equipped` and `Tool/Unequipped|Unequipped` events,
---respectively. Use a `LocalScript` send these actions to the server via a
---`RemoteFunction` inside the Tool.
---
local Tool;
---The CanBeDropped property controls whether the player can drop the `Tool`.
---
---If true, when the backspace button is pressed the tool will be parented to
---the `Workspace` and removed from the player's `Backpack`. If false, the
---when the backspace button is pressed the tool will go back to the player's
---Backpack and it will not be dropped.
---
Tool.CanBeDropped = nil;
---The Enabled property relates to whether or not the `Tool` can be used.
---This is useful if you want to prevent a player from using a tool, but do
---not want to remove it from their `Backpack`.
---
---When set to true, the tool can use the tool.
---
---When set to false, the tool is disabled and the player cannot use the
---tool. It prevents the tool from being activated or deactivated by
---`the Tool/Activate` and `Tool/Deactivate` functions. It also prevents the
---`Tool/Activated` and `Tool/Deactivated` events from firing for the tool.
---
Tool.Enabled = nil;
---The Grip property stores the `Tool|Tool's` Grip properties as a single
---`DataType/CFrame|CFrame`. This includes the `Grip/Up|Up`,
---`Grip/Right|Right`, `Grip/Forward|Forward`, and `Grip/Pos|Pos` properties.
---
---The grip properties are used to position how the player holds the tool.
---
---Unlike the grip properties that it stores, this property is not visible in
---a tool's `Properties` window in Studio. Regardless, it can be set and
---retrieved using a `Script` or `LocalScript`.
---
---![Grip properties in Studio's Properties Window][1]
---
---In order to change a tool's grip properties, you must either use a
---`Script` or `LocalScript` or a Studio plugin such as [this][1] one.
---
---[1]: /assets/blt87cc763d68414be8/Screen_Shot_2018-08-26_at_8.35.48_PM.png
---[2]: https://www.roblox.com/library/174577307/Tool-Grip-Editor-Plugin
---
Tool.Grip = nil;
---The GripForward properties is one of the properties that specifies a
---Tool's orientation in a character's hand. This represents the R02, R12,
---and R22 values of the Grip `DataType/CFrame|CFrame's` rotation matrix.
---
---Other tool properties that control how a player holds a tool include:
---`Grip/GripUp|Up`, `Grip/GripRight|Right`, and `Grip/GripPos|Pos`
---properties. All of these properties are stored in a single CFrame in the
---`Tool/Grip` property.
---
---In order to change a tool's grip properties, you must either use a
---`Script` or `LocalScript` or a Studio plugin such as [this][1] one.
---
---[1]: https://www.roblox.com/library/174577307/Tool-Grip-Editor-Plugin
---
Tool.GripForward = nil;
---The GripPos property controls the positional offset of a `Tool` weld
---matrix. It is one of several properties used to position how the player
---holds the tool.
---
---Other tool properties that control how a player holds a tool include:
---`Grip/GripUp|Up`, `Grip/GripRight|Right`, and `Grip/GripForward|Forward`
---properties. All of these properties are stored in a single CFrame in the
---`Tool/Grip` property.
---
---In order to change a tool's grip properties, you must either use a
---`Script` or `LocalScript` or a plugin such as [this][1] one.
---
---[1]: https://www.roblox.com/library/174577307/Tool-Grip-Editor-Plugin
---
Tool.GripPos = nil;
---The GripRight property is one of the properties that specifies a
---`Tool|Tool's` orientation in a character's hand. This represents the R00,
---R10, and R20 values of the Grip `DataType/CFrame|CFrame's` rotation
---matrix.
---
---Other tool properties that control how a player holds a tool include:
---`Grip/GripUp|Up`, `Grip/GripForward|Forward`, and `Grip/GripPos|Pos`
---properties. All of these properties are stored in a single CFrame in the
---`Tool/Grip` property.
---
---In order to change a tool's grip properties, you must either use a
---`Script` or `LocalScript` or a plugin such as [this][1] one.
---
---[1]: https://www.roblox.com/library/174577307/Tool-Grip-Editor-Plugin
---
Tool.GripRight = nil;
---The GripUp property is one of the properties that specifies a Tool's
---orientation in a character's hand. This represents the R01, R11, and R21
---values of the Grip `DataType/CFrame|CFrame's` rotation matrix.
---
---Other tool properties that control how a player holds a tool include:
---`Grip/GripRight|Right`, `Grip/GripForward|Forward`, and `Grip/GripPos|Pos`
---properties. All of these properties are stored in a single CFrame in the
---`Tool/Grip` property.
---
---In order to change a tool's grip properties, you must either use a
---`Script` or `LocalScript` or a plugin such as [this][1] one.
---
---[1]: https://www.roblox.com/library/174577307/Tool-Grip-Editor-Plugin
---
Tool.GripUp = nil;
---The ManualActivationOnly property controls whether the `Tool` can be
---activated without explicitly executing `Tool/Activate` in a script.
---
---When set to true, the tool will only fire `Tool/Activated` when
---`Tool/Activate` is called. This also suppresses the
---`ContextActionService`'s `ContextActionService/BindActivate` function.
---
---When set to false, mouse clicks (when the tool is equipped) will also fire
---`Tool/Activated`.
---
Tool.ManualActivationOnly = nil;
---The RequiresTool property determines whether a `Tool` functions without a
---handle.
---
---A tool has a handle when it has a child part named "Handle". Tools without
---handles are typically ones that do not require the player equipping them
---to hold anything to use them. For instance, handles may not be necessary
---for _fly_ or _build_ tools. Tools with handles are typically ones that
---require the player equipping them to hold an object to use them. For
---instance, handle are likely necessary for weapons such as guns and swords.
---
---When set to true, the tool will function and be `Tool/Activated|activated`
---and `Tool/Deactivated|deactivated` without a handle.
---
---When set to false, the tool will not function without a handle.
---
Tool.RequiresHandle = nil;
---The ToolTip property controls the message that will be displayed when the
---player's `Mouse` hovers over the `Tool` in their `Backpack`.
---
---Generally, the value of this property should describe the what the tool is
---or its use. For instance, for a shovel tool, you may choose to set the
---ToolTip to:
---
---```lua
---	tool.ToolTip = "Shovel"
---```
---
---or
---
---```lua
---	tool.ToolTip = "Use to dig"
---```
---
---or
---
---```lua
---	tool.ToolTip = "Shovel - Use to dig"
---```
---
Tool.ToolTip = nil;
---@return void
---The Activate function simulates a click on a `Tool`. The Tool must be
---equipped for this function to work.
---
---Tools will normally trigger the `Tool/Activated` event when the player
---releases the left mouse button, while the tool is equipped.
---
---The below code, when placed in a `LocalScript`, would create a tool in the
---`Players/LocalPlayer|LocalPlayer's` `Backpack`. It will simulate the tool
---being activated and print "Tool activated" when the player equips the
---tool.
---
---```lua
---local tool = Instance.new("Tool")
---tool.RequiresHandle = false
---tool.Parent = game.Players.LocalPlayer.Backpack
---
---tool.Equipped:Connect(function()
---	tool:Activate()
---end)
---
---function toolActivated()
---    print("Tool activated")
---end
---
---tool.Activated:Connect(toolActivated)
---```
---
Tool.Activate = function(self) end;
---@return void
---The Deactivate function simulates the deactivation of a `Tool`. The Tool
---must be equipped for this function to work.
---
---Tools will normally trigger the `Tool/Deactivated` event when the player
---releases the left mouse button, while the tool is equipped.
---
---The below code, when placed in a `LocalScript`, would create a tool in the
---`Players/LocalPlayer|LocalPlayer's` `Backpack`. It will simulate the tool
---being deactivated and print "Tool deactivated" when the player equips the
---tool.
---
---```lua
---local tool = Instance.new("Tool")
---tool.RequiresHandle = false
---tool.Parent = game.Players.LocalPlayer.Backpack
---
---tool.Equipped:Connect(function()
---	tool:Deactivate()
---end)
---
---function toolDeactivated()
---    print("Tool deactivated")
---end
---
---tool.Deactivated:Connect(toolDeactivated)
---```
---
Tool.Deactivate = function(self) end;
---@class RBXScriptSignal.Activated : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Activated, callback: fun()): RBXScriptConnection
---Activated is not called if the Ctrl key is pressed during a click.
---
---The Activated event fires when the player clicks while a `Tool` is
---equipped.
---
---This function is used to perform an action when the player uses the tool.
---For instance, when the player clicks while a _Rocket Launcher_ tool is
---equipped, the activated event executes the code to create and launch a
---rocket.
---
---The below code, when placed in a `LocalScript`, would create a tool in the
---`Players/LocalPlayer|LocalPlayer's` `Backpack`. It will print "Tool
---activated" when the player clicks while the created tool is equipped.
---
---```lua
---local tool = Instance.new("Tool")
---tool.RequiresHandle = false
---tool.Parent = game.Players.LocalPlayer.Backpack
---
---function onActivation()
---    print("Tool activated")
---end
---
---tool.Activated:Connect(onActivation)
---```
---
Tool.Activated = nil;
---@class RBXScriptSignal.Deactivated : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Deactivated, callback: fun()): RBXScriptConnection
---The Deactivated event fires when the left mouse button is released while a
---`Tool` is equipped.
---
---This function is used to perform an action when the player stops using a
---tool. For instance, a tool may make a player fly until they release their
---left mouse button.
---
---The below code, when placed in a `LocalScript`, would create a tool in the
---`Players/LocalPlayer|LocalPlayer's` `Backpack`. It will print "Tool
---deactivated" when the player releases the left mouse button, while the
---tool is equipped.
---
---````lua
---local tool = Instance.new("Tool")
---tool.RequiresHandle = false
---tool.Parent = game.Players.LocalPlayer.Backpack
---
---function toolDeactivated()
---    print("Tool deactivated")
---end
---
---tool.Deactivated:Connect(toolDeactivated)
---```"
---````
---
Tool.Deactivated = nil;
---@class RBXScriptSignal.Equipped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Equipped, callback: fun(mouse: Mouse)): RBXScriptConnection
---The Equipped event fires when a player when a player takes a `Tool` out of
---their `Backpack` to use. This event can be used to determine when a player
---stops using and puts a tool away.
---
---This event does not fire when `Tool/RequiresHandle` is enabled and no
---handle is present.
---
---The opposite of this event, `Tool/Unequipped`, can be used alongside this
---event to determine unequips a `Tool` by putting in back in their backpack.
---
Tool.Equipped = nil;
---@class RBXScriptSignal.Unequipped : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Unequipped, callback: fun()): RBXScriptConnection
---The Unequipped event fires when a player unequips a `Tool` by putting in
---back in their `Backpack`. This event can be used to determine when a
---player stops using and puts a tool away.
---
---This event does not fire when `Tool/RequiresHandle` is enabled and no
---handle is present.
---
---The opposite of this event, `Tool/Equipped`, can be used alongside this
---event to determine when a player takes a tool out of their backpack to
---use.
---
---The example shown below will print "A tool was unequipped" each time the
---tool is unequipped by the player. Please note that the below example
---assumes that you've already defined what "Tool" is.
---
---```lua
---Tool.Unequipped:Connect(function()
---    print("The tool was unequipped")
---end)
---```
---
Tool.Unequipped = nil;
---@class ToolboxService : Instance
local ToolboxService;
---@class Torque : Constraint, Instance
---@field public RelativeTo ActuatorRelativeTo
---@field public Torque Vector3
---A Torque is used to apply a torque to a part or assembly. When active, this
---object will find the center of mass of the part or assembly connected to its
---`Constraint/Attachment0|Attachment0` and will apply a torque, spinning the
---part or parts.
---
---![Torque Demo][1]
---
---## Direction of Torque
---
---The direction of the spin is determined by the `Torque/Torque` and
---`Torque/RelativeTo` properties. The Torque defines the spin about the X, Y,
---and Z axes. However, these axes are oriented based on the RelativeTo property.
---
---When RelativeTo is set to
---`Enum/ActuatorRelativeTo|Enum.ActuatorRelativeTo.Attachment0`, the torque will
---be oriented based on the local space of Attachment0. If Attachment0 moves or
---rotates, the torque will change to make sure it is still applying in the
---correct directions. Similarly, when RelativeTo is set to
---`Enum/ActuatorRelativeTo|Enum.ActuatorRelativeTo.Attachment1`, the torque will
---be applied based on `Constraint/Attachment1|Attachment1's` orientation,
---regardless of the position or direction of Attachment0. Last, RelativeTo can
---be set to `Enum/ActuatorRelativeTo|Enum.ActuatorRelativeTo.World`, which will
---use the world coordinate system to determine the axes for rotation.
---
---See also:
---
---- [Body Movers Example.rbxl][2], a sample place showcasing body movers in
---  various configurations.
---- [Attachments and Constraints][3], an article outlining how to create and use
---  attachments and constraints
---
---[1]: /assets/blt9aa3f798a7e9af47/TorqueDemo.gif
---[2]:
---  https://doy2mn9upadnk.cloudfront.net/uploads/default/original/3X/e/1/e17a844750802035b24f68ddcbd83f6312b8f1d6.rbxl
---[3]: https://developer.roblox.com/articles/Constraints
---
local Torque;
---The <a href="/reference/engine/datatypes/CFrame">CFrame</a> in which the
---Torque is expressed.
---
Torque.RelativeTo = nil;
---The strength and direction of the torque.
---
Torque.Torque = nil;
---@class TorsionSpringConstraint : Constraint, Instance
---@field public Coils float
---@field public CurrentAngle float
---@field public Damping float
---@field public LimitEnabled bool
---@field public LimitsEnabled bool
---@field public MaxAngle float
---@field public MaxTorque float
---@field public Radius float
---@field public Restitution float
---@field public Stiffness float
---A torsion spring applies a torque based on a relative angle and a relative
---angular velocity. Specifically, torsion springs try to bring two axes from two
---parts together in a compliance way.
---
---This constraint is ideal for building vehicle suspension.
---
local TorsionSpringConstraint;
---This property indicates the number of spring coils for visualization. The
---default value is 8.
---
TorsionSpringConstraint.Coils = nil;
---The current angle, in degrees, of the
---`TorsionSpringConstraint|TorsionSpringConstraint's` limiting cone. The
---limiting cone is formed at the position of the constraint's
---`Constraint/Attachment0|Attachment0` around its secondary axis with an
---angle equal to `TorsionSpringConstraint/MaxAngle|MaxAngle`.
---
TorsionSpringConstraint.CurrentAngle = nil;
---This property determines how the angular velocity is dampened by the
---constraint and is expressed as the torsional damping `c_t` in the formula:
---`T=-k_t (Δ*Θ) - c_t (Δ⋅Θ)`. The value defaults to 0.01.
---
---Damping of the torsion spring causes the spring to oppose the relative
---angular velocity. For instance, if the two axes are rotating toward each
---other with an angular velocity `(Δ⋅Θ < 0)` an opposing torque will try to
---slow down this relative rotation (`T>0`). If the axes were rotating away
---from each other (`Δ⋅Θ > 0`) an opposing torque (`T<0`) will slow down this
---angular velocity. In both cases, the damping is resulting in a torque that
---opposes the motion.
---
---In the example below, developers can change the damping of the torsion
---spring as follows:
---
---```lua
---torsionSpring.Damping = 1.0
---```
---
TorsionSpringConstraint.Damping = nil;
---
TorsionSpringConstraint.LimitEnabled = nil;
---This property, when enabled, limits the relative angular motion of the
---secondary axes of attachments through a cone constraint. The default value
---is false.
---
---In the example below, you can enable a cone limit on the relative motion
---of the secondary axes as follows:
---
---```lua
---torsionSpring.LimitEnabled = true
---```
---
TorsionSpringConstraint.LimitsEnabled = nil;
---This property determines the maximum angle (in degrees) of the
---`TorsionSpringConstraint|TorsionSpringConstraint's` limiting cone. The
---limiting cone is formed at the position of the constraint's
---`Constraint/Attachment0|Attachment0` around its secondary axis with an
---angle equal to MaxAngle. The default value is 45.0 degrees.
---
---In the example below, when
---`TorsionSpringConstraint/LimitEnabled|LimitEnabled` is `true` for the
---constraint, the maximum angle between the primary axes of attachments can
---be limited to 10 degrees for instance as follows:
---
---```lua
---torsionSpring.MaxAngle = 10
---```
---
TorsionSpringConstraint.MaxAngle = nil;
---This property determines the maximum torque supported by the spring. The
---value defaults to 1000.0.
---
---If a part isn't moving, consider raising this value (and also check that
---it is not `BasePart/Anchored|Anchored` or attached to another anchored
---part).
---
---#### What is torque
---
---Torque is equivalent to a force applied over a distance (T = force \*
---distance). The same way that applying a force translates into
---`pulling/pushing` an object, applying a torque results in `rotating` the
---object.
---
---#### Setting the MaxTorque
---
---In the example below, you can change the maximum torque provided by the
---torsion spring as follows:
---
---```lua
---torsionSpring.MaxTorque = 300
---```
---
TorsionSpringConstraint.MaxTorque = nil;
---When developing in studio, the spring will always be visualized,
---regardless of the camera distance.
---
---This property indicates the visualization radius of the spring, in studs.
---The default value is 0.4.
---
TorsionSpringConstraint.Radius = nil;
---This property how elastic `Attachment|Attachments` connected by a
---`TorsionSpringConstraint` are when they reach the end of the range
---specified by `TorsionSpringConstraint/MaxAngle|MaxAngle` when
---`TorsionSpringConstraint/LimitEnabled|LimitEnabled` is `true`. The value
---defaults to 0 and can be any floating number within the range [0, 1].
---
---```lua
---torsionSpring.Restitution = 0
---```
---
---#### What is restitution
---
---Restitution determines the damping effect that the constraint applies when
---it reaches its limits.
---
---Imagine you release a ball from some distance and it hits the ground. If
---the restitution of the surface is 1 then the ball will return to its
---original height (no energy is damped). If the restitution is 0 the ball
---will stick to the ground (all the energy is lost). Similarly, automobiles
---rely on damping for shock absorption as do some “slow-close” doors.
---
---All the values between 0 and 1 will simulate something between these to
---extreme cases.
---
TorsionSpringConstraint.Restitution = nil;
---This property determines the magnitude of the opposing torque of the
---spring, in the absence of damping, and is expressed as `k_t` in the
---formula: `T=-k_t (Δ*Θ) - c_t (Δ⋅Θ)`. The value defaults to 100.
---
---In the absence of damping, the opposing torque of the spring is
---proportional to the stiffness parameter. For instance, higher stiffness
---results in a larger opposing torque, and smaller stiffness results in a
---smaller opposing torque. The larger the torque value, the faster the axes
---are pushed together when the relative angle is positive (or away from each
---other if the relative angle is negative).
---
---In the example below, developers can change the stiffness of the torsion
---spring as follows:
---
---```lua
---torsionSpring.Stiffness = 1000
---```
---
TorsionSpringConstraint.Stiffness = nil;
---@class TotalCountTimeIntervalItem : StatsItem, Instance
---A special type of <a href="/reference/engine/classes/StatsItem">StatsItem</a>
---which measures a total-count-over-time interval. As of right now, this
---StatsItem goes unused.
---
local TotalCountTimeIntervalItem;
---@class TouchInputService : Instance
---An internal service responsible for touch inputs on mobile devices.
---
local TouchInputService;
---@class TouchTransmitter : Instance
---An internal object used by networking and replication code to transmit
---`BasePart/Touched` and `BasePart/TouchEnded` events.
---
---The TouchTransmitter object named 'TouchInterest' is created and parented to a
---`BasePart` when the `BasePart/Touched` or `BasePart/TouchEnded` events are
---listened (connected) to.
---
---Removing the TouchTransmitter will prevent the touched events from working.
---The TouchTransmitter object can also be removed exclusively on the client
---(when `Workspace/FilteringEnabled` is set to true). This will prevent
---collisions from models the client has network ownership of (such as the
---player's character) from registering.
---
---Note, in almost all circumstances developers should disconnect the connection
---using `RBXScriptConnection/Disconnect` method rather than removing the
---TouchTransmitter. Otherwise the connection will not be cleaned up which can
---cause performance issues over time.
---
local TouchTransmitter;
---@class TracerService : Instance
local TracerService;
---@param name string
---@param parentId string
---@return string
TracerService.StartSpan = function(self, name, parentId) end;
---@param spanId string
---@return void
TracerService.FinishSpan = function(self, spanId) end;
---@class Trail : Instance
---@field public Attachment0 Attachment
---@field public Attachment1 Attachment
---@field public Brightness float
---@field public Color ColorSequence
---@field public Enabled bool
---@field public FaceCamera bool
---@field public Lifetime float
---@field public LightEmission float
---@field public LightInfluence float
---@field public MaxLength float
---@field public MinLength float
---@field public Texture Content
---@field public TextureLength float
---@field public TextureMode TextureMode
---@field public Transparency NumberSequence
---@field public WidthScale NumberSequence
---The Trail object is used to create a trail like an effect between two points.
---As the points move through space a texture is drawn on the plane the points
---define. This is commonly used to create effects to help visualize movements
---like tracer trails behind projectiles, footprints, tire tracks, and many other
---similar effects.
---
---![A diagram explaining the Trail object.][1]
---![An example usage of the Trail object.][2]
---
---When a Trail is active it will record the position of it's `Trail/Attachment0`
---every frame. It then connects these positions to where the attachments were in
---the previous frame, creating a polygon. That polygon is then filled in with
---the Trail's `Trail/Color` and `Trail/Texture` (if that Texture exists). Each
---segment drawn in this way will eventually fade based on the TrailEffect's
---`Trail/Lifetime`.
---
---## Creating Trails
---
---A Trail must be a descendant of the `Workspace`, and its attachment properties
---(`Trail/Attachment0` and `Trail/Attachment1`) must be set to two unique
---Attachments. Once this has been done the effect will create a trail as soon as
---either of its attachments moves.
---
---![Basic Trail][3]
---
---It is common practice to either store the Trail in the `BasePart` containing
---the effect's attachments, or as a child of a `Folder` in the Workspace with
---other effects objects.
---
---[1]: /assets/bltf78765806231bc92/TrailSegments2.png
---[2]: /assets/blta001a4353eae2502/Trail.gif
---[3]: /assets/bltbed0b1f9276adeb8/BasicTrail.gif
---
local Trail;
---A `Trail` starts drawing its segments at the positions of its
---`Trail/Attachment0` and **\*Attachment1**.
---
---When the Trail is `Trail/Enabled` it will record the positions of its
---attachments every frame. It will connect these positions to the positions
---of the attachments on the previous frame. This creates a polygon that is
---then filled in by the Trail's `Trail/Color` and `Trail/Texture` (if that
---Texture exists).
---
---When created a Trail will not have any Attachments set by default. These
---will need to be set in order for the effect to work.
---
---Changing the Attachments of a Trail while a trail is drawing will remove
---all of the segments the trail has already drawn.
---
Trail.Attachment0 = nil;
---A `Trail` starts drawing its segments at the positions of its
---**Attachment0** and `Trail/Attachment1`.
---
---When the Trail is `Trail/Enabled` it will record the positions of its
---attachments every frame. It will connect these positions to the positions
---of the attachments on the previous frame. This creates a polygon that is
---then filled in by the Trail's `Trail/Color` and `Trail/Texture` (if that
---Texture exists).
---
---When created a Trail will not have any Attachments set by default. These
---will need to be set in order for the effect to work.
---
---Changing the Attachments of a Trail while a trail is drawing will remove
---all of the segments the trail has already drawn.
---
Trail.Attachment1 = nil;
---Scales the light emitted from `Trail`. By default, this property is 1 and
---can set to any number within the range [0, 10000].
---
---Increasing the value of `Trail/LightInfluence|LightInfluence` decreases
---the effect of **Brightness**. **Brightness** doesn't have any effect when
---`Trail/LightInfluence|LightInfluence` is 1.
---
Trail.Brightness = nil;
---The color of a `Trail` can be set with the effect's Color property. This
---property determines what color the segments of the trail will have through
---their `Trail/Lifetime`.
---
---Color is a `DataType/ColorSequence`, which means that the segments in a
---trail can shift between several colors. Note that if the color for a trail
---changes after some of the trail segments have been drawn, all of the old
---segments will be updated to match the new colors.
---
---If a trail has a `Trail/Texture` then the Color property will tint that
---texture.
---
---![Trails with tinted textures][1]
---
---Any transparent components of a texture will not be tinted.
---
---[1]: /assets/blt9f587dabe55772ed/TrailTextureColor.png
---
Trail.Color = nil;
---The Enabled property determines whether a Trail will be drawn or not. This
---Enabled property defaults to true.
---
---When enabled is true, the trail will create segments between the current
---position of its `Trail/Attachment0` and the position of the attachments in
---the last frame.
---
---If enabled is set to false while a trail is drawing no new segments will
---be drawn, but any existing segments will be cleaned up naturally when they
---reach the end of their `Trail/Lifetime`. If you would like to clean up any
---existing segments, you can use the `Trail/Clear` function at the same
---time.
---
Trail.Enabled = nil;
---The FaceCamera property determines whether the `Trail` is always drawn
---facing the camera. The default value is false.
---
---If set to true, the trail textures will always face the camera. If set to
---false, the texture will be drawn in the direction of the distance between
---the trail's `Trail/Attachment0` and `Trail/Attachment1`.
---
---Note that changing this property immediately affects all existing and
---future trail segments. This means that all existing and new segments will
---adjust to face the player's camera or the direction of the attachments
---according to the property's new state.
---
---#### FaceCamera Enabled
---
---![Demonstrating a trail with the FaceCamera property set to true.][1]
---
---    local trail = script.Parent
---    trail.FaceCamera = true
---
---#### FaceCamera Disabled
---
---![Demonstrating a trail with the FaceCamera property set to false.][2]
---
---    local trail = script.Parent
---    trail.FaceCamera = false
---
---[1]: /assets/blt9c08878433714397/TrailFacingCamera.gif
---[2]: /assets/bltfd829c76c7a0d037/TrailNotFacingCamera.gif
---
Trail.FaceCamera = nil;
---The Lifetime property determines how long each segment in its `Trail` will
---last in seconds. Once a segment is drawn, it will wait for the given
---lifetime (measured in seconds) and then will disappear. The lifetime
---property defaults to 2 seconds, but can be set anywhere between 0.01
---and 20.
---
---The lifetime of a trail is also used by that effect's `Trail/Color` and
---`Trail/Transparency` properties to determine how each segment is drawn.
---Both of these properties are sequences, meaning that they define their
---values at certain keypoints in the segement's lifetime and then
---interpolate between the values as the segment ages.
---
---If a trail's lifetime changes while there are still segments that the
---trail has drawn, these segments will immediately behave as if they always
---had the new lifetime. This means that if they have existed for longer than
---the lifetime they will be removed immediately.
---
Trail.Lifetime = nil;
---The LightEmission `Trail` property sets how much the `Trail/Color|Colors`
---of the trail are blended with the colors behind them. LightEmission uses
---additive blending to combine the colors, meaning the RGB values of the
---colors are added together to determine the displayed color. This addition
---is weighted by the value of LightEmission.
---
---When changed this property instantly affects all particles owned by the
---emitter, both current and future particles.
---
---This property is not related to the dynamic lighting engine of Roblox. If
---you need your trail to emit light, it is recommended to create parts with
---`PointLight` that follow the path of the trail.
---
Trail.LightEmission = nil;
---**LightInfluence** determines the factor the light in the environment
---affects the appearance of the Trail. A value of zero (0) ensures no
---influence which allows a trail to be visible even in complete darkness.
---
---Changing this property immediately affects all existing and future
---segments of the trail.
---
---See also:
---
---- `Trail/LightEmission|LightEmission`, another Trail property related to
---  light
---- `Beam/LightEmission`, an identical property used by `Beam`s
---
Trail.LightInfluence = nil;
---The MinLength of a `Trail` determines the maximum length of each of the
---segments in the trail.
---
---Note that changing MaxLength will only affect new segments that are drawn
---– any old segments that have already been drawn will maintain their
---current length.
---
---This value can be any number greater than or equal to 0, and defaults
---to 0. If the property is set to 0, the maximum length will be infinity -
---meaning that the trail will not have a maximum length.
---
---Please note that, even if this property is 0, or another large number, the
---trail is still constrained by its `Trail/Lifetime`. Old segments will be
---erased if they reach the end of their lifetime, even if the trail is
---shorter than the maximum length. Be sure to set both properties fittingly.
---
---This property can also be used alongside the `Trail/MinLength` property,
---which determines the minimum length trail must before before it is drawn.
---
---![Demonstration of trail length.][1]
---
---[1]: /assets/blt92f5f82000a51022/TrailMinLength.gif
---
Trail.MaxLength = nil;
---The MinLength of a `Trail` determines the minimum length of each of the
---segments in the trail.
---
---If neither of the trail's `Trail/Attachment0` or `Trail/Attachment1` have
---moved at least the minimum length in studs, then no new segments will be
---created and the endpoints of the current segment will be moved to the
---current position of the attachments.
---
---Note that changing MinLength will only affect new segments that are drawn
---– any old segments that have already been drawn will maintain their
---current length.
---
---This value can be any number greater than or equal to 0, and defaults to
---0.1.
---
---This property can also be used alongside the `Trail/MaxLength` property,
---which determines the maximum length trail may be before its oldest
---segments are erased.
---
---![Minimum length of a trail's segment in studs.][1]
---
---[1]:
---  https://images.contentstack.io/v3/assets/bltc2ad39afa86662c8/blt92f5f82000a51022/5b3d57948fbd570b783cc4df/TrailMinLength.gif
---
Trail.MinLength = nil;
---The Texture property is the texture to draw on a `Trail`'s segments. This
---property sets which image asset to use for the texture. This is set the
---same way as textures in other objects, such as `ImageLabel` or
---`ParticleEmitter`. The simplest way to set this property is to use an
---image uploaded to the Game Explorer (this requires the current place to be
---Published to Roblox).
---
---If a texture is not provided, then just the `Trail/Color` of the Trail
---will be used. With a texture, the trail will draw the texture as its
---attachments move.
---
---![A trail with a pawprint texture.][1]
---
---Textures can be displayed in a variety of different ways based on the
---trail's `Trail/TextureMode` and `Trail/TextureLength` properties.
---
---[1]: /assets/blt799ab8f34ca0d660/TrailTexture.gif
---
Trail.Texture = nil;
---This property determines how `Trail/Texture`s are drawn by `Trail`. The
---behavior of TextureLength is determined by the `Trail/TextureMode` of its
---trail.
---
---If the TextureLength is changed after its trail has drawn some of its
---segments, the new length will only be applied to new segments being drawn
----- old segments will be unaffected.
---
---This value can be any number greater than 0 and defaults to 1.
---
Trail.TextureLength = nil;
---A `Trail`'s TextureMode property determines how the effect's
---`Trail/Texture` (if any) is drawn. The behavior of the texture in each
---mode is also very much dependent on the effect's `Trail/TextureLength`
---property. Note that changing an effect's TextureMode after some of the
---trail has been drawn will affect all of the previously drawn segments.
---
---TextureMode defaults to _Stretch_
---
---##Stretch Stretch is the default TextureMode for Trails. In this mode the
---texture will be tiled a number of times equal to the number defined by
---TextureLength. It will stretch these tiles evenly to fit the entire length
---of the drawn trail. For example, if TextureLength is set to 4 then the
---texture will always repeat 4 times in the trail, no matter how long or
---short the trail is.
---
---![Demonstrating a trail texture using the stretch mode.][1]
---
---##Wrap In the Wrap mode, the texture will start at the attachment points
---and will move as the attachments move. As soon as the attachments have
---moved a number of studs equal to the TextureLength, then the texture will
---repeat. The longer the trail is, the more times the texture will repeat.
---
---![Demonstrating a trail texture using the wrap mode.][2]
---
---##Static In the Static mode, the texture will start at the initial
---position of the trail and will be drawn as the attachments move. Once the
---attachments move a number of studs equal to the TextureLength, then the
---texture will repeat.
---
---![Demonstrating a trail texture using the static mode.][3]
---
---[1]: /assets/bltcf784069f0cc275c/TrailStretch.gif
---[2]: /assets/blte500638c07aeb7a8/TrailWrap.gif
---[3]: /assets/bltc1b137a7a58c9e42/TrailStatic.gif
---
Trail.TextureMode = nil;
---The Transparency property of a `Trail` sets how transparent the segments
---of the trail are over the trail's `Trail/Lifetime`. This value is a
---`DataType/NumberSequence`, meaning it can be a static value or can change
---throughout the lifetime of the trail segments.
---
---The values in the NumberSequence can be any number, but the effective
---range of transparency is 0 (completely opaque) to 1 (completely
---see-through). The Transparency property for TrailEffects defaults to 0.5.
---
Trail.Transparency = nil;
---The WidthScale property is a `DataType/NumberSequence` that scales the
---width of the `Trail` over the course of its lifetime.
---
---This property can range from `0` to `1`. The value of the property
---influences the width of the trail by setting the trail's width to the
---product of:
---
---    (distance between trail's attachment0 and attachment1 in studs) * (the value of WidthScale)
---
---For example, if the trail's attachments are 2 stud's apart, and the value
---of this property is 0.5, the trail's width will be 1 stud and the trail
---will be centered in between the two attachments.
---
---If you would like to hide the trail entirely, consider setting
---`Trail/Enabled` to false.
---
Trail.WidthScale = nil;
---@return void
---The Clear function clears the segments of the `Trail`. This means that any
---trail that has been drawn will be erased when this function is called,
---even if that segment's `Trail/Lifetime` duration has not yet been reached.
---
---While this is less noticeable for trails with shorter lifetimes, this is
---useful when cleaning up trails that have a longer lifetime, or for cases
---where the trail is removed when a certain game action occurs.
---
---Calling this function will only affect old segments that have already been
---done. It will not affect the drawing of any new trail segments after this
---function call. If you would like to clear existing trail segments, and
---temporarily prevent new segments from being drawn, consider toggling the
---trail's `Trail/Enabled` property to false at the same time.
---
Trail.Clear = function(self) end;
---@class Translator : Instance
---@field public LocaleId string
---The role of a Translator is to manufacture/return strings localized for the
---viewing player. it can be used to retrieve display-ready localized text from a
---`LocalizationTable`. The source of the `Translator/LocaleId` property, the set
---of tables it will search, and the order it will search them in depends on
---which method was used to create the Translator instance.
---
---The input for a Translator is the original development language string and a
---context, where all or part of the context can be used to find a more
---precise/situational translation for the source string.
---
---The Translator can also be used to manufacture translated strings with inserts
---(data replacements) which may change order based on the target language.
---
local Translator;
---The Roblox locale of the output translated strings from this table, for
---example “en-us” or “es-es.” Defaults to "en-us".
---
Translator.LocaleId = nil;
---@param context Instance
---@param text string
---@return string
Translator.RobloxOnlyTranslate = function(self, context, text) end;
---@param context Instance
---@param text string
---@return string
---Returns the localized text string in a `LocalizationTable` based on its
---`Translator` locale. This string will be in the context of the provided
---object, given the provided **Source** text.
---
---See
---[Localizing with Scripting](/production/localization/localizing-with-scripting)
---for more details and usage examples of this function.
---
---#### Context Overrides
---
---In some cases, duplicate **Source** strings may have completely different
---translations in other languages. For example, the English noun "Screen"
---can indicate both a computer screen and a window screen, but the Spanish
---translations are completely different:
---
---<table>
---<tbody>
---    <tr>
---      <td width="12%">A</td>
---      <td width="16%">B</td>
---      <td width="18%">C</td>
---      <td width="12%">D</td>
---      <td width="18%">E</td>
---    </tr>
---    <tr>
---      <td>Key</td>
---      <td>Context</td>
---      <td><b>Source</b></td>
---      <td>Example</td>
---      <td><b>es</b></td>
---    </tr>
---    <tr>
---      <td></td>
---      <td></td>
---      <td>Screen</td>
---      <td></td>
---      <td>Pantalla</td>
---    </tr>
---    <tr>
---      <td></td>
---      <td></td>
---      <td>Screen</td>
---      <td></td>
---      <td>Mosquitero</td>
---    </tr>
---    <tr>
---      <td> </td>
---      <td></td>
---      <td></td>
---      <td></td>
---      <td></td>
---    </tr>
---  </tbody>
---</table>
---
---In these cases, the first argument to this function &mdash; a valid
---in-game `Instance` &mdash; can be used as a "tie breaker" when multiple
---GUI objects use the same source string. To implement this, specify the
---"path" to the `Instance` you'd like to override as the **Context** value
---of the translation data:
---
---<table>
---<tbody>
---    <tr>
---      <td width="12%">A</td>
---      <td width="36%">B</td>
---      <td width="18%">C</td>
---      <td width="12%">D</td>
---      <td width="18%">E</td>
---    </tr>
---    <tr>
---      <td>Key</td>
---      <td><b>Context</b></td>
---      <td>Source</td>
---      <td>Example</td>
---      <td>es</td>
---    </tr>
---    <tr>
---      <td></td>
---      <td>workspace.ComputerScreen.SurfaceGui.TextLabel</td>
---      <td>Screen</td>
---      <td></td>
---      <td>Pantalla</td>
---    </tr>
---    <tr>
---      <td></td>
---      <td></td>
---      <td>Screen</td>
---      <td></td>
---      <td>Mosquitero</td>
---    </tr>
---    <tr>
---      <td> </td>
---      <td></td>
---      <td></td>
---      <td></td>
---      <td></td>
---    </tr>
---  </tbody>
---</table>
---
---Then, when calling this function in a script, pass the same `Instance` as
---the first argument, followed by the **Source** lookup text as the second
---argument:
---
---```lua
---local LocalizationService = game:GetService("LocalizationService")
---
---local success, translator = pcall(function()
---	return LocalizationService:GetTranslatorForPlayerAsync(game.Players.LocalPlayer)
---end)
---
---if success then
---	local trans = translator:Translate(workspace.ComputerScreen.SurfaceGui.TextLabel, "Screen")
---	print(trans)
---else
---	warn("Cannot load translator for player!")
---end
---```
---
Translator.Translate = function(self, context, text) end;
---@param key string
---@param args Variant
---@return string
---Returns the localized text string in a `LocalizationTable` based on its
---`Translator` locale, by key. The optional **args** table is used for
---filling format parameters in the matching text entry.
---
---Note that this method will throw an error in the following cases:
---
---- If none of the `LocalizationTable|LocalizationTables` available to this
---  `Translator` include a value for the given key.
---- If the
---  [format string](/production/localization/translating-dynamic-content)
---  for the key uses numbered parameters and **args** is not an array.
---- If the
---  [format string](/production/localization/translating-dynamic-content)
---  uses named parameters and **args** is not a table of key-value pairs.
---- If **args** is missing values for parameters that are used in the
---  matching
---  [format string](/production/localization/translating-dynamic-content).
---
---See
---[Localizing with Scripting](/production/localization/localizing-with-scripting)
---for more details and usage examples of this function.
---
Translator.FormatByKey = function(self, key, args) end;
---@class TremoloSoundEffect : SoundEffect, Instance
---@field public Depth float
---@field public Duty float
---@field public Frequency float
---The TremoloSoundEffect creates a trembling effect on a sound by varying the
---volume of the sound up and down.
---
---Like all other `SoundEffect`s, a TremoloSoundEffect can be applied either to a
---`Sound` or `SoundGroup` by being parented to either.
---
local TremoloSoundEffect;
---Range: 0 to 1 (default 1) Controls how much the volume will raise and
---lower. This value ranges between 0 (minimum volume) and 1 (maximum
---volume). If set to its minimum, the volume will not oscillate at all.
---
TremoloSoundEffect.Depth = nil;
---Range: 0 to 1 (default 0.5) Controls how long during one volume
---oscillation the effect will be active, specifically what percentage
---between 0 (0%) and 1 (100%).
---
TremoloSoundEffect.Duty = nil;
---Range: 0.1 to 20 (default 5) Sets how often the effect will oscillate the
---volume. Measured in Hz.
---
TremoloSoundEffect.Frequency = nil;
---@class TriangleMeshPart : BasePart, PVInstance, Instance
---@field public CollisionFidelity CollisionFidelity
---TriangleMeshPart is an abstract intermediate class from which `MeshPart` and
---`PartOperation` inherit. It was created to consolidate the management of
---physical geometry properties between the two sub-classes. It implements the
---read-only `TriangleMeshPart/CollisionFidelity|CollisionFidelity`.
---
local TriangleMeshPart;
---This property determines how the collision model of the `TriangleMeshPart`
---relates to the actual geometry of the mesh. In situations where the
---collision model of a mesh is unimportant or precision isn't necessary, it
---is a good idea to set CollisionFidelity to 'Box' to improve performance.
---
---This property cannot be read or manipulated by scripts during run time.
---
---#### How CollisionFidelity Works
---
---`Enum/CollisionFidelity` has three options, the results of which are
---demonstrated in the image below.
---
---![Collision Fidelity][1]
---
---A visual representation of a `MeshPart`s collision model can be viewed by
---enabling `PhysicsSettings/ShowDecompositionGeometry` in Roblox Studio's
---Settings.
---
---[1]: /assets/blt3ff26427f15a0e74/CollisionFidelity.png
---
TriangleMeshPart.CollisionFidelity = nil;
---@class TrussPart : BasePart, PVInstance, Instance
---@field public Style Style
---Truss parts are the same as `Part|Parts`, except that they have a different
---visual style, resize differently and characters are able to climb them. The
---smallest size it can be is 2x2x2 studs.
---
---![A Truss beam as it appears in game][1]
---
---The `TrussPart/Style|style` of a truss beam can be set to change its
---appearance.
---
---[1]: /assets/bltbbd19f2859328437/TrussPart.png
---
local TrussPart;
---Sets what the truss looks like. There are currently three different
---styles.
---
TrussPart.Style = nil;
---@class Tween : TweenBase, Instance
---@field public Instance Instance
---@field public TweenInfo TweenInfo
---Tweens are used to interpolate the properties of instances. The Tween object
---itself controls the playback of the interpolation. Creating and configuring
---tweens is done with the `TweenService/Create` function. This is the only way
---to create tweens. Instance.new cannot be used for this particular object.
---
---Note that while the configuration of a tween can be accessed after a tween has
---been created, it can not be modified. If new goals are needed for
---interpolation, a new tween must be created. Further information on how to
---create Tweens can be found on the `TweenService` page.
---
---Multiple tweens can be played on the same object at the same time, but they
---must not be animating the same property. If two tweens attempt to modify the
---same property, the initial tween will be cancelled and overwritten by the most
---recent tween (see examples).
---
---Although other methods exist for tweening objects, such as
---`GuiObject/TweenSizeAndPosition`, Tweens allows multiple properties to be
---modified and for the animation to be paused and cancelled at any point.
---
local Tween;
---The Instance property of a `Tween` points to the `Instance` whose
---properties are being interpolated by the tween. As with all `Tween`
---properties, the Instance property is read only. If a developer wants to
---tween a different instance they must create a new `Tween` using
---`TweenService/Create`.
---
Tween.Instance = nil;
---Read-only property that includes information on how the interpolation of
---the `Tween` is to be carried out, using the `TweenInfo` data type. The
---TweenInfo data type includes a range of properties that can be used to
---achieve various styles of animation, including reversing and looping
---`Tween`s (see examples).
---
---As with all `Tween` properties, the TweenInfo property is read only. If a
---developer wants to modify the TweenInfo of a Tween they must create a new
---`Tween` using `TweenService/Create`.
---
Tween.TweenInfo = nil;
---@class TweenBase : Instance
---@field public PlaybackState PlaybackState
---@field public Completed RBXScriptSignal.Completed
---The base class for in-between interpolation handlers.
---
local TweenBase;
---Read only property that shows the current playback `Enum/PlaybackState` of
---the `Tween`. PlaybackState is an Enum type variable with the following
---possible values.
---
---- Delayed - The tween is waiting to repeat due to the DelayTime property
---  of the Tween's `DataType/TweenInfo`
---- Playing - The tween is playing normally
---- Paused - The tween has been paused
---- Completed - The tween has completed successfully
---- Cancelled - The tween has been cancelled
---
TweenBase.PlaybackState = nil;
---@return void
---The Cancel function halts playback of its `Tween` and resets the tween
---variables. If `TweenBase/Play` is called again the `Tween`'s properties
---will resume interpolating towards their destination but, as the tween
---variables have been reset, take the full length of the animation to do so.
---
---Only the tween variables are reset, not the properties being changed by
---the tween. This means if you cancel a tween half way through its animation
---the properties will not reset to their original values. Where Cancel
---differs from `TweenBase/Pause` is that once resumed, it will take the full
---duration of the tween to complete the animation.
---
TweenBase.Cancel = function(self) end;
---@return void
---The Play function starts the playback of its `Tween`. Note that if a tween
---has already begun calling Play will have no effect unless the tween has
---finished or has been stopped (either by `TweenBase/Cancel` or
---`TweenBase/Pause`).
---
---Multiple tweens can be played on the same object at the same time, but
---they must not be animating the same property. If two tweens attempt to
---modify the same property, the initial tween will be cancelled and
---overwritten by the most recent tween (see examples).
---
TweenBase.Play = function(self) end;
---@return void
---The Pause function halts playback of its `Tween`. However the progress
---variables of the tween will not be reset, meaning that when
---`TweenBase/Play` is called again the tween will resume playback from the
---moment it was paused.
---
---If a developer wishes to reset the progress variables of the tween, they
---should use `TweenBase/Cancel`.
---
---This means a tween paused half way through its animation will take half of
---its duration to complete when resumed.
---
TweenBase.Pause = function(self) end;
---@class RBXScriptSignal.Completed : RBXScriptSignal
---@field public Connect fun(self: RBXScriptSignal.Completed, callback: fun(playbackState: PlaybackState)): RBXScriptConnection
---The Completed event of a `Tween` fires when the tween finishes playing.
---This will happen either when the tween naturally finishes playing, or if
---it is stopped with `TweenBase/Cancel`.
---
---A function connected to this event will be passed the PlaybackState of the
---tween when it finished to give indication about why the tween ended. If
---the tween finishes naturally the status will be Completed, if cancelled
---then the state will be Cancelled. Note that calling `TweenBase/Pause` will
---not fire the Completed event.
---
TweenBase.Completed = nil;
---@class TweenService : Instance
---Tweens are used to interpolate the properties of instances. These can be used
---to create animations for various Roblox objects. Almost any numeric property
---can be tweened using TweenService. Note that only specific types of properties
---can be used with TweenService. The types of properties that can be tweened
---are:
---
---- number
---- bool
---- `DataType/CFrame`
---- `DataType/Rect`
---- `DataType/Color3`
---- `DataType/UDim`
---- `DataType/UDim2`
---- `DataType/Vector2`
---- `DataType/Vector2int16`
---- `DataType/Vector3`
---- `DataType/EnumItem`
---
---TweenService's constructor function, `TweenService/Create`, takes information
---about the animation and generates the `Tween` object which can be used to play
---the animation. Note that `Tweens` can animate multiple properties at the same
---time.
---
---Details on how the interpolation of the tween is to be carried out are given
---in the tweenInfo parameter of TweenService:Create(). The `TweenInfo` data type
---includes a range of properties that can be used to achieve various styles of
---animation, including reversing and looping `Tweens` (see examples).
---
---Multiple tweens can be played on the same object at the same time, but they
---must not be animating the same property. If two tweens attempt to modify the
---same property, the initial tween will be cancelled and overwritten by the most
---recent tween (see examples).
---
---Although other methods exist for tweening objects, such as
---`GuiObject/TweenSizeAndPosition`, TweenService allows multiple properties to
---be modified and for the animation to be paused and cancelled at any point.
---
local TweenService;
---@param instance Instance
---@param tweenInfo TweenInfo
---@param propertyTable Dictionary
---@return Tween
---The Create function of `TweenService` creates a new `Tween`. The function
---takes three arguments: the object to tween, the `datatype/TweenInfo` to
---use, and a table containing the properties to tween and the values to
---tween to.
---
---Tweens are used to interpolate the properties of instances. These can be
---used to create animations for various Roblox objects. Almost any numeric
---property can be tweened using `TweenService`.
---
---The propertyTable parameter that is passed in needs to be a dictionary
---where the keys are the string names of the property (e.g. “Position”,
---“Transparency”, “Color”, etc), and the value is the value the property
---needs to be at the end of the tween. Note that only specific types of
---properties can be used with `TweenService`, but multiple properties can be
---animated in the same tween. The types of properties that can be tweened
---are:
---
---- number
---- bool
---- `CFrame`
---- `Rect`
---- `Color3`
---- `UDim`
---- `UDim2`
---- `Vector2`
---- `Vector2int16`
---- `Vector3`
---
---The `Tween` created using this function is unique to the object given as
---the instance parameter. To apply the same tween to another object, call
---this function again with the new object.
---
---Details on how the interpolation of the tween is to be carried out are
---given in the `datatype/TweenInfo` parameter, such as reversing, looping
---and easing.
---
TweenService.Create = function(self, instance, tweenInfo, propertyTable) end;
---@param alpha float
---@param easingStyle EasingStyle
---@param easingDirection EasingDirection
---@return float
---Returns a new alpha value for interpolating using the given alpha value,
---`Enum/EasingStyle`, and `Enum/EasingDirection`.
---
---The provided alpha value is clamped between 0 and 1.
---
TweenService.GetValue = function(self, alpha, easingStyle, easingDirection) end;
---@class UGCValidationService : Instance
local UGCValidationService;
---@param meshPart Instance
---@param meshId string
---@return void
UGCValidationService.SetMeshIdBlocking = function(self, meshPart, meshId) end;
---@param meshId string
---@return int
UGCValidationService.GetMeshTriCount = function(self, meshId) end;
---@param meshId string
---@return Array
UGCValidationService.GetMeshVertColors = function(self, meshId) end;
---@param meshId string
---@return int
UGCValidationService.GetMeshTriCountSync = function(self, meshId) end;
---@param textureId string
---@return Vector2
UGCValidationService.GetTextureSizeSync = function(self, textureId) end;
---@param textureId string
---@return Vector2
UGCValidationService.GetTextureSize = function(self, textureId) end;
---@param url Content
---@param assetFormat string
---@return Objects
UGCValidationService.FetchAssetWithFormat = function(self, url, assetFormat) end;
---@param meshId string
---@return Array
UGCValidationService.GetMeshVertsSync = function(self, meshId) end;
---@param meshId string
---@return Array
UGCValidationService.GetMeshVerts = function(self, meshId) end;
---@class UIAspectRatioConstraint : UIConstraint, UIComponent, UIBase, Instance
---@field public AspectRatio float
---@field public AspectType AspectType
---@field public DominantAxis DominantAxis
---A UIAspectRatioConstraint ensures that the parent UI element (`GuiObject`)
---maintains a particular aspect ratio even if its size is set as a percentage of
---its parent. If an object with this constraint is also under the control of a
---`UILayout` such as `UIGridLayout`, then the constraint controls the objects
---size and overwrites any size the layout would apply.
---
---When applied to a GuiObject, the UIAspectRatioConstraint will make sure that
---the objects ratio is maintained by the value defined in
---`UIAspectRatioConstraint/AspectRatio`. The
---`UIAspectRatioConstraint/AspectType` sets what determines the maximum size of
---the object. When set to `UIAspectRatioConstraint/FitWithinMaxSize`, the
---constraint will make the object the maximum size it can be within the
---`GuiObject` of the element. When set to ScaleWithParentSize, the elements
---maximum size will be the size of the parent while still maintaining the aspect
---ratio. Finally, the `UIAspectRatioConstraint/DominantAxis` will determine
---which axis to use when setting the new size of the element.
---
local UIAspectRatioConstraint;
---AspectRatio determines the width-to-height ratio to maintain. To flip the
---ratio to height-to-width, take the inverse (divide 1 by the number or
---raise to the -1st power). This value must be greater than zero. Below, a
---white `Frame` is placed within the a black `Frame` with two different
---width-to-height ratios.
---
---![A width-to-height ratio of 0.8][1]![A width-to-height ratio of 1.25][2]
---
---[1]: /assets/bltb4147bb1d3de0224/UIAspectRatioConstraint_Ratio_0.8.png
---[2]: /assets/blt9874bdf1824f7688/UIAspectRatioConstraint_Ratio_1.25.png
---
UIAspectRatioConstraint.AspectRatio = nil;
---AspectType determines what limits the maximum size of the element.
---
---- When set to FitWithinMaxSize, the constraint will make the object the
---  maximum size it can be within its own `GuiBase2d/AbsoluteSize`.
---- When set to ScaleWithParentSize, the UI element's maximum size will be
---  the size of the parent while still maintaining the aspect ratio..
---
UIAspectRatioConstraint.AspectType = nil;
---DominantAxis determines which axis to use when setting the new size of the
---UI element if it would otherwise exceed the size of the parent.
---
UIAspectRatioConstraint.DominantAxis = nil;
---@class UIBase : Instance
---UIBase is the base class for UI layout and constraint classes.
---
local UIBase;
---@class UIComponent : UIBase, Instance
---A base class for UI constraint and layout classes, inherits from `UiBase`.
---
local UIComponent;
---@class UIConstraint : UIComponent, UIBase, Instance
---The base class for UI constraint classes.
---
local UIConstraint;
---@class UICorner : UIComponent, UIBase, Instance
---@field public CornerRadius UDim
---A UIComponent that will apply deformation to shapes of corners of its parent
---`GuiObject`. Input, but not descendants, will be clipped to the round corner
---area.
---
---![ImageLabel with rounded corners | Image Credit: 0Techy][1]
---
---## Using the component
---
---To use the UICorner UIComponent:
---
---1.  Create a `Frame` / `ImageLabel` / `ImageButton` / `TextLabel` /
---    `TextButton` / `ViewportFrame`
---2.  Insert a UICorner component as its child
---3.  Adjust the round corner radius by changing the
---    `UICorner/CornerRadius|CornerRadius` property
---
---## UICorner vs 9-slices
---
---Alternatively, rounded backgrounds can be accomplished using 9-slices. As a
---result, it is helpful to understand the pros and cons of UICorner and
---9-slices:
---
---### UICorner
---
---- Pros
---- Can be used to round `ViewportFrame|ViewportFrames` and image assets
---- Allows for a scriptable and dynamic corner radius
---- Cons
---- There is a performance overhead (Screen Space specifically) as it needs
---  extra processing on each pixel, while 9-slice only involves simple sampling
---
---### 9-slices
---
---- Pros
---- Suitable for highly decorative borders that are not just rounded
---- If you have a lot of rounded rectangles with solid colors and you pay
---  special attention to low-end devices, using 9-slice may be more performance
---  efficient
---- Cons
---- Hard to apply to existing image assets
---- Different corner sizes require different assets
---
---## How the corner radius is calculated internally
---
---In order to keep the circular shape of round corners with the UDim
---CornerRadius value, the round corner radius internally will be calculated as
---follows:
---
---`radius = min(min(rectWidth, rectHeight) / 2, CornerRadius.scale * min(rectWidth, rectHeight) + CornerRadius.offset)`
---
---This means that:
---
---1.  The radius of the x-axis is always the same as the radius of y axis.
---2.  The scale will always apply to the minimum edge.
---3.  Rounded rectangles will always be in a pill shape if CornerRadius is set
---    to a value that leads to a calculated result greater than half of the
---    rectangles' minimum edge.
---
---It is suggested to always use either scale or offset to define CornerRadius
---instead of mixing them up.
---
---[1]: /assets/blta27795a3c2bf8f9d/RoundedImage.jpg
---
local UICorner;
---A `DataType/UDim|UDim` property that determines the radius, in pixels, of
---the `UICorner` UIComponent, according to the following formula:
---
---`radius = min(min(rectWidth, rectHeight) / 2, CornerRadius.scale * min(rectWidth, rectHeight) + CornerRadius.offset)`
---
---This means that:
---
---1.  The radius of the x-axis is always the same as the radius of y axis.
---2.  The scale will always apply to the minimum edge.
---3.  Rounded rectangles will always be in a pill shape if CornerRadius is
---    set to a value that leads to a calculated result greater than half of
---    the rectangles' minimum edge.
---
---It is suggested to always use either scale or offset to define
---CornerRadius instead of mixing them up.
---
UICorner.CornerRadius = nil;
---@class UIGradient : UIComponent, UIBase, Instance
---@field public Color ColorSequence
---@field public Enabled bool
---@field public Offset Vector2
---@field public Rotation float
---@field public Transparency NumberSequence
---**UIGradient** is a `UIComponent` that applies a color and transparency
---gradient to the UI elements rendered by the parent `GuiObject`. The appearance
---of the gradient is configurable through the following properties:
---
---- `UIGradient/Color|Color`, a `datatype/ColorSequence`
---- `UIGradient/Transparency|Transparency`, a `datatype/NumberSequence`
---- `UIGradient/Offset|Offset`, a `datatype/Vector2`
---- `UIGradient/Rotation|Rotation`, a number
---
---![Gradient Window Example][1]
---
---A UIGradient will not apply to child or descendant GuiObjects. In order to
---apply the the same gradient to multiple objects, you will need multiple
---UIGradients.
---
---## Supported Objects
---
---You can apply gradients to `Frame`, `TextLabel`, `TextButton`, `ImageLabel`,
---`ImageButton`, and `ViewportFrame`. However, `ScrollingFrame` and `TextBox`
---are not currently supported.
---
---## Performance Considerations
---
---In order to efficiently use a UIGradient, follow these principles:
---
---- Avoid using more than 6 color stops on the `UIGradient/Color|Color`
---  sequence.
---- Avoid using a UIGradient on any object that applies a text stroke
---  (`TextLabel/TextStrokeColor3|TextStrokeColor3`): the gradient will try to
---  blend with strokes and borders, and may cause performance issues.
---- Avoid setting `UIGradient/Color|Color` and
---  `UIGradient/Transparency|Transparency` frequently: this causes the sequence
---  of colors to rebuild often, which is expensive. If possible, set these
---  properties only once and try to animate the `UIGradient/Offset|Offset` or
---  `UIGradient/Rotation|Rotation` properties to achieve a similar effect.
---  Alternatively, you can change the color of the parent `GuiObject` using such
---  properties as `GuiObject/BackgroundColor3|BackgroundColor3`,
---  `ImageLabel/ImageColor3|ImageColor3`, or `TextLabel/TextColor3|TextColor3`.
---- When applying an unchanging gradient on a UI element whose state changes a
---  lot, there is a trade-off between using a UIGradient (processing time) and a
---  static gradient image (memory).
---
---See also:
---
---- [UI Layout and Appearance](/building-and-visuals/ui/ui-layout-and-appearance)
---  for more information on creating UIGradient objects and how they work.
---
---[1]: /assets/blt554b31323e805496/ILoveGradients.jpg
---
local UIGradient;
---The **Color** of a `UIGradient` describes the color to blend with the
---parent UI element along the provided `datatype/ColorSequence`. This
---property works in a similar manner to `Beam/Color` or `Trail/Color`,
---except that it applies over an on-screen distance determined by the
---`UIGradient/Offset|Offset` and `UIGradient/Rotation|Rotation` of the
---UIGradient. The image below shows the linear interpolation of four color
---values:
---
---![How the UIGradient Color ColorSequence applies color to a GuiObject][1]
---
---[1]: /assets/blt62f971fd0f185879/UIGradient.Color.2.jpg
---
UIGradient.Color = nil;
---Whether the gradient is enabled or not.
---
UIGradient.Enabled = nil;
---The **Offset** of a `UIGradient` determines the scalar translation of the
---gradient from the center of the parent `GuiObject`. This value is a scalar
---translation, meaning that the actual pixel offset is determined by the
---`GuiBase2d/AbsoluteSize|AbsoluteSize` of the parent GuiObject. So, a value
---of (1, 0) would shift the gradient horizontally to the right by a distance
---equal to the parent GuiObject's on screen-size. Depending on the
---`UIGradient/Rotation|Rotation`, this may cause the gradient to be
---partially visible or not visible at all.
---
---![An animation of a UIGradient's Offset being animated on the X axis from -1 to 1.][1]
---
---In the animation above, the offset of a UIGradient is animated back and
---forth between the values (-1, 0) and (1, 0). The red dot indicates the
---start of the gradient, and the blue dot indicates the end. Note how the
---distance animated is twice that of the frame's width, as the offset is
---scalar.
---
---Also see `UIGradient/Rotation`, which also affects the geometry of the
---applied gradient.
---
---[1]: /assets/bltbcd2bb515ae0206d/UIGradient.Offset.gif
---
UIGradient.Offset = nil;
---The **Rotation** determines the **clockwise** rotation in degrees of the
---`UIGradient` starting from left to right. The beginning and end control
---points snap to the edges of the parent GuiObject, but maintain the
---provided rotation.
---
---![An animation of a UIGradient's Rotation being animated from 0 to 360][1]
---
---The animation above shows the snapping behavior of the gradient control
---points. The red indicates the start point, and the blue indicates the end.
---Although the control points do not move at a constant pace, the angle
---between them changes at a constant pace.
---
---Also see `UIGradient/Offset`, which also affects the geometry of the
---applied gradient
---
---[1]: /assets/blt83863eeda790ba34/UIGradient.Rotation.gif
---
UIGradient.Rotation = nil;
---The **Transparency** of a `UIGradient` describes how "see-through" the
---parent UI element will be along the provided NumberSequence. This property
---works in a similar manner to `Beam/Transparency` or `Trail/Transparency`,
---except that it applies over an on-screen distance determined by the
---`UIGradient/Offset|Offset` and `UIGradient/Rotation|Rotation` of the
---UIGradient. The image below shows the linear interpolation of three
---transparency values:
---
---![How the UIGradient Transparency NumberSequence applies transparency to a GuiObject][1]
---
---Note: the envelope values of the
---`datatype/NumberSequenceKeypoint|NumberSequenceKeypoints` are ignored.
---
---[1]: /assets/blt4ce00aed92f8c4dd/UIGradient.Transparency.2.jpg
---
UIGradient.Transparency = nil;
